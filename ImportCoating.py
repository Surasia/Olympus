import codecs
import json
import pathlib
import sys
import os
from bl_ui.space_sequencer import selected_sequences_len
import bpy
import collections
from . tag_reader.readers.reader_factory import ReaderFactory
from . Texture import Texture

class ImportSettings:
    lod = -1
    mipmap = -1
    norm_signed = True
    def __init__(self):
        self.lod = -1
        self.mipmap = -1
        self.norm_signed = True
        
class ImportCoating(bpy.types.Operator):
    bl_idname = "infinite.infinitecoating"
    bl_label = "Import Halo Infinite Coating"
    bl_description = "Import coating files as usable shaders."

    filepath: bpy.props.StringProperty(subtype="FILE_PATH")
    
    use_modules: bpy.props.BoolProperty(
        default=False,
        name="use modules",
        options={"HIDDEN"}
    )
    mipmap: bpy.props.IntProperty(
        name="Mipmap level",
        description="Mipmap level of the textures to import.",
        default=0
    )
    norm_signed: bpy.props.BoolProperty(
        name="Signed Texture Range",
        description="import texures with a signed format as signed",
        default=False
    )
    
    

    def grabcoatingnames(self, context):
        parse_mwsy_name = ReaderFactory.create_reader(self.filepath)
        if type(parse_mwsy_name) == type(None):
            return [('', '', '')]
        else:
            parse_mwsy_name.load()
            coatingnames = []
            for entry in range(parse_mwsy_name.tag_parse.rootTagInst.childs[0]['style'].childrenCount):
                temp_palette = parse_mwsy_name.tag_parse.rootTagInst.childs[0]['style'].childs[entry]
                parse_mwsy_name.default_styles = entry
                parse_mwsy_name.toJsonNames()
                coatingnames.append((parse_mwsy_name.naming,parse_mwsy_name.palette,parse_mwsy_name.naming))
            return coatingnames

    coatingname: bpy.props.EnumProperty(items=grabcoatingnames, 
                                       name = "Style",  
                                       description = "Style To Import",)
    
    materialuserpath: bpy.props.StringProperty( 
                                       name = "Material Path",  
                                       description = "Path To Use For .material",
                                       default = "M:\\objects\\")
    
    
    
    use_crosscore: bpy.props.BoolProperty(default=False, name= "Cross Core", description= 'Removes style requirement to enable "cross core" coatings')
    use_damage: bpy.props.BoolProperty(default=False, name= "Zone 7 (Damage)", description= 'Enables Zone 7, used mostly for Damage/Dirt.')
    
    selected_only: bpy.props.BoolProperty(default=False, name= "Selected Objects Only", description= 'Only imports coatings to objects selected.')
    def execute(self, context):
        datasource = bpy.data.objects
        if self.selected_only:
            datasource = bpy.context.selected_objects
        addon_prefs = context.preferences.addons[__package__].preferences
        parse_mwsy = ReaderFactory.create_reader(self.filepath)
        parse_mwsy.load()
        def betteruvscaling():
            node_tree2 = bpy.data.node_groups.new('BetterUVScaling', 'ShaderNodeTree')
            input = node_tree2.inputs.new('NodeSocketFloat', 'Base_Scale_X')
            input.name = 'Base_Scale_X'
            
            input = node_tree2.inputs.new('NodeSocketFloat', 'Base_Scale_Y')
            input.name = 'Base_Scale_Y'
            
            input = node_tree2.inputs.new('NodeSocketFloat', 'Detail_Scale_X')
            input.name = 'Detail_Scale_X'
            
            input = node_tree2.inputs.new('NodeSocketFloat', 'Detail_Scale_Y')
            input.name = 'Detail_Scale_Y'
            
            input = node_tree2.inputs.new('NodeSocketFloat', 'Alternative Transform X')
            input.name = 'Alternative Transform X'
            
            input = node_tree2.inputs.new('NodeSocketFloat', 'Alternative Transform Y')
            input.name = 'Alternative Transform Y'
            
            # BetterUVScaling Output
            output = node_tree2.outputs.new('NodeSocketVector', 'Finalized Scale')
            output.name = 'Finalized Scale'
            
            # NODES
            group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
            group_output_2.is_active_output = True
            group_output_2.location = (1075, 21)

            mapping_2 = node_tree2.nodes.new('ShaderNodeMapping')
            mapping_2.location = (910, 113)

            combine_xyz_001_2 = node_tree2.nodes.new('ShaderNodeCombineXYZ')
            combine_xyz_001_2.location = (322, 329)

            combine_xyz_2 = node_tree2.nodes.new('ShaderNodeCombineXYZ')
            combine_xyz_2.location = (-277, -263)

            math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_001_2.location = (-99, -362)
            math_001_2.inputs[0].default_value = 1
            math_001_2.operation = 'SUBTRACT'
            math_001_2.use_clamp = False
            
            maths = node_tree2.nodes.new('ShaderNodeMath')
            maths.location = (300, 300)
            maths.inputs[0].default_value = 1
            maths.operation = 'SUBTRACT'
            maths.use_clamp = True
            
            maths2 = node_tree2.nodes.new('ShaderNodeMath')
            maths2.location = (300, 500)
            maths2.inputs[0].default_value = 1
            maths2.operation = 'SUBTRACT'
            maths2.use_clamp = True

            math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_003_2.location = (-473, -565)
            math_003_2.operation = 'MULTIPLY'
            math_003_2.use_clamp = False

            uv_map_2 = node_tree2.nodes.new('ShaderNodeUVMap')
            uv_map_2.from_instancer = False
            uv_map_2.location = (328, 0)
            uv_map_2.uv_map = 'UV0'

            math_004_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_004_2.location = (-492, -293)
            math_004_2.operation = 'MULTIPLY'
            math_004_2.use_clamp = False

            group_input_2 = node_tree2.nodes.new('NodeGroupInput')
            group_input_2.location = (-727, -40)

            math_006_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_006_2.location = (-288, -95)
            math_006_2.inputs[0].default_value = 1
            math_006_2.operation = 'SUBTRACT'
            math_006_2.use_clamp = False

            math_005_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_005_2.location = (-288, 350)
            math_005_2.inputs[2].default_value = 0
            math_005_2.operation = 'COMPARE'
            math_005_2.use_clamp = False
            
            math_007_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_007_2.location = (-50, 385)
            math_007_2.inputs[1].default_value = 1
            math_007_2.inputs[2].default_value = 0
            math_007_2.operation = 'COMPARE'
            math_007_2.use_clamp = False
            
            math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_002_2.location = (98, -273)
            math_002_2.operation = 'ADD'
            math_002_2.use_clamp = False

            mix_2 = node_tree2.nodes.new('ShaderNodeMix')
            mix_2.blend_type = 'MIX'
            mix_2.clamp_factor = True
            mix_2.clamp_result = False
            mix_2.factor_mode = 'UNIFORM'
            mix_2.data_type = 'FLOAT'
            mix_2.location = (-103, 74)

            mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
            mix_001_2.blend_type = 'MIX'
            mix_001_2.clamp_factor = True
            mix_001_2.clamp_result = False
            mix_001_2.data_type = 'FLOAT'
            mix_001_2.factor_mode = 'UNIFORM'
            mix_001_2.location = (127, 68)

            math_2 = node_tree2.nodes.new('ShaderNodeMath')
            math_2.location = (-292, -469)
            math_2.inputs[1].default_value = 1
            math_2.inputs[2].default_value = 0
            math_2.name = 'Math'
            math_2.operation = 'WRAP'
            math_2.use_clamp = False
            
            # LINKS
            node_tree2.links.new(mapping_2.outputs[0], group_output_2.inputs[0])
            node_tree2.links.new(math_2.outputs[0], math_001_2.inputs[1])
            node_tree2.links.new(uv_map_2.outputs[0], mapping_2.inputs[0])
            node_tree2.links.new(maths.outputs[0], combine_xyz_001_2.inputs[0])
            node_tree2.links.new(group_input_2.outputs[4], maths.inputs[1])
            node_tree2.links.new(group_input_2.outputs[5], maths2.inputs[1])
            node_tree2.links.new(combine_xyz_001_2.outputs[0], mapping_2.inputs[1])
            node_tree2.links.new(math_003_2.outputs[0], math_2.inputs[0])
            node_tree2.links.new(group_input_2.outputs[0], math_004_2.inputs[0])
            node_tree2.links.new(group_input_2.outputs[2], math_004_2.inputs[1])
            node_tree2.links.new(group_input_2.outputs[1], math_003_2.inputs[0])
            node_tree2.links.new(group_input_2.outputs[3], math_003_2.inputs[1])
            node_tree2.links.new(math_004_2.outputs[0], combine_xyz_2.inputs[0])
            node_tree2.links.new(math_003_2.outputs[0], combine_xyz_2.inputs[1])
            node_tree2.links.new(combine_xyz_2.outputs[0], mapping_2.inputs[3])
            node_tree2.links.new(math_001_2.outputs[0], math_002_2.inputs[1])
            node_tree2.links.new(group_input_2.outputs[5], math_005_2.inputs[0])
            node_tree2.links.new(group_input_2.outputs[5], math_006_2.inputs[1])
            node_tree2.links.new(math_005_2.outputs[0], mix_2.inputs[0])
            node_tree2.links.new(math_006_2.outputs[0], mix_2.inputs[6])
            node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[7])
            node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
            node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[7])
            node_tree2.links.new(group_input_2.outputs[5], math_007_2.inputs[0])
            node_tree2.links.new(math_007_2.outputs[0], mix_001_2.inputs[0])
            node_tree2.links.new(math_002_2.outputs[0], maths2.inputs[1])
            node_tree2.links.new(maths2.outputs[0], combine_xyz_001_2.inputs[1])
            node_tree2.links.new(math_006_2.outputs[0], mix_2.inputs[2])
            node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[3])
            node_tree2.links.new(mix_001_2.outputs[0], math_002_2.inputs[0])
            node_tree2.links.new(mix_2.outputs[0], mix_001_2.inputs[2])
            node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[3])
        betteruvscaling()
        def roughnessmath():
            node_tree3 = bpy.data.node_groups.new('Roughness Math', 'ShaderNodeTree')
                
            # Roughness Math Inputs
            input = node_tree3.inputs.new('NodeSocketFloat', 'Base')
            input.name = 'Base'
            
            input = node_tree3.inputs.new('NodeSocketFloat', 'Exponent')
            input.name = 'Exponent'
            
            input = node_tree3.inputs.new('NodeSocketColor', 'Roughness Black')
            input.name = 'Roughness Black'
            
            input = node_tree3.inputs.new('NodeSocketColor', 'Roughness White')
            input.name = 'Roughness White'

            output = node_tree3.outputs.new('NodeSocketColor', 'Color')
            output.name = 'Color'

            # NODES
            mix_2 = node_tree3.nodes.new('ShaderNodeMix')
            mix_2.blend_type = 'MIX'
            mix_2.clamp_factor = True
            mix_2.clamp_result = False
            mix_2.data_type = 'FLOAT'
            mix_2.factor_mode = 'UNIFORM'
            mix_2.location = (272, 40)

            group_output_2 = node_tree3.nodes.new('NodeGroupOutput')
            group_output_2.is_active_output = True
            group_output_2.location = (536, 0)

            math_012_2 = node_tree3.nodes.new('ShaderNodeMath')
            math_012_2.location = (60, -186)
            math_012_2.inputs[2].default_value = 0.050
            math_012_2.operation = 'MULTIPLY_ADD'
            math_012_2.use_clamp = False
            
            coreclamp = node_tree3.nodes.new('ShaderNodeClamp')
            coreclamp.location = (60, -300)
            coreclamp.inputs[1].default_value = 0
            coreclamp.inputs[2].default_value = 1
            
            math_011_2 = node_tree3.nodes.new('ShaderNodeMath')
            math_011_2.location = (57, 201)
            math_011_2.operation = 'MULTIPLY'
            math_011_2.use_clamp = False
            

            math_010_2 = node_tree3.nodes.new('ShaderNodeMath')
            math_010_2.inputs[1].default_value = 4
            math_010_2.location = (-89, 14)
            math_010_2.operation = 'DIVIDE'
            math_010_2.use_clamp = False

            group_input_2 = node_tree3.nodes.new('NodeGroupInput')
            group_input_2.location = (-422, 0)

            # LINKS
            node_tree3.links.new(group_input_2.outputs[1], math_010_2.inputs[0])
            node_tree3.links.new(math_010_2.outputs[0], math_011_2.inputs[1])
            node_tree3.links.new(group_input_2.outputs[2], math_011_2.inputs[0])
            node_tree3.links.new(math_010_2.outputs[0], math_012_2.inputs[1])
            node_tree3.links.new(group_input_2.outputs[3], math_012_2.inputs[0])
            node_tree3.links.new(math_011_2.outputs[0], mix_2.inputs[6])
            node_tree3.links.new(math_012_2.outputs[0], mix_2.inputs[7])
            node_tree3.links.new(group_input_2.outputs[0], mix_2.inputs[0])
            node_tree3.links.new(math_011_2.outputs[0], mix_2.inputs[2])
            node_tree3.links.new(math_012_2.outputs[0], mix_2.inputs[3])
            node_tree3.links.new(mix_2.outputs[0], coreclamp.inputs[0])
            node_tree3.links.new(coreclamp.outputs[0], group_output_2.inputs[0])
        roughnessmath()
        def HIMS():
            node_tree4 = bpy.data.node_groups.new('HIMS 2.8 by Average Goat Enthusiast', 'ShaderNodeTree')
            #node_tree4.location = (280, 234)
            
            input = node_tree4.inputs.new('NodeSocketColor', 'ASG') 
            input = node_tree4.inputs.new('NodeSocketColor', 'Mask_0') 
            input = node_tree4.inputs.new('NodeSocketColor', 'Mask_1') 
            input = node_tree4.inputs.new('NodeSocketColor', 'Normal') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Amount') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Height Scale') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Height') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Ambient Occlusion') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Scratch Height Amount') 
            
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Gradient Out') 
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 Norm Out') #12
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Scratch Amount') #13
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Scratch Roughness') #14
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Scratch Metallic') #15
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Metallic') #16
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 SSS Amount') #17
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Transparency Amount') #18
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 1 Emmisive Amount') #19
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 Top Color') #20
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 Mid Color') #21
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 Bot Color') #22
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 ScratchColor') #23
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 1 SSS Color') #24
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Toggle') #25
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Gradient Out') #26
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Rough Out') #27
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 Norm Out') #28
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Scratch Amount') #29
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Scratch Roughness') #30
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Scratch Metallic') #31
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Metallic') #32
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 SSS Amount') #33
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Transparency Amount') #34
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 2 Emmisive Amount') #35
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 Top Color') #36
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 Mid Color') #37
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 Bot Color') #38
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 ScratchColor') #39
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 2 SSS Color') #40
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Toggle') #41
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Gradient Out') #42
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Scratch Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Scratch Roughness')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Scratch Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 3 Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 ScratchColor')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 3 SSS Color')
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Toggle')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Gradient Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Scratch Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Scratch Roughness')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Scratch Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 4 Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 ScratchColor')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 4 SSS Color')
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Toggle')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Gradient Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Scratch Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Scratch Roughness')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Scratch Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 5 Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 ScratchColor')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 5 SSS Color')
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Toggle')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Gradient Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Scratch Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Scratch Roughness')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Scratch Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 6 Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 ScratchColor')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 6 SSS Color')
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Toggle')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Gradient Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Scratch Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Scratch Roughness')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Scratch Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Zone 7 Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 ScratchColor')
            input = node_tree4.inputs.new('NodeSocketColor', 'Zone 7 SSS Color')
            
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Gradient Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Rough Out')
            input = node_tree4.inputs.new('NodeSocketColor', 'Grime Norm Out')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Metallic')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime SSS Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Transparency Amount')
            input = node_tree4.inputs.new('NodeSocketFloat', 'Grime Emmisive Amount')
            input = node_tree4.inputs.new('NodeSocketColor', 'Grime Top Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Grime Mid Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Grime Bot Color')
            input = node_tree4.inputs.new('NodeSocketColor', 'Grime SSS Color')
            
            output = node_tree4.outputs.new('NodeSocketShader', 'BSDF')
            output = node_tree4.outputs.new('NodeSocketColor', 'Color')
            output = node_tree4.outputs.new('NodeSocketColor', 'Metallic')
            output = node_tree4.outputs.new('NodeSocketColor', 'Roughness')
            output = node_tree4.outputs.new('NodeSocketColor', 'Emmisive')
            output = node_tree4.outputs.new('NodeSocketColor', 'Specular')
            output = node_tree4.outputs.new('NodeSocketColor', 'Specular Albedo')
            output = node_tree4.outputs.new('NodeSocketColor', 'Ambient Occlusion')
            output = node_tree4.outputs.new('NodeSocketVector', 'Normal')
            output = node_tree4.outputs.new('NodeSocketColor', 'Unity Mask Map')
            output = node_tree4.outputs.new('NodeSocketColor', 'Unity Smoothness Map')
            
            # NODES
            node_tree2 = bpy.data.node_groups.get('Color Mixer')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Color Mixer', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketFloatFactor', 'Gradient Out')
                input = node_tree2.inputs.new('NodeSocketColor', 'Top')
                input = node_tree2.inputs.new('NodeSocketColor', 'Mid')
                input = node_tree2.inputs.new('NodeSocketColor', 'Bot')
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                # NODES
                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                group_output_2.is_active_output = True

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                mix_001_2.blend_type = 'MIX'
                mix_001_2.clamp_factor = True
                mix_001_2.clamp_result = False
                mix_001_2.data_type = 'RGBA'
                mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-240.0, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 140.0
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-580.0, -232.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 140.0
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                colorramp_2 = node_tree2.nodes.new('ShaderNodeValToRGB')
                if hasattr(colorramp_2, 'color'):
                    colorramp_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(colorramp_2, 'color_ramp'):
                    if hasattr(colorramp_2.color_ramp, 'color_mode'):
                        colorramp_2.color_ramp.color_mode = 'RGB'
                    if hasattr(colorramp_2.color_ramp, 'elements'):
                        if 0 >= len(colorramp_2.color_ramp.elements):
                            colorramp_2.color_ramp.elements.new(0.5)
                        if hasattr(colorramp_2.color_ramp.elements[0], 'alpha'):
                            colorramp_2.color_ramp.elements[0].alpha = 1.0
                        if hasattr(colorramp_2.color_ramp.elements[0], 'color'):
                            colorramp_2.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
                        if hasattr(colorramp_2.color_ramp.elements[0], 'position'):
                            colorramp_2.color_ramp.elements[0].position = 0.5
                        if 1 >= len(colorramp_2.color_ramp.elements):
                            colorramp_2.color_ramp.elements.new(1.0)
                        if hasattr(colorramp_2.color_ramp.elements[1], 'alpha'):
                            colorramp_2.color_ramp.elements[1].alpha = 1.0
                        if hasattr(colorramp_2.color_ramp.elements[1], 'color'):
                            colorramp_2.color_ramp.elements[1].color = (1.0, 1.0, 1.0, 1.0)
                        if hasattr(colorramp_2.color_ramp.elements[1], 'position'):
                            colorramp_2.color_ramp.elements[1].position = 1.0
                    if hasattr(colorramp_2.color_ramp, 'hue_interpolation'):
                        colorramp_2.color_ramp.hue_interpolation = 'NEAR'
                    if hasattr(colorramp_2.color_ramp, 'interpolation'):
                        colorramp_2.color_ramp.interpolation = 'LINEAR'
                if hasattr(colorramp_2, 'hide'):
                    colorramp_2.hide = False
                if hasattr(colorramp_2, 'location'):
                    colorramp_2.location = (-920.0, 0.0)
                if hasattr(colorramp_2, 'mute'):
                    colorramp_2.mute = False
                if hasattr(colorramp_2, 'name'):
                    colorramp_2.name = 'ColorRamp'
                if hasattr(colorramp_2, 'use_custom_color'):
                    colorramp_2.use_custom_color = False
                if hasattr(colorramp_2, 'width'):
                    colorramp_2.width = 240.0
                input_ = next((input_ for input_ in colorramp_2.inputs if input_.identifier=='Fac'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Fac'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in colorramp_2.outputs if output.identifier=='Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Color'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in colorramp_2.outputs if output.identifier=='Alpha'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Alpha'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                colorramp_001_2 = node_tree2.nodes.new('ShaderNodeValToRGB')
                if hasattr(colorramp_001_2, 'color'):
                    colorramp_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(colorramp_001_2, 'color_ramp'):
                    if hasattr(colorramp_001_2.color_ramp, 'color_mode'):
                        colorramp_001_2.color_ramp.color_mode = 'RGB'
                    if hasattr(colorramp_001_2.color_ramp, 'elements'):
                        if 0 >= len(colorramp_001_2.color_ramp.elements):
                            colorramp_001_2.color_ramp.elements.new(0.0)
                        if hasattr(colorramp_001_2.color_ramp.elements[0], 'alpha'):
                            colorramp_001_2.color_ramp.elements[0].alpha = 1.0
                        if hasattr(colorramp_001_2.color_ramp.elements[0], 'color'):
                            colorramp_001_2.color_ramp.elements[0].color = (1.0, 1.0, 1.0, 1.0)
                        if hasattr(colorramp_001_2.color_ramp.elements[0], 'position'):
                            colorramp_001_2.color_ramp.elements[0].position = 0.0
                        if 1 >= len(colorramp_001_2.color_ramp.elements):
                            colorramp_001_2.color_ramp.elements.new(0.25)
                        if hasattr(colorramp_001_2.color_ramp.elements[1], 'alpha'):
                            colorramp_001_2.color_ramp.elements[1].alpha = 1.0
                        if hasattr(colorramp_001_2.color_ramp.elements[1], 'color'):
                            colorramp_001_2.color_ramp.elements[1].color = (0.0, 0.0, 0.0, 1.0)
                        if hasattr(colorramp_001_2.color_ramp.elements[1], 'position'):
                            colorramp_001_2.color_ramp.elements[1].position = 0.25
                    if hasattr(colorramp_001_2.color_ramp, 'hue_interpolation'):
                        colorramp_001_2.color_ramp.hue_interpolation = 'NEAR'
                    if hasattr(colorramp_001_2.color_ramp, 'interpolation'):
                        colorramp_001_2.color_ramp.interpolation = 'LINEAR'
                if hasattr(colorramp_001_2, 'hide'):
                    colorramp_001_2.hide = False
                if hasattr(colorramp_001_2, 'location'):
                    colorramp_001_2.location = (-580.0, 0.0)
                if hasattr(colorramp_001_2, 'mute'):
                    colorramp_001_2.mute = False
                if hasattr(colorramp_001_2, 'name'):
                    colorramp_001_2.name = 'ColorRamp.001'
                if hasattr(colorramp_001_2, 'use_custom_color'):
                    colorramp_001_2.use_custom_color = False
                if hasattr(colorramp_001_2, 'width'):
                    colorramp_001_2.width = 240.0
                input_ = next((input_ for input_ in colorramp_001_2.inputs if input_.identifier=='Fac'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Fac'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in colorramp_001_2.outputs if output.identifier=='Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Color'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in colorramp_001_2.outputs if output.identifier=='Alpha'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Alpha'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], mix_2.inputs[6])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[3], mix_001_2.inputs[7])
                node_tree2.links.new(mix_001_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[0], colorramp_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], colorramp_001_2.inputs[0])
                node_tree2.links.new(colorramp_001_2.outputs[0], mix_001_2.inputs[0])
                node_tree2.links.new(colorramp_2.outputs[0], mix_2.inputs[0])

            group_002_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_002_1, 'node_tree'):
                group_002_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_002_1, 'color'):
                group_002_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_002_1, 'hide'):
                group_002_1.hide = False
            if hasattr(group_002_1, 'location'):
                group_002_1.location = (-1609.9658203125, 2226.75048828125)
            if hasattr(group_002_1, 'mute'):
                group_002_1.mute = False
            if hasattr(group_002_1, 'name'):
                group_002_1.name = 'Group.002'
            if hasattr(group_002_1, 'use_custom_color'):
                group_002_1.use_custom_color = False
            if hasattr(group_002_1, 'width'):
                group_002_1.width = 140.0
            if hasattr(group_002_1.inputs[0], 'default_value'):
                group_002_1.inputs[0].default_value = 0.0
            if hasattr(group_002_1.inputs[0], 'display_shape'):
                group_002_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_002_1.inputs[0], 'enabled'):
                group_002_1.inputs[0].enabled = True
            if hasattr(group_002_1.inputs[0], 'hide'):
                group_002_1.inputs[0].hide = False
            if hasattr(group_002_1.inputs[0], 'hide_value'):
                group_002_1.inputs[0].hide_value = False
            if hasattr(group_002_1.inputs[0], 'name'):
                group_002_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_002_1.inputs[0], 'show_expanded'):
                group_002_1.inputs[0].show_expanded = False
            if hasattr(group_002_1.inputs[1], 'default_value'):
                group_002_1.inputs[1].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_002_1.inputs[1], 'display_shape'):
                group_002_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_002_1.inputs[1], 'enabled'):
                group_002_1.inputs[1].enabled = True
            if hasattr(group_002_1.inputs[1], 'hide'):
                group_002_1.inputs[1].hide = False
            if hasattr(group_002_1.inputs[1], 'hide_value'):
                group_002_1.inputs[1].hide_value = False
            if hasattr(group_002_1.inputs[1], 'name'):
                group_002_1.inputs[1].name = 'Top'
            if hasattr(group_002_1.inputs[1], 'show_expanded'):
                group_002_1.inputs[1].show_expanded = False
            if hasattr(group_002_1.inputs[2], 'default_value'):
                group_002_1.inputs[2].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_002_1.inputs[2], 'display_shape'):
                group_002_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_002_1.inputs[2], 'enabled'):
                group_002_1.inputs[2].enabled = True
            if hasattr(group_002_1.inputs[2], 'hide'):
                group_002_1.inputs[2].hide = False
            if hasattr(group_002_1.inputs[2], 'hide_value'):
                group_002_1.inputs[2].hide_value = False
            if hasattr(group_002_1.inputs[2], 'name'):
                group_002_1.inputs[2].name = 'Mid'
            if hasattr(group_002_1.inputs[2], 'show_expanded'):
                group_002_1.inputs[2].show_expanded = False
            if hasattr(group_002_1.inputs[3], 'default_value'):
                group_002_1.inputs[3].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_002_1.inputs[3], 'display_shape'):
                group_002_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_002_1.inputs[3], 'enabled'):
                group_002_1.inputs[3].enabled = True
            if hasattr(group_002_1.inputs[3], 'hide'):
                group_002_1.inputs[3].hide = False
            if hasattr(group_002_1.inputs[3], 'hide_value'):
                group_002_1.inputs[3].hide_value = False
            if hasattr(group_002_1.inputs[3], 'name'):
                group_002_1.inputs[3].name = 'Bot'
            if hasattr(group_002_1.inputs[3], 'show_expanded'):
                group_002_1.inputs[3].show_expanded = False
            if hasattr(group_002_1.outputs[0], 'default_value'):
                group_002_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_002_1.outputs[0], 'display_shape'):
                group_002_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_002_1.outputs[0], 'enabled'):
                group_002_1.outputs[0].enabled = True
            if hasattr(group_002_1.outputs[0], 'hide'):
                group_002_1.outputs[0].hide = False
            if hasattr(group_002_1.outputs[0], 'hide_value'):
                group_002_1.outputs[0].hide_value = False
            if hasattr(group_002_1.outputs[0], 'name'):
                group_002_1.outputs[0].name = 'Color'
            if hasattr(group_002_1.outputs[0], 'show_expanded'):
                group_002_1.outputs[0].show_expanded = False

            reroute_032_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_032_1, 'color'):
                reroute_032_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_032_1, 'hide'):
                reroute_032_1.hide = False
            if hasattr(reroute_032_1, 'location'):
                reroute_032_1.location = (3288.37744140625, 200.83401489257812)
            if hasattr(reroute_032_1, 'mute'):
                reroute_032_1.mute = False
            if hasattr(reroute_032_1, 'name'):
                reroute_032_1.name = 'Reroute.032'
            if hasattr(reroute_032_1, 'use_custom_color'):
                reroute_032_1.use_custom_color = False
            if hasattr(reroute_032_1, 'width'):
                reroute_032_1.width = 16.0

            reroute_004_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_004_1, 'color'):
                reroute_004_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_004_1, 'hide'):
                reroute_004_1.hide = False
            if hasattr(reroute_004_1, 'location'):
                reroute_004_1.location = (1830.6190185546875, 465.7493591308594)
            if hasattr(reroute_004_1, 'mute'):
                reroute_004_1.mute = False
            if hasattr(reroute_004_1, 'name'):
                reroute_004_1.name = 'Reroute.004'
            if hasattr(reroute_004_1, 'use_custom_color'):
                reroute_004_1.use_custom_color = False
            if hasattr(reroute_004_1, 'width'):
                reroute_004_1.width = 16.0

            reroute_043_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_043_1, 'color'):
                reroute_043_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_043_1, 'hide'):
                reroute_043_1.hide = False
            if hasattr(reroute_043_1, 'location'):
                reroute_043_1.location = (3871.645751953125, 442.1236572265625)
            if hasattr(reroute_043_1, 'mute'):
                reroute_043_1.mute = False
            if hasattr(reroute_043_1, 'name'):
                reroute_043_1.name = 'Reroute.043'
            if hasattr(reroute_043_1, 'use_custom_color'):
                reroute_043_1.use_custom_color = False
            if hasattr(reroute_043_1, 'width'):
                reroute_043_1.width = 16.0

            reroute_057_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_057_1, 'color'):
                reroute_057_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_057_1, 'hide'):
                reroute_057_1.hide = False
            if hasattr(reroute_057_1, 'location'):
                reroute_057_1.location = (2359.9833984375, -546.9471435546875)
            if hasattr(reroute_057_1, 'mute'):
                reroute_057_1.mute = False
            if hasattr(reroute_057_1, 'name'):
                reroute_057_1.name = 'Reroute.057'
            if hasattr(reroute_057_1, 'use_custom_color'):
                reroute_057_1.use_custom_color = False
            if hasattr(reroute_057_1, 'width'):
                reroute_057_1.width = 16.0

            reroute_034_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_034_1, 'color'):
                reroute_034_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_034_1, 'hide'):
                reroute_034_1.hide = False
            if hasattr(reroute_034_1, 'location'):
                reroute_034_1.location = (3290.66015625, 163.137451171875)
            if hasattr(reroute_034_1, 'mute'):
                reroute_034_1.mute = False
            if hasattr(reroute_034_1, 'name'):
                reroute_034_1.name = 'Reroute.034'
            if hasattr(reroute_034_1, 'use_custom_color'):
                reroute_034_1.use_custom_color = False
            if hasattr(reroute_034_1, 'width'):
                reroute_034_1.width = 16.0

            math_007_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_007_1, 'color'):
                math_007_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_007_1, 'hide'):
                math_007_1.hide = True
            if hasattr(math_007_1, 'location'):
                math_007_1.location = (3089.642822265625, 43.846778869628906)
            if hasattr(math_007_1, 'mute'):
                math_007_1.mute = False
            if hasattr(math_007_1, 'name'):
                math_007_1.name = 'Math.007'
            if hasattr(math_007_1, 'operation'):
                math_007_1.operation = 'SUBTRACT'
            if hasattr(math_007_1, 'use_clamp'):
                math_007_1.use_clamp = False
            if hasattr(math_007_1, 'use_custom_color'):
                math_007_1.use_custom_color = False
            if hasattr(math_007_1, 'width'):
                math_007_1.width = 140.0
            input_ = next((input_ for input_ in math_007_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_007_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_007_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_007_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_042_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_042_1, 'color'):
                reroute_042_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_042_1, 'hide'):
                reroute_042_1.hide = False
            if hasattr(reroute_042_1, 'location'):
                reroute_042_1.location = (3085.290283203125, 146.49276733398438)
            if hasattr(reroute_042_1, 'mute'):
                reroute_042_1.mute = False
            if hasattr(reroute_042_1, 'name'):
                reroute_042_1.name = 'Reroute.042'
            if hasattr(reroute_042_1, 'use_custom_color'):
                reroute_042_1.use_custom_color = False
            if hasattr(reroute_042_1, 'width'):
                reroute_042_1.width = 16.0

            reroute_010_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_010_1, 'color'):
                reroute_010_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_010_1, 'hide'):
                reroute_010_1.hide = False
            if hasattr(reroute_010_1, 'location'):
                reroute_010_1.location = (1439.04150390625, 308.13250732421875)
            if hasattr(reroute_010_1, 'mute'):
                reroute_010_1.mute = False
            if hasattr(reroute_010_1, 'name'):
                reroute_010_1.name = 'Reroute.010'
            if hasattr(reroute_010_1, 'use_custom_color'):
                reroute_010_1.use_custom_color = False
            if hasattr(reroute_010_1, 'width'):
                reroute_010_1.width = 16.0

            reroute_040_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_040_1, 'color'):
                reroute_040_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_040_1, 'hide'):
                reroute_040_1.hide = False
            if hasattr(reroute_040_1, 'location'):
                reroute_040_1.location = (3071.32373046875, 657.0897827148438)
            if hasattr(reroute_040_1, 'mute'):
                reroute_040_1.mute = False
            if hasattr(reroute_040_1, 'name'):
                reroute_040_1.name = 'Reroute.040'
            if hasattr(reroute_040_1, 'use_custom_color'):
                reroute_040_1.use_custom_color = False
            if hasattr(reroute_040_1, 'width'):
                reroute_040_1.width = 16.0

            reroute_058_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_058_1, 'color'):
                reroute_058_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_058_1, 'hide'):
                reroute_058_1.hide = False
            if hasattr(reroute_058_1, 'location'):
                reroute_058_1.location = (3324.754638671875, -448.6982116699219)
            if hasattr(reroute_058_1, 'mute'):
                reroute_058_1.mute = False
            if hasattr(reroute_058_1, 'name'):
                reroute_058_1.name = 'Reroute.058'
            if hasattr(reroute_058_1, 'use_custom_color'):
                reroute_058_1.use_custom_color = False
            if hasattr(reroute_058_1, 'width'):
                reroute_058_1.width = 16.0

            gamma_1 = node_tree4.nodes.new('ShaderNodeGamma')
            if hasattr(gamma_1, 'color'):
                gamma_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(gamma_1, 'hide'):
                gamma_1.hide = False
            if hasattr(gamma_1, 'location'):
                gamma_1.location = (4112.35986328125, -12.653839111328125)
            if hasattr(gamma_1, 'mute'):
                gamma_1.mute = False
            if hasattr(gamma_1, 'name'):
                gamma_1.name = 'Gamma'
            if hasattr(gamma_1, 'use_custom_color'):
                gamma_1.use_custom_color = False
            if hasattr(gamma_1, 'width'):
                gamma_1.width = 140.0
            input_ = next((input_ for input_ in gamma_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (1.0, 1.0, 1.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in gamma_1.inputs if input_.identifier=='Gamma'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 2.200000047683716
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Gamma'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in gamma_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_028_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_028_1, 'color'):
                reroute_028_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_028_1, 'hide'):
                reroute_028_1.hide = False
            if hasattr(reroute_028_1, 'location'):
                reroute_028_1.location = (4545.17333984375, 687.51171875)
            if hasattr(reroute_028_1, 'mute'):
                reroute_028_1.mute = False
            if hasattr(reroute_028_1, 'name'):
                reroute_028_1.name = 'Reroute.028'
            if hasattr(reroute_028_1, 'use_custom_color'):
                reroute_028_1.use_custom_color = False
            if hasattr(reroute_028_1, 'width'):
                reroute_028_1.width = 16.0

            reroute_012_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_012_1, 'color'):
                reroute_012_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_012_1, 'hide'):
                reroute_012_1.hide = False
            if hasattr(reroute_012_1, 'location'):
                reroute_012_1.location = (2807.00244140625, -764.1935424804688)
            if hasattr(reroute_012_1, 'mute'):
                reroute_012_1.mute = False
            if hasattr(reroute_012_1, 'name'):
                reroute_012_1.name = 'Reroute.012'
            if hasattr(reroute_012_1, 'use_custom_color'):
                reroute_012_1.use_custom_color = False
            if hasattr(reroute_012_1, 'width'):
                reroute_012_1.width = 16.0

            reroute_036_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_036_1, 'color'):
                reroute_036_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_036_1, 'hide'):
                reroute_036_1.hide = False
            if hasattr(reroute_036_1, 'location'):
                reroute_036_1.location = (805.01318359375, 162.65345764160156)
            if hasattr(reroute_036_1, 'mute'):
                reroute_036_1.mute = False
            if hasattr(reroute_036_1, 'name'):
                reroute_036_1.name = 'Reroute.036'
            if hasattr(reroute_036_1, 'use_custom_color'):
                reroute_036_1.use_custom_color = False
            if hasattr(reroute_036_1, 'width'):
                reroute_036_1.width = 16.0

            reroute_003_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_003_1, 'color'):
                reroute_003_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_003_1, 'hide'):
                reroute_003_1.hide = False
            if hasattr(reroute_003_1, 'location'):
                reroute_003_1.location = (1828.097900390625, 620.0368041992188)
            if hasattr(reroute_003_1, 'mute'):
                reroute_003_1.mute = False
            if hasattr(reroute_003_1, 'name'):
                reroute_003_1.name = 'Reroute.003'
            if hasattr(reroute_003_1, 'use_custom_color'):
                reroute_003_1.use_custom_color = False
            if hasattr(reroute_003_1, 'width'):
                reroute_003_1.width = 16.0

            reroute_001_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_001_1, 'color'):
                reroute_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_001_1, 'hide'):
                reroute_001_1.hide = False
            if hasattr(reroute_001_1, 'location'):
                reroute_001_1.location = (358.541748046875, 1388.126953125)
            if hasattr(reroute_001_1, 'mute'):
                reroute_001_1.mute = False
            if hasattr(reroute_001_1, 'name'):
                reroute_001_1.name = 'Reroute.001'
            if hasattr(reroute_001_1, 'use_custom_color'):
                reroute_001_1.use_custom_color = False
            if hasattr(reroute_001_1, 'width'):
                reroute_001_1.width = 16.0

            reroute_046_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_046_1, 'color'):
                reroute_046_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_046_1, 'hide'):
                reroute_046_1.hide = False
            if hasattr(reroute_046_1, 'location'):
                reroute_046_1.location = (2700.612548828125, 255.62503051757812)
            if hasattr(reroute_046_1, 'mute'):
                reroute_046_1.mute = False
            if hasattr(reroute_046_1, 'name'):
                reroute_046_1.name = 'Reroute.046'
            if hasattr(reroute_046_1, 'use_custom_color'):
                reroute_046_1.use_custom_color = False
            if hasattr(reroute_046_1, 'width'):
                reroute_046_1.width = 16.0

            reroute_056_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_056_1, 'color'):
                reroute_056_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_056_1, 'hide'):
                reroute_056_1.hide = False
            if hasattr(reroute_056_1, 'location'):
                reroute_056_1.location = (2361.30322265625, -325.0791931152344)
            if hasattr(reroute_056_1, 'mute'):
                reroute_056_1.mute = False
            if hasattr(reroute_056_1, 'name'):
                reroute_056_1.name = 'Reroute.056'
            if hasattr(reroute_056_1, 'use_custom_color'):
                reroute_056_1.use_custom_color = False
            if hasattr(reroute_056_1, 'width'):
                reroute_056_1.width = 16.0

            math_001_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_001_1, 'color'):
                math_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_001_1, 'hide'):
                math_001_1.hide = False
            if hasattr(math_001_1, 'location'):
                math_001_1.location = (1757.7567138671875, 445.1609802246094)
            if hasattr(math_001_1, 'mute'):
                math_001_1.mute = False
            if hasattr(math_001_1, 'name'):
                math_001_1.name = 'Math.001'
            if hasattr(math_001_1, 'operation'):
                math_001_1.operation = 'POWER'
            if hasattr(math_001_1, 'use_clamp'):
                math_001_1.use_clamp = False
            if hasattr(math_001_1, 'use_custom_color'):
                math_001_1.use_custom_color = False
            if hasattr(math_001_1, 'width'):
                math_001_1.width = 140.0
            input_ = next((input_ for input_ in math_001_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_001_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_001_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_001_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            normal_map_1 = node_tree4.nodes.new('ShaderNodeNormalMap')
            if hasattr(normal_map_1, 'color'):
                normal_map_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(normal_map_1, 'hide'):
                normal_map_1.hide = False
            if hasattr(normal_map_1, 'location'):
                normal_map_1.location = (1758.1846923828125, -640.986328125)
            if hasattr(normal_map_1, 'mute'):
                normal_map_1.mute = False
            if hasattr(normal_map_1, 'name'):
                normal_map_1.name = 'Normal Map'
            if hasattr(normal_map_1, 'space'):
                normal_map_1.space = 'TANGENT'
            if hasattr(normal_map_1, 'use_custom_color'):
                normal_map_1.use_custom_color = False
            if hasattr(normal_map_1, 'width'):
                normal_map_1.width = 150.0
            input_ = next((input_ for input_ in normal_map_1.inputs if input_.identifier=='Strength'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Strength'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in normal_map_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 1.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in normal_map_1.outputs if output.identifier=='Normal'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Normal'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_035_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_035_1, 'color'):
                reroute_035_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_035_1, 'hide'):
                reroute_035_1.hide = False
            if hasattr(reroute_035_1, 'location'):
                reroute_035_1.location = (762.3345947265625, 195.68263244628906)
            if hasattr(reroute_035_1, 'mute'):
                reroute_035_1.mute = False
            if hasattr(reroute_035_1, 'name'):
                reroute_035_1.name = 'Reroute.035'
            if hasattr(reroute_035_1, 'use_custom_color'):
                reroute_035_1.use_custom_color = False
            if hasattr(reroute_035_1, 'width'):
                reroute_035_1.width = 16.0

            group_010_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_010_1, 'node_tree'):
                group_010_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_010_1, 'color'):
                group_010_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_010_1, 'hide'):
                group_010_1.hide = False
            if hasattr(group_010_1, 'location'):
                group_010_1.location = (-1609.9658203125, 1686.7501220703125)
            if hasattr(group_010_1, 'mute'):
                group_010_1.mute = False
            if hasattr(group_010_1, 'name'):
                group_010_1.name = 'Group.010'
            if hasattr(group_010_1, 'use_custom_color'):
                group_010_1.use_custom_color = False
            if hasattr(group_010_1, 'width'):
                group_010_1.width = 140.0
            if hasattr(group_010_1.inputs[0], 'default_value'):
                group_010_1.inputs[0].default_value = 0.0
            if hasattr(group_010_1.inputs[0], 'display_shape'):
                group_010_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_010_1.inputs[0], 'enabled'):
                group_010_1.inputs[0].enabled = True
            if hasattr(group_010_1.inputs[0], 'hide'):
                group_010_1.inputs[0].hide = False
            if hasattr(group_010_1.inputs[0], 'hide_value'):
                group_010_1.inputs[0].hide_value = False
            if hasattr(group_010_1.inputs[0], 'name'):
                group_010_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_010_1.inputs[0], 'show_expanded'):
                group_010_1.inputs[0].show_expanded = False
            if hasattr(group_010_1.inputs[1], 'default_value'):
                group_010_1.inputs[1].default_value = (0.026085255667567253, 0.026085255667567253, 0.026085255667567253, 1.0)
            if hasattr(group_010_1.inputs[1], 'display_shape'):
                group_010_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_010_1.inputs[1], 'enabled'):
                group_010_1.inputs[1].enabled = True
            if hasattr(group_010_1.inputs[1], 'hide'):
                group_010_1.inputs[1].hide = False
            if hasattr(group_010_1.inputs[1], 'hide_value'):
                group_010_1.inputs[1].hide_value = False
            if hasattr(group_010_1.inputs[1], 'name'):
                group_010_1.inputs[1].name = 'Top'
            if hasattr(group_010_1.inputs[1], 'show_expanded'):
                group_010_1.inputs[1].show_expanded = False
            if hasattr(group_010_1.inputs[2], 'default_value'):
                group_010_1.inputs[2].default_value = (0.05755693465471268, 0.05755693465471268, 0.05755693465471268, 1.0)
            if hasattr(group_010_1.inputs[2], 'display_shape'):
                group_010_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_010_1.inputs[2], 'enabled'):
                group_010_1.inputs[2].enabled = True
            if hasattr(group_010_1.inputs[2], 'hide'):
                group_010_1.inputs[2].hide = False
            if hasattr(group_010_1.inputs[2], 'hide_value'):
                group_010_1.inputs[2].hide_value = False
            if hasattr(group_010_1.inputs[2], 'name'):
                group_010_1.inputs[2].name = 'Mid'
            if hasattr(group_010_1.inputs[2], 'show_expanded'):
                group_010_1.inputs[2].show_expanded = False
            if hasattr(group_010_1.inputs[3], 'default_value'):
                group_010_1.inputs[3].default_value = (0.05748932063579559, 0.05748932063579559, 0.05748932063579559, 1.0)
            if hasattr(group_010_1.inputs[3], 'display_shape'):
                group_010_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_010_1.inputs[3], 'enabled'):
                group_010_1.inputs[3].enabled = True
            if hasattr(group_010_1.inputs[3], 'hide'):
                group_010_1.inputs[3].hide = False
            if hasattr(group_010_1.inputs[3], 'hide_value'):
                group_010_1.inputs[3].hide_value = False
            if hasattr(group_010_1.inputs[3], 'name'):
                group_010_1.inputs[3].name = 'Bot'
            if hasattr(group_010_1.inputs[3], 'show_expanded'):
                group_010_1.inputs[3].show_expanded = False
            if hasattr(group_010_1.outputs[0], 'default_value'):
                group_010_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_010_1.outputs[0], 'display_shape'):
                group_010_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_010_1.outputs[0], 'enabled'):
                group_010_1.outputs[0].enabled = True
            if hasattr(group_010_1.outputs[0], 'hide'):
                group_010_1.outputs[0].hide = False
            if hasattr(group_010_1.outputs[0], 'hide_value'):
                group_010_1.outputs[0].hide_value = False
            if hasattr(group_010_1.outputs[0], 'name'):
                group_010_1.outputs[0].name = 'Color'
            if hasattr(group_010_1.outputs[0], 'show_expanded'):
                group_010_1.outputs[0].show_expanded = False

            reroute_006_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_006_1, 'color'):
                reroute_006_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_006_1, 'hide'):
                reroute_006_1.hide = False
            if hasattr(reroute_006_1, 'location'):
                reroute_006_1.location = (-1098.9185791015625, -23.31800079345703)
            if hasattr(reroute_006_1, 'mute'):
                reroute_006_1.mute = False
            if hasattr(reroute_006_1, 'name'):
                reroute_006_1.name = 'Reroute.006'
            if hasattr(reroute_006_1, 'use_custom_color'):
                reroute_006_1.use_custom_color = False
            if hasattr(reroute_006_1, 'width'):
                reroute_006_1.width = 16.0

            reroute_024_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_024_1, 'color'):
                reroute_024_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_024_1, 'hide'):
                reroute_024_1.hide = False
            if hasattr(reroute_024_1, 'location'):
                reroute_024_1.location = (3855.120361328125, 226.1242218017578)
            if hasattr(reroute_024_1, 'mute'):
                reroute_024_1.mute = False
            if hasattr(reroute_024_1, 'name'):
                reroute_024_1.name = 'Reroute.024'
            if hasattr(reroute_024_1, 'use_custom_color'):
                reroute_024_1.use_custom_color = False
            if hasattr(reroute_024_1, 'width'):
                reroute_024_1.width = 16.0

            colorramp_1 = node_tree4.nodes.new('ShaderNodeValToRGB')
            if hasattr(colorramp_1, 'color'):
                colorramp_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(colorramp_1, 'color_ramp'):
                if hasattr(colorramp_1.color_ramp, 'color_mode'):
                    colorramp_1.color_ramp.color_mode = 'RGB'
                if hasattr(colorramp_1.color_ramp, 'elements'):
                    if 0 >= len(colorramp_1.color_ramp.elements):
                        colorramp_1.color_ramp.elements.new(0.13939400017261505)
                    if hasattr(colorramp_1.color_ramp.elements[0], 'alpha'):
                        colorramp_1.color_ramp.elements[0].alpha = 1.0
                    if hasattr(colorramp_1.color_ramp.elements[0], 'color'):
                        colorramp_1.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(colorramp_1.color_ramp.elements[0], 'position'):
                        colorramp_1.color_ramp.elements[0].position = 0.13939400017261505
                    if 1 >= len(colorramp_1.color_ramp.elements):
                        colorramp_1.color_ramp.elements.new(0.7379999756813049)
                    if hasattr(colorramp_1.color_ramp.elements[1], 'alpha'):
                        colorramp_1.color_ramp.elements[1].alpha = 1.0
                    if hasattr(colorramp_1.color_ramp.elements[1], 'color'):
                        colorramp_1.color_ramp.elements[1].color = (0.0122859887778759, 0.01228599064052105, 0.012285999953746796, 1.0)
                    if hasattr(colorramp_1.color_ramp.elements[1], 'position'):
                        colorramp_1.color_ramp.elements[1].position = 0.7379999756813049
                    if 2 >= len(colorramp_1.color_ramp.elements):
                        colorramp_1.color_ramp.elements.new(1.0)
                    if hasattr(colorramp_1.color_ramp.elements[2], 'alpha'):
                        colorramp_1.color_ramp.elements[2].alpha = 1.0
                    if hasattr(colorramp_1.color_ramp.elements[2], 'color'):
                        colorramp_1.color_ramp.elements[2].color = (0.01520898099988699, 0.015208990313112736, 0.015208999626338482, 1.0)
                    if hasattr(colorramp_1.color_ramp.elements[2], 'position'):
                        colorramp_1.color_ramp.elements[2].position = 1.0
                if hasattr(colorramp_1.color_ramp, 'hue_interpolation'):
                    colorramp_1.color_ramp.hue_interpolation = 'NEAR'
                if hasattr(colorramp_1.color_ramp, 'interpolation'):
                    colorramp_1.color_ramp.interpolation = 'EASE'
            if hasattr(colorramp_1, 'hide'):
                colorramp_1.hide = False
            if hasattr(colorramp_1, 'location'):
                colorramp_1.location = (1622.6456298828125, -8.753049850463867)
            if hasattr(colorramp_1, 'mute'):
                colorramp_1.mute = False
            if hasattr(colorramp_1, 'name'):
                colorramp_1.name = 'ColorRamp'
            if hasattr(colorramp_1, 'use_custom_color'):
                colorramp_1.use_custom_color = False
            if hasattr(colorramp_1, 'width'):
                colorramp_1.width = 240.0
            input_ = next((input_ for input_ in colorramp_1.inputs if input_.identifier=='Fac'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Fac'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in colorramp_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in colorramp_1.outputs if output.identifier=='Alpha'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Alpha'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_054_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_054_1, 'color'):
                reroute_054_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_054_1, 'hide'):
                reroute_054_1.hide = False
            if hasattr(reroute_054_1, 'location'):
                reroute_054_1.location = (2106.01318359375, 1319.4393310546875)
            if hasattr(reroute_054_1, 'mute'):
                reroute_054_1.mute = False
            if hasattr(reroute_054_1, 'name'):
                reroute_054_1.name = 'Reroute.054'
            if hasattr(reroute_054_1, 'use_custom_color'):
                reroute_054_1.use_custom_color = False
            if hasattr(reroute_054_1, 'width'):
                reroute_054_1.width = 16.0

            reroute_033_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_033_1, 'color'):
                reroute_033_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_033_1, 'hide'):
                reroute_033_1.hide = False
            if hasattr(reroute_033_1, 'location'):
                reroute_033_1.location = (3289.7529296875, 182.54298400878906)
            if hasattr(reroute_033_1, 'mute'):
                reroute_033_1.mute = False
            if hasattr(reroute_033_1, 'name'):
                reroute_033_1.name = 'Reroute.033'
            if hasattr(reroute_033_1, 'use_custom_color'):
                reroute_033_1.use_custom_color = False
            if hasattr(reroute_033_1, 'width'):
                reroute_033_1.width = 16.0

            colorramp_001_1 = node_tree4.nodes.new('ShaderNodeValToRGB')
            if hasattr(colorramp_001_1, 'color'):
                colorramp_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(colorramp_001_1, 'color_ramp'):
                if hasattr(colorramp_001_1.color_ramp, 'color_mode'):
                    colorramp_001_1.color_ramp.color_mode = 'RGB'
                if hasattr(colorramp_001_1.color_ramp, 'elements'):
                    if 0 >= len(colorramp_001_1.color_ramp.elements):
                        colorramp_001_1.color_ramp.elements.new(0.5)
                    if hasattr(colorramp_001_1.color_ramp.elements[0], 'alpha'):
                        colorramp_001_1.color_ramp.elements[0].alpha = 1.0
                    if hasattr(colorramp_001_1.color_ramp.elements[0], 'color'):
                        colorramp_001_1.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(colorramp_001_1.color_ramp.elements[0], 'position'):
                        colorramp_001_1.color_ramp.elements[0].position = 0.5
                    if 1 >= len(colorramp_001_1.color_ramp.elements):
                        colorramp_001_1.color_ramp.elements.new(0.6424239277839661)
                    if hasattr(colorramp_001_1.color_ramp.elements[1], 'alpha'):
                        colorramp_001_1.color_ramp.elements[1].alpha = 1.0
                    if hasattr(colorramp_001_1.color_ramp.elements[1], 'color'):
                        colorramp_001_1.color_ramp.elements[1].color = (0.004999999888241291, 0.004999999888241291, 0.004999999888241291, 1.0)
                    if hasattr(colorramp_001_1.color_ramp.elements[1], 'position'):
                        colorramp_001_1.color_ramp.elements[1].position = 0.6424239277839661
                    if 2 >= len(colorramp_001_1.color_ramp.elements):
                        colorramp_001_1.color_ramp.elements.new(0.884848415851593)
                    if hasattr(colorramp_001_1.color_ramp.elements[2], 'alpha'):
                        colorramp_001_1.color_ramp.elements[2].alpha = 1.0
                    if hasattr(colorramp_001_1.color_ramp.elements[2], 'color'):
                        colorramp_001_1.color_ramp.elements[2].color = (0.022307951003313065, 0.022307951003313065, 0.022307951003313065, 1.0)
                    if hasattr(colorramp_001_1.color_ramp.elements[2], 'position'):
                        colorramp_001_1.color_ramp.elements[2].position = 0.884848415851593
                if hasattr(colorramp_001_1.color_ramp, 'hue_interpolation'):
                    colorramp_001_1.color_ramp.hue_interpolation = 'NEAR'
                if hasattr(colorramp_001_1.color_ramp, 'interpolation'):
                    colorramp_001_1.color_ramp.interpolation = 'LINEAR'
            if hasattr(colorramp_001_1, 'hide'):
                colorramp_001_1.hide = False
            if hasattr(colorramp_001_1, 'location'):
                colorramp_001_1.location = (1818.0628662109375, 237.72613525390625)
            if hasattr(colorramp_001_1, 'mute'):
                colorramp_001_1.mute = False
            if hasattr(colorramp_001_1, 'name'):
                colorramp_001_1.name = 'ColorRamp.001'
            if hasattr(colorramp_001_1, 'use_custom_color'):
                colorramp_001_1.use_custom_color = False
            if hasattr(colorramp_001_1, 'width'):
                colorramp_001_1.width = 240.0
            input_ = next((input_ for input_ in colorramp_001_1.inputs if input_.identifier=='Fac'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Fac'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in colorramp_001_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in colorramp_001_1.outputs if output.identifier=='Alpha'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Alpha'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_062_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_062_1, 'color'):
                reroute_062_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_062_1, 'hide'):
                reroute_062_1.hide = False
            if hasattr(reroute_062_1, 'location'):
                reroute_062_1.location = (-1098.9185791015625, -146.46742248535156)
            if hasattr(reroute_062_1, 'mute'):
                reroute_062_1.mute = False
            if hasattr(reroute_062_1, 'name'):
                reroute_062_1.name = 'Reroute.062'
            if hasattr(reroute_062_1, 'use_custom_color'):
                reroute_062_1.use_custom_color = False
            if hasattr(reroute_062_1, 'width'):
                reroute_062_1.width = 16.0

            reroute_009_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_009_1, 'color'):
                reroute_009_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_009_1, 'hide'):
                reroute_009_1.hide = False
            if hasattr(reroute_009_1, 'location'):
                reroute_009_1.location = (2221.59912109375, -998.4492797851562)
            if hasattr(reroute_009_1, 'mute'):
                reroute_009_1.mute = False
            if hasattr(reroute_009_1, 'name'):
                reroute_009_1.name = 'Reroute.009'
            if hasattr(reroute_009_1, 'use_custom_color'):
                reroute_009_1.use_custom_color = False
            if hasattr(reroute_009_1, 'width'):
                reroute_009_1.width = 16.0

            reroute_064_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_064_1, 'color'):
                reroute_064_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_064_1, 'hide'):
                reroute_064_1.hide = False
            if hasattr(reroute_064_1, 'location'):
                reroute_064_1.location = (2969.083740234375, -1519.6937255859375)
            if hasattr(reroute_064_1, 'mute'):
                reroute_064_1.mute = False
            if hasattr(reroute_064_1, 'name'):
                reroute_064_1.name = 'Reroute.064'
            if hasattr(reroute_064_1, 'use_custom_color'):
                reroute_064_1.use_custom_color = False
            if hasattr(reroute_064_1, 'width'):
                reroute_064_1.width = 16.0

            reroute_045_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_045_1, 'color'):
                reroute_045_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_045_1, 'hide'):
                reroute_045_1.hide = False
            if hasattr(reroute_045_1, 'location'):
                reroute_045_1.location = (3876.27001953125, -69.84181213378906)
            if hasattr(reroute_045_1, 'mute'):
                reroute_045_1.mute = False
            if hasattr(reroute_045_1, 'name'):
                reroute_045_1.name = 'Reroute.045'
            if hasattr(reroute_045_1, 'use_custom_color'):
                reroute_045_1.use_custom_color = False
            if hasattr(reroute_045_1, 'width'):
                reroute_045_1.width = 16.0

            bump_1 = node_tree4.nodes.new('ShaderNodeBump')
            if hasattr(bump_1, 'color'):
                bump_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(bump_1, 'hide'):
                bump_1.hide = False
            if hasattr(bump_1, 'invert'):
                bump_1.invert = True
            if hasattr(bump_1, 'location'):
                bump_1.location = (2522.285400390625, -434.7271423339844)
            if hasattr(bump_1, 'mute'):
                bump_1.mute = False
            if hasattr(bump_1, 'name'):
                bump_1.name = 'Bump'
            if hasattr(bump_1, 'use_custom_color'):
                bump_1.use_custom_color = False
            if hasattr(bump_1, 'width'):
                bump_1.width = 140.0
            input_ = next((input_ for input_ in bump_1.inputs if input_.identifier=='Strength'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Strength'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_1.inputs if input_.identifier=='Distance'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.004000000189989805
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Distance'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_1.inputs if input_.identifier=='Height'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Height'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_1.inputs if input_.identifier=='Normal'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Normal'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in bump_1.outputs if output.identifier=='Normal'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Normal'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_016_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_016_1, 'color'):
                reroute_016_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_016_1, 'hide'):
                reroute_016_1.hide = False
            if hasattr(reroute_016_1, 'location'):
                reroute_016_1.location = (1422.8017578125, 63.79310607910156)
            if hasattr(reroute_016_1, 'mute'):
                reroute_016_1.mute = False
            if hasattr(reroute_016_1, 'name'):
                reroute_016_1.name = 'Reroute.016'
            if hasattr(reroute_016_1, 'use_custom_color'):
                reroute_016_1.use_custom_color = False
            if hasattr(reroute_016_1, 'width'):
                reroute_016_1.width = 16.0

            reroute_008_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_008_1, 'color'):
                reroute_008_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_008_1, 'hide'):
                reroute_008_1.hide = False
            if hasattr(reroute_008_1, 'location'):
                reroute_008_1.location = (2215.237548828125, -869.8265991210938)
            if hasattr(reroute_008_1, 'mute'):
                reroute_008_1.mute = False
            if hasattr(reroute_008_1, 'name'):
                reroute_008_1.name = 'Reroute.008'
            if hasattr(reroute_008_1, 'use_custom_color'):
                reroute_008_1.use_custom_color = False
            if hasattr(reroute_008_1, 'width'):
                reroute_008_1.width = 16.0

            gamma_001_1 = node_tree4.nodes.new('ShaderNodeGamma')
            if hasattr(gamma_001_1, 'color'):
                gamma_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(gamma_001_1, 'hide'):
                gamma_001_1.hide = False
            if hasattr(gamma_001_1, 'location'):
                gamma_001_1.location = (4112.1552734375, -120.48987579345703)
            if hasattr(gamma_001_1, 'mute'):
                gamma_001_1.mute = False
            if hasattr(gamma_001_1, 'name'):
                gamma_001_1.name = 'Gamma.001'
            if hasattr(gamma_001_1, 'use_custom_color'):
                gamma_001_1.use_custom_color = False
            if hasattr(gamma_001_1, 'width'):
                gamma_001_1.width = 140.0
            input_ = next((input_ for input_ in gamma_001_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (1.0, 1.0, 1.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in gamma_001_1.inputs if input_.identifier=='Gamma'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 2.200000047683716
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Gamma'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in gamma_001_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_041_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_041_1, 'color'):
                reroute_041_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_041_1, 'hide'):
                reroute_041_1.hide = False
            if hasattr(reroute_041_1, 'location'):
                reroute_041_1.location = (3076.5791015625, 445.67071533203125)
            if hasattr(reroute_041_1, 'mute'):
                reroute_041_1.mute = False
            if hasattr(reroute_041_1, 'name'):
                reroute_041_1.name = 'Reroute.041'
            if hasattr(reroute_041_1, 'use_custom_color'):
                reroute_041_1.use_custom_color = False
            if hasattr(reroute_041_1, 'width'):
                reroute_041_1.width = 16.0

            reroute_051_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_051_1, 'color'):
                reroute_051_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_051_1, 'hide'):
                reroute_051_1.hide = False
            if hasattr(reroute_051_1, 'location'):
                reroute_051_1.location = (4211.27197265625, -861.2295532226562)
            if hasattr(reroute_051_1, 'mute'):
                reroute_051_1.mute = False
            if hasattr(reroute_051_1, 'name'):
                reroute_051_1.name = 'Reroute.051'
            if hasattr(reroute_051_1, 'use_custom_color'):
                reroute_051_1.use_custom_color = False
            if hasattr(reroute_051_1, 'width'):
                reroute_051_1.width = 16.0

            reroute_025_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_025_1, 'color'):
                reroute_025_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_025_1, 'hide'):
                reroute_025_1.hide = False
            if hasattr(reroute_025_1, 'location'):
                reroute_025_1.location = (2983.163330078125, 72.54264831542969)
            if hasattr(reroute_025_1, 'mute'):
                reroute_025_1.mute = False
            if hasattr(reroute_025_1, 'name'):
                reroute_025_1.name = 'Reroute.025'
            if hasattr(reroute_025_1, 'use_custom_color'):
                reroute_025_1.use_custom_color = False
            if hasattr(reroute_025_1, 'width'):
                reroute_025_1.width = 16.0

            reroute_002_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_002_1, 'color'):
                reroute_002_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_002_1, 'hide'):
                reroute_002_1.hide = False
            if hasattr(reroute_002_1, 'location'):
                reroute_002_1.location = (361.5635681152344, 835.6195678710938)
            if hasattr(reroute_002_1, 'mute'):
                reroute_002_1.mute = False
            if hasattr(reroute_002_1, 'name'):
                reroute_002_1.name = 'Reroute.002'
            if hasattr(reroute_002_1, 'use_custom_color'):
                reroute_002_1.use_custom_color = False
            if hasattr(reroute_002_1, 'width'):
                reroute_002_1.width = 16.0

            reroute_021_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_021_1, 'color'):
                reroute_021_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_021_1, 'hide'):
                reroute_021_1.hide = False
            if hasattr(reroute_021_1, 'location'):
                reroute_021_1.location = (2982.773193359375, 604.2268676757812)
            if hasattr(reroute_021_1, 'mute'):
                reroute_021_1.mute = False
            if hasattr(reroute_021_1, 'name'):
                reroute_021_1.name = 'Reroute.021'
            if hasattr(reroute_021_1, 'use_custom_color'):
                reroute_021_1.use_custom_color = False
            if hasattr(reroute_021_1, 'width'):
                reroute_021_1.width = 16.0

            reroute_026_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_026_1, 'color'):
                reroute_026_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_026_1, 'hide'):
                reroute_026_1.hide = False
            if hasattr(reroute_026_1, 'location'):
                reroute_026_1.location = (3927.76708984375, -177.6341552734375)
            if hasattr(reroute_026_1, 'mute'):
                reroute_026_1.mute = False
            if hasattr(reroute_026_1, 'name'):
                reroute_026_1.name = 'Reroute.026'
            if hasattr(reroute_026_1, 'use_custom_color'):
                reroute_026_1.use_custom_color = False
            if hasattr(reroute_026_1, 'width'):
                reroute_026_1.width = 16.0

            reroute_050_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_050_1, 'color'):
                reroute_050_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_050_1, 'hide'):
                reroute_050_1.hide = False
            if hasattr(reroute_050_1, 'location'):
                reroute_050_1.location = (4107.5087890625, -274.68988037109375)
            if hasattr(reroute_050_1, 'mute'):
                reroute_050_1.mute = False
            if hasattr(reroute_050_1, 'name'):
                reroute_050_1.name = 'Reroute.050'
            if hasattr(reroute_050_1, 'use_custom_color'):
                reroute_050_1.use_custom_color = False
            if hasattr(reroute_050_1, 'width'):
                reroute_050_1.width = 16.0

            reroute_065_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_065_1, 'color'):
                reroute_065_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_065_1, 'hide'):
                reroute_065_1.hide = False
            if hasattr(reroute_065_1, 'location'):
                reroute_065_1.location = (2980.8671875, 26.75341796875)
            if hasattr(reroute_065_1, 'mute'):
                reroute_065_1.mute = False
            if hasattr(reroute_065_1, 'name'):
                reroute_065_1.name = 'Reroute.065'
            if hasattr(reroute_065_1, 'use_custom_color'):
                reroute_065_1.use_custom_color = False
            if hasattr(reroute_065_1, 'width'):
                reroute_065_1.width = 16.0

            reroute_060_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_060_1, 'color'):
                reroute_060_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_060_1, 'hide'):
                reroute_060_1.hide = False
            if hasattr(reroute_060_1, 'location'):
                reroute_060_1.location = (4691.818359375, -462.3729248046875)
            if hasattr(reroute_060_1, 'mute'):
                reroute_060_1.mute = False
            if hasattr(reroute_060_1, 'name'):
                reroute_060_1.name = 'Reroute.060'
            if hasattr(reroute_060_1, 'use_custom_color'):
                reroute_060_1.use_custom_color = False
            if hasattr(reroute_060_1, 'width'):
                reroute_060_1.width = 16.0

            reroute_047_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_047_1, 'color'):
                reroute_047_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_047_1, 'hide'):
                reroute_047_1.hide = False
            if hasattr(reroute_047_1, 'location'):
                reroute_047_1.location = (2706.80322265625, 101.36702728271484)
            if hasattr(reroute_047_1, 'mute'):
                reroute_047_1.mute = False
            if hasattr(reroute_047_1, 'name'):
                reroute_047_1.name = 'Reroute.047'
            if hasattr(reroute_047_1, 'use_custom_color'):
                reroute_047_1.use_custom_color = False
            if hasattr(reroute_047_1, 'width'):
                reroute_047_1.width = 16.0

            reroute_023_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_023_1, 'color'):
                reroute_023_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_023_1, 'hide'):
                reroute_023_1.hide = False
            if hasattr(reroute_023_1, 'location'):
                reroute_023_1.location = (3855.60595703125, 470.8802490234375)
            if hasattr(reroute_023_1, 'mute'):
                reroute_023_1.mute = False
            if hasattr(reroute_023_1, 'name'):
                reroute_023_1.name = 'Reroute.023'
            if hasattr(reroute_023_1, 'use_custom_color'):
                reroute_023_1.use_custom_color = False
            if hasattr(reroute_023_1, 'width'):
                reroute_023_1.width = 16.0

            reroute_039_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_039_1, 'color'):
                reroute_039_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_039_1, 'hide'):
                reroute_039_1.hide = False
            if hasattr(reroute_039_1, 'location'):
                reroute_039_1.location = (3071.32373046875, 743.0167236328125)
            if hasattr(reroute_039_1, 'mute'):
                reroute_039_1.mute = False
            if hasattr(reroute_039_1, 'name'):
                reroute_039_1.name = 'Reroute.039'
            if hasattr(reroute_039_1, 'use_custom_color'):
                reroute_039_1.use_custom_color = False
            if hasattr(reroute_039_1, 'width'):
                reroute_039_1.width = 16.0

            reroute_048_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_048_1, 'color'):
                reroute_048_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_048_1, 'hide'):
                reroute_048_1.hide = False
            if hasattr(reroute_048_1, 'location'):
                reroute_048_1.location = (2699.153564453125, 347.8983154296875)
            if hasattr(reroute_048_1, 'mute'):
                reroute_048_1.mute = False
            if hasattr(reroute_048_1, 'name'):
                reroute_048_1.name = 'Reroute.048'
            if hasattr(reroute_048_1, 'use_custom_color'):
                reroute_048_1.use_custom_color = False
            if hasattr(reroute_048_1, 'width'):
                reroute_048_1.width = 16.0

            reroute_022_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_022_1, 'color'):
                reroute_022_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_022_1, 'hide'):
                reroute_022_1.hide = False
            if hasattr(reroute_022_1, 'location'):
                reroute_022_1.location = (2982.773193359375, 480.6976318359375)
            if hasattr(reroute_022_1, 'mute'):
                reroute_022_1.mute = False
            if hasattr(reroute_022_1, 'name'):
                reroute_022_1.name = 'Reroute.022'
            if hasattr(reroute_022_1, 'use_custom_color'):
                reroute_022_1.use_custom_color = False
            if hasattr(reroute_022_1, 'width'):
                reroute_022_1.width = 16.0

            math_002_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_002_1, 'color'):
                math_002_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_002_1, 'hide'):
                math_002_1.hide = False
            if hasattr(math_002_1, 'location'):
                math_002_1.location = (2175.57666015625, 167.1549072265625)
            if hasattr(math_002_1, 'mute'):
                math_002_1.mute = False
            if hasattr(math_002_1, 'name'):
                math_002_1.name = 'Math.002'
            if hasattr(math_002_1, 'operation'):
                math_002_1.operation = 'MULTIPLY'
            if hasattr(math_002_1, 'use_clamp'):
                math_002_1.use_clamp = False
            if hasattr(math_002_1, 'use_custom_color'):
                math_002_1.use_custom_color = False
            if hasattr(math_002_1, 'width'):
                math_002_1.width = 140.0
            input_ = next((input_ for input_ in math_002_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_002_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_002_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_002_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_007_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_007_1, 'color'):
                reroute_007_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_007_1, 'hide'):
                reroute_007_1.hide = False
            if hasattr(reroute_007_1, 'location'):
                reroute_007_1.location = (1710.6796875, -518.563232421875)
            if hasattr(reroute_007_1, 'mute'):
                reroute_007_1.mute = False
            if hasattr(reroute_007_1, 'name'):
                reroute_007_1.name = 'Reroute.007'
            if hasattr(reroute_007_1, 'use_custom_color'):
                reroute_007_1.use_custom_color = False
            if hasattr(reroute_007_1, 'width'):
                reroute_007_1.width = 16.0

            reroute_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_1, 'color'):
                reroute_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_1, 'hide'):
                reroute_1.hide = False
            if hasattr(reroute_1, 'location'):
                reroute_1.location = (1823.316162109375, 821.5437622070312)
            if hasattr(reroute_1, 'mute'):
                reroute_1.mute = False
            if hasattr(reroute_1, 'name'):
                reroute_1.name = 'Reroute'
            if hasattr(reroute_1, 'use_custom_color'):
                reroute_1.use_custom_color = False
            if hasattr(reroute_1, 'width'):
                reroute_1.width = 16.0

            group_008_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_008_1, 'node_tree'):
                group_008_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_008_1, 'color'):
                group_008_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_008_1, 'hide'):
                group_008_1.hide = False
            if hasattr(group_008_1, 'location'):
                group_008_1.location = (-1609.9658203125, 1866.7508544921875)
            if hasattr(group_008_1, 'mute'):
                group_008_1.mute = False
            if hasattr(group_008_1, 'name'):
                group_008_1.name = 'Group.008'
            if hasattr(group_008_1, 'use_custom_color'):
                group_008_1.use_custom_color = False
            if hasattr(group_008_1, 'width'):
                group_008_1.width = 140.0
            if hasattr(group_008_1.inputs[0], 'default_value'):
                group_008_1.inputs[0].default_value = 0.0
            if hasattr(group_008_1.inputs[0], 'display_shape'):
                group_008_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_008_1.inputs[0], 'enabled'):
                group_008_1.inputs[0].enabled = True
            if hasattr(group_008_1.inputs[0], 'hide'):
                group_008_1.inputs[0].hide = False
            if hasattr(group_008_1.inputs[0], 'hide_value'):
                group_008_1.inputs[0].hide_value = False
            if hasattr(group_008_1.inputs[0], 'name'):
                group_008_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_008_1.inputs[0], 'show_expanded'):
                group_008_1.inputs[0].show_expanded = False
            if hasattr(group_008_1.inputs[1], 'default_value'):
                group_008_1.inputs[1].default_value = (0.03837098181247711, 0.03837098181247711, 0.03837098181247711, 1.0)
            if hasattr(group_008_1.inputs[1], 'display_shape'):
                group_008_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_008_1.inputs[1], 'enabled'):
                group_008_1.inputs[1].enabled = True
            if hasattr(group_008_1.inputs[1], 'hide'):
                group_008_1.inputs[1].hide = False
            if hasattr(group_008_1.inputs[1], 'hide_value'):
                group_008_1.inputs[1].hide_value = False
            if hasattr(group_008_1.inputs[1], 'name'):
                group_008_1.inputs[1].name = 'Top'
            if hasattr(group_008_1.inputs[1], 'show_expanded'):
                group_008_1.inputs[1].show_expanded = False
            if hasattr(group_008_1.inputs[2], 'default_value'):
                group_008_1.inputs[2].default_value = (0.03343917429447174, 0.03343917429447174, 0.03343917429447174, 1.0)
            if hasattr(group_008_1.inputs[2], 'display_shape'):
                group_008_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_008_1.inputs[2], 'enabled'):
                group_008_1.inputs[2].enabled = True
            if hasattr(group_008_1.inputs[2], 'hide'):
                group_008_1.inputs[2].hide = False
            if hasattr(group_008_1.inputs[2], 'hide_value'):
                group_008_1.inputs[2].hide_value = False
            if hasattr(group_008_1.inputs[2], 'name'):
                group_008_1.inputs[2].name = 'Mid'
            if hasattr(group_008_1.inputs[2], 'show_expanded'):
                group_008_1.inputs[2].show_expanded = False
            if hasattr(group_008_1.inputs[3], 'default_value'):
                group_008_1.inputs[3].default_value = (0.028762705624103546, 0.028762705624103546, 0.028762705624103546, 1.0)
            if hasattr(group_008_1.inputs[3], 'display_shape'):
                group_008_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_008_1.inputs[3], 'enabled'):
                group_008_1.inputs[3].enabled = True
            if hasattr(group_008_1.inputs[3], 'hide'):
                group_008_1.inputs[3].hide = False
            if hasattr(group_008_1.inputs[3], 'hide_value'):
                group_008_1.inputs[3].hide_value = False
            if hasattr(group_008_1.inputs[3], 'name'):
                group_008_1.inputs[3].name = 'Bot'
            if hasattr(group_008_1.inputs[3], 'show_expanded'):
                group_008_1.inputs[3].show_expanded = False
            if hasattr(group_008_1.outputs[0], 'default_value'):
                group_008_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_008_1.outputs[0], 'display_shape'):
                group_008_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_008_1.outputs[0], 'enabled'):
                group_008_1.outputs[0].enabled = True
            if hasattr(group_008_1.outputs[0], 'hide'):
                group_008_1.outputs[0].hide = False
            if hasattr(group_008_1.outputs[0], 'hide_value'):
                group_008_1.outputs[0].hide_value = False
            if hasattr(group_008_1.outputs[0], 'name'):
                group_008_1.outputs[0].name = 'Color'
            if hasattr(group_008_1.outputs[0], 'show_expanded'):
                group_008_1.outputs[0].show_expanded = False

            math_005_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_005_1, 'color'):
                math_005_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_005_1, 'hide'):
                math_005_1.hide = False
            if hasattr(math_005_1, 'location'):
                math_005_1.location = (2167.04150390625, -286.380126953125)
            if hasattr(math_005_1, 'mute'):
                math_005_1.mute = False
            if hasattr(math_005_1, 'name'):
                math_005_1.name = 'Math.005'
            if hasattr(math_005_1, 'operation'):
                math_005_1.operation = 'MULTIPLY'
            if hasattr(math_005_1, 'use_clamp'):
                math_005_1.use_clamp = False
            if hasattr(math_005_1, 'use_custom_color'):
                math_005_1.use_custom_color = False
            if hasattr(math_005_1, 'width'):
                math_005_1.width = 140.0
            input_ = next((input_ for input_ in math_005_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_005_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_005_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_005_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            mix_005_1 = node_tree4.nodes.new('ShaderNodeMix')
            if hasattr(mix_005_1, 'blend_type'):
                mix_005_1.blend_type = 'MULTIPLY'
            if hasattr(mix_005_1, 'clamp_factor'):
                mix_005_1.clamp_factor = True
            if hasattr(mix_005_1, 'clamp_result'):
                mix_005_1.clamp_result = True
            if hasattr(mix_005_1, 'color'):
                mix_005_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(mix_005_1, 'data_type'):
                mix_005_1.data_type = 'RGBA'
            if hasattr(mix_005_1, 'factor_mode'):
                mix_005_1.factor_mode = 'UNIFORM'
            if hasattr(mix_005_1, 'hide'):
                mix_005_1.hide = False
            if hasattr(mix_005_1, 'location'):
                mix_005_1.location = (2505.625244140625, -803.4283447265625)
            if hasattr(mix_005_1, 'mute'):
                mix_005_1.mute = False
            if hasattr(mix_005_1, 'name'):
                mix_005_1.name = 'Mix.005'
            if hasattr(mix_005_1, 'use_custom_color'):
                mix_005_1.use_custom_color = False
            if hasattr(mix_005_1, 'width'):
                mix_005_1.width = 140.0
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='Factor_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='Factor_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='A_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='B_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='A_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='B_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='A_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_005_1.inputs if input_.identifier=='B_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0395461842417717, 0.03954620659351349, 0.039546236395835876, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in mix_005_1.outputs if output.identifier=='Result_Float'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_005_1.outputs if output.identifier=='Result_Vector'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_005_1.outputs if output.identifier=='Result_Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_017_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_017_1, 'color'):
                reroute_017_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_017_1, 'hide'):
                reroute_017_1.hide = False
            if hasattr(reroute_017_1, 'location'):
                reroute_017_1.location = (2052.43798828125, 407.26397705078125)
            if hasattr(reroute_017_1, 'mute'):
                reroute_017_1.mute = False
            if hasattr(reroute_017_1, 'name'):
                reroute_017_1.name = 'Reroute.017'
            if hasattr(reroute_017_1, 'use_custom_color'):
                reroute_017_1.use_custom_color = False
            if hasattr(reroute_017_1, 'width'):
                reroute_017_1.width = 16.0

            bump_001_1 = node_tree4.nodes.new('ShaderNodeBump')
            if hasattr(bump_001_1, 'color'):
                bump_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(bump_001_1, 'hide'):
                bump_001_1.hide = False
            if hasattr(bump_001_1, 'invert'):
                bump_001_1.invert = True
            if hasattr(bump_001_1, 'location'):
                bump_001_1.location = (3108.949462890625, -414.1265563964844)
            if hasattr(bump_001_1, 'mute'):
                bump_001_1.mute = False
            if hasattr(bump_001_1, 'name'):
                bump_001_1.name = 'Bump.001'
            if hasattr(bump_001_1, 'use_custom_color'):
                bump_001_1.use_custom_color = False
            if hasattr(bump_001_1, 'width'):
                bump_001_1.width = 140.0
            input_ = next((input_ for input_ in bump_001_1.inputs if input_.identifier=='Strength'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Strength'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_001_1.inputs if input_.identifier=='Distance'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.007499999832361937
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Distance'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_001_1.inputs if input_.identifier=='Height'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Height'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in bump_001_1.inputs if input_.identifier=='Normal'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Normal'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in bump_001_1.outputs if output.identifier=='Normal'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Normal'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_055_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_055_1, 'color'):
                reroute_055_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_055_1, 'hide'):
                reroute_055_1.hide = False
            if hasattr(reroute_055_1, 'location'):
                reroute_055_1.location = (2100.0087890625, 33.32284927368164)
            if hasattr(reroute_055_1, 'mute'):
                reroute_055_1.mute = False
            if hasattr(reroute_055_1, 'name'):
                reroute_055_1.name = 'Reroute.055'
            if hasattr(reroute_055_1, 'use_custom_color'):
                reroute_055_1.use_custom_color = False
            if hasattr(reroute_055_1, 'width'):
                reroute_055_1.width = 16.0

            reroute_013_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_013_1, 'color'):
                reroute_013_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_013_1, 'hide'):
                reroute_013_1.hide = False
            if hasattr(reroute_013_1, 'location'):
                reroute_013_1.location = (2819.94677734375, 50.750732421875)
            if hasattr(reroute_013_1, 'mute'):
                reroute_013_1.mute = False
            if hasattr(reroute_013_1, 'name'):
                reroute_013_1.name = 'Reroute.013'
            if hasattr(reroute_013_1, 'use_custom_color'):
                reroute_013_1.use_custom_color = False
            if hasattr(reroute_013_1, 'width'):
                reroute_013_1.width = 16.0

            reroute_053_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_053_1, 'color'):
                reroute_053_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_053_1, 'hide'):
                reroute_053_1.hide = False
            if hasattr(reroute_053_1, 'location'):
                reroute_053_1.location = (4059.8564453125, 285.1639404296875)
            if hasattr(reroute_053_1, 'mute'):
                reroute_053_1.mute = False
            if hasattr(reroute_053_1, 'name'):
                reroute_053_1.name = 'Reroute.053'
            if hasattr(reroute_053_1, 'use_custom_color'):
                reroute_053_1.use_custom_color = False
            if hasattr(reroute_053_1, 'width'):
                reroute_053_1.width = 16.0

            group_004_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_004_1, 'node_tree'):
                group_004_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_004_1, 'color'):
                group_004_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_004_1, 'hide'):
                group_004_1.hide = False
            if hasattr(group_004_1, 'location'):
                group_004_1.location = (-1609.9658203125, 2046.75048828125)
            if hasattr(group_004_1, 'mute'):
                group_004_1.mute = False
            if hasattr(group_004_1, 'name'):
                group_004_1.name = 'Group.004'
            if hasattr(group_004_1, 'use_custom_color'):
                group_004_1.use_custom_color = False
            if hasattr(group_004_1, 'width'):
                group_004_1.width = 140.0
            if hasattr(group_004_1.inputs[0], 'default_value'):
                group_004_1.inputs[0].default_value = 0.0
            if hasattr(group_004_1.inputs[0], 'display_shape'):
                group_004_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_004_1.inputs[0], 'enabled'):
                group_004_1.inputs[0].enabled = True
            if hasattr(group_004_1.inputs[0], 'hide'):
                group_004_1.inputs[0].hide = False
            if hasattr(group_004_1.inputs[0], 'hide_value'):
                group_004_1.inputs[0].hide_value = False
            if hasattr(group_004_1.inputs[0], 'name'):
                group_004_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_004_1.inputs[0], 'show_expanded'):
                group_004_1.inputs[0].show_expanded = False
            if hasattr(group_004_1.inputs[1], 'default_value'):
                group_004_1.inputs[1].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_004_1.inputs[1], 'display_shape'):
                group_004_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_004_1.inputs[1], 'enabled'):
                group_004_1.inputs[1].enabled = True
            if hasattr(group_004_1.inputs[1], 'hide'):
                group_004_1.inputs[1].hide = False
            if hasattr(group_004_1.inputs[1], 'hide_value'):
                group_004_1.inputs[1].hide_value = False
            if hasattr(group_004_1.inputs[1], 'name'):
                group_004_1.inputs[1].name = 'Top'
            if hasattr(group_004_1.inputs[1], 'show_expanded'):
                group_004_1.inputs[1].show_expanded = False
            if hasattr(group_004_1.inputs[2], 'default_value'):
                group_004_1.inputs[2].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_004_1.inputs[2], 'display_shape'):
                group_004_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_004_1.inputs[2], 'enabled'):
                group_004_1.inputs[2].enabled = True
            if hasattr(group_004_1.inputs[2], 'hide'):
                group_004_1.inputs[2].hide = False
            if hasattr(group_004_1.inputs[2], 'hide_value'):
                group_004_1.inputs[2].hide_value = False
            if hasattr(group_004_1.inputs[2], 'name'):
                group_004_1.inputs[2].name = 'Mid'
            if hasattr(group_004_1.inputs[2], 'show_expanded'):
                group_004_1.inputs[2].show_expanded = False
            if hasattr(group_004_1.inputs[3], 'default_value'):
                group_004_1.inputs[3].default_value = (0.0, 0.15896089375019073, 0.2917707562446594, 1.0)
            if hasattr(group_004_1.inputs[3], 'display_shape'):
                group_004_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_004_1.inputs[3], 'enabled'):
                group_004_1.inputs[3].enabled = True
            if hasattr(group_004_1.inputs[3], 'hide'):
                group_004_1.inputs[3].hide = False
            if hasattr(group_004_1.inputs[3], 'hide_value'):
                group_004_1.inputs[3].hide_value = False
            if hasattr(group_004_1.inputs[3], 'name'):
                group_004_1.inputs[3].name = 'Bot'
            if hasattr(group_004_1.inputs[3], 'show_expanded'):
                group_004_1.inputs[3].show_expanded = False
            if hasattr(group_004_1.outputs[0], 'default_value'):
                group_004_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_004_1.outputs[0], 'display_shape'):
                group_004_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_004_1.outputs[0], 'enabled'):
                group_004_1.outputs[0].enabled = True
            if hasattr(group_004_1.outputs[0], 'hide'):
                group_004_1.outputs[0].hide = False
            if hasattr(group_004_1.outputs[0], 'hide_value'):
                group_004_1.outputs[0].hide_value = False
            if hasattr(group_004_1.outputs[0], 'name'):
                group_004_1.outputs[0].name = 'Color'
            if hasattr(group_004_1.outputs[0], 'show_expanded'):
                group_004_1.outputs[0].show_expanded = False

            reroute_018_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_018_1, 'color'):
                reroute_018_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_018_1, 'hide'):
                reroute_018_1.hide = False
            if hasattr(reroute_018_1, 'location'):
                reroute_018_1.location = (3048.07421875, 375.3570556640625)
            if hasattr(reroute_018_1, 'mute'):
                reroute_018_1.mute = False
            if hasattr(reroute_018_1, 'name'):
                reroute_018_1.name = 'Reroute.018'
            if hasattr(reroute_018_1, 'use_custom_color'):
                reroute_018_1.use_custom_color = False
            if hasattr(reroute_018_1, 'width'):
                reroute_018_1.width = 16.0

            group_011_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_011_1, 'node_tree'):
                group_011_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_011_1, 'color'):
                group_011_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_011_1, 'hide'):
                group_011_1.hide = False
            if hasattr(group_011_1, 'location'):
                group_011_1.location = (-1609.9658203125, 1506.75048828125)
            if hasattr(group_011_1, 'mute'):
                group_011_1.mute = False
            if hasattr(group_011_1, 'name'):
                group_011_1.name = 'Group.011'
            if hasattr(group_011_1, 'use_custom_color'):
                group_011_1.use_custom_color = False
            if hasattr(group_011_1, 'width'):
                group_011_1.width = 140.0
            if hasattr(group_011_1.inputs[0], 'default_value'):
                group_011_1.inputs[0].default_value = 0.0
            if hasattr(group_011_1.inputs[0], 'display_shape'):
                group_011_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_011_1.inputs[0], 'enabled'):
                group_011_1.inputs[0].enabled = True
            if hasattr(group_011_1.inputs[0], 'hide'):
                group_011_1.inputs[0].hide = False
            if hasattr(group_011_1.inputs[0], 'hide_value'):
                group_011_1.inputs[0].hide_value = False
            if hasattr(group_011_1.inputs[0], 'name'):
                group_011_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_011_1.inputs[0], 'show_expanded'):
                group_011_1.inputs[0].show_expanded = False
            if hasattr(group_011_1.inputs[1], 'default_value'):
                group_011_1.inputs[1].default_value = (0.13843169808387756, 0.1384316086769104, 0.13843165338039398, 1.0)
            if hasattr(group_011_1.inputs[1], 'display_shape'):
                group_011_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_011_1.inputs[1], 'enabled'):
                group_011_1.inputs[1].enabled = True
            if hasattr(group_011_1.inputs[1], 'hide'):
                group_011_1.inputs[1].hide = False
            if hasattr(group_011_1.inputs[1], 'hide_value'):
                group_011_1.inputs[1].hide_value = False
            if hasattr(group_011_1.inputs[1], 'name'):
                group_011_1.inputs[1].name = 'Top'
            if hasattr(group_011_1.inputs[1], 'show_expanded'):
                group_011_1.inputs[1].show_expanded = False
            if hasattr(group_011_1.inputs[2], 'default_value'):
                group_011_1.inputs[2].default_value = (0.09312808513641357, 0.09312804043292999, 0.09312806278467178, 1.0)
            if hasattr(group_011_1.inputs[2], 'display_shape'):
                group_011_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_011_1.inputs[2], 'enabled'):
                group_011_1.inputs[2].enabled = True
            if hasattr(group_011_1.inputs[2], 'hide'):
                group_011_1.inputs[2].hide = False
            if hasattr(group_011_1.inputs[2], 'hide_value'):
                group_011_1.inputs[2].hide_value = False
            if hasattr(group_011_1.inputs[2], 'name'):
                group_011_1.inputs[2].name = 'Mid'
            if hasattr(group_011_1.inputs[2], 'show_expanded'):
                group_011_1.inputs[2].show_expanded = False
            if hasattr(group_011_1.inputs[3], 'default_value'):
                group_011_1.inputs[3].default_value = (0.13843169808387756, 0.1384316086769104, 0.13843165338039398, 1.0)
            if hasattr(group_011_1.inputs[3], 'display_shape'):
                group_011_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_011_1.inputs[3], 'enabled'):
                group_011_1.inputs[3].enabled = True
            if hasattr(group_011_1.inputs[3], 'hide'):
                group_011_1.inputs[3].hide = False
            if hasattr(group_011_1.inputs[3], 'hide_value'):
                group_011_1.inputs[3].hide_value = False
            if hasattr(group_011_1.inputs[3], 'name'):
                group_011_1.inputs[3].name = 'Bot'
            if hasattr(group_011_1.inputs[3], 'show_expanded'):
                group_011_1.inputs[3].show_expanded = False
            if hasattr(group_011_1.outputs[0], 'default_value'):
                group_011_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_011_1.outputs[0], 'display_shape'):
                group_011_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_011_1.outputs[0], 'enabled'):
                group_011_1.outputs[0].enabled = True
            if hasattr(group_011_1.outputs[0], 'hide'):
                group_011_1.outputs[0].hide = False
            if hasattr(group_011_1.outputs[0], 'hide_value'):
                group_011_1.outputs[0].hide_value = False
            if hasattr(group_011_1.outputs[0], 'name'):
                group_011_1.outputs[0].name = 'Color'
            if hasattr(group_011_1.outputs[0], 'show_expanded'):
                group_011_1.outputs[0].show_expanded = False

            reroute_038_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_038_1, 'color'):
                reroute_038_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_038_1, 'hide'):
                reroute_038_1.hide = False
            if hasattr(reroute_038_1, 'location'):
                reroute_038_1.location = (811.0916137695312, -1163.280029296875)
            if hasattr(reroute_038_1, 'mute'):
                reroute_038_1.mute = False
            if hasattr(reroute_038_1, 'name'):
                reroute_038_1.name = 'Reroute.038'
            if hasattr(reroute_038_1, 'use_custom_color'):
                reroute_038_1.use_custom_color = False
            if hasattr(reroute_038_1, 'width'):
                reroute_038_1.width = 16.0

            reroute_037_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_037_1, 'color'):
                reroute_037_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_037_1, 'hide'):
                reroute_037_1.hide = False
            if hasattr(reroute_037_1, 'location'):
                reroute_037_1.location = (756.5297241210938, -768.2499389648438)
            if hasattr(reroute_037_1, 'mute'):
                reroute_037_1.mute = False
            if hasattr(reroute_037_1, 'name'):
                reroute_037_1.name = 'Reroute.037'
            if hasattr(reroute_037_1, 'use_custom_color'):
                reroute_037_1.use_custom_color = False
            if hasattr(reroute_037_1, 'width'):
                reroute_037_1.width = 16.0

            reroute_011_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_011_1, 'color'):
                reroute_011_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_011_1, 'hide'):
                reroute_011_1.hide = False
            if hasattr(reroute_011_1, 'location'):
                reroute_011_1.location = (2218.1455078125, -762.0377197265625)
            if hasattr(reroute_011_1, 'mute'):
                reroute_011_1.mute = False
            if hasattr(reroute_011_1, 'name'):
                reroute_011_1.name = 'Reroute.011'
            if hasattr(reroute_011_1, 'use_custom_color'):
                reroute_011_1.use_custom_color = False
            if hasattr(reroute_011_1, 'width'):
                reroute_011_1.width = 16.0

            invert_1 = node_tree4.nodes.new('ShaderNodeInvert')
            if hasattr(invert_1, 'color'):
                invert_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(invert_1, 'hide'):
                invert_1.hide = False
            if hasattr(invert_1, 'location'):
                invert_1.location = (3316.08837890625, 712.96875)
            if hasattr(invert_1, 'mute'):
                invert_1.mute = False
            if hasattr(invert_1, 'name'):
                invert_1.name = 'Invert'
            if hasattr(invert_1, 'use_custom_color'):
                invert_1.use_custom_color = False
            if hasattr(invert_1, 'width'):
                invert_1.width = 140.0
            input_ = next((input_ for input_ in invert_1.inputs if input_.identifier=='Fac'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Fac'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in invert_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in invert_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_015_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_015_1, 'color'):
                reroute_015_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_015_1, 'hide'):
                reroute_015_1.hide = False
            if hasattr(reroute_015_1, 'location'):
                reroute_015_1.location = (1417.68017578125, 287.316162109375)
            if hasattr(reroute_015_1, 'mute'):
                reroute_015_1.mute = False
            if hasattr(reroute_015_1, 'name'):
                reroute_015_1.name = 'Reroute.015'
            if hasattr(reroute_015_1, 'use_custom_color'):
                reroute_015_1.use_custom_color = False
            if hasattr(reroute_015_1, 'width'):
                reroute_015_1.width = 16.0

            reroute_019_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_019_1, 'color'):
                reroute_019_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_019_1, 'hide'):
                reroute_019_1.hide = False
            if hasattr(reroute_019_1, 'location'):
                reroute_019_1.location = (3047.906005859375, 117.38058471679688)
            if hasattr(reroute_019_1, 'mute'):
                reroute_019_1.mute = False
            if hasattr(reroute_019_1, 'name'):
                reroute_019_1.name = 'Reroute.019'
            if hasattr(reroute_019_1, 'use_custom_color'):
                reroute_019_1.use_custom_color = False
            if hasattr(reroute_019_1, 'width'):
                reroute_019_1.width = 16.0

            reroute_063_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_063_1, 'color'):
                reroute_063_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_063_1, 'hide'):
                reroute_063_1.hide = False
            if hasattr(reroute_063_1, 'location'):
                reroute_063_1.location = (167.50445556640625, -157.35601806640625)
            if hasattr(reroute_063_1, 'mute'):
                reroute_063_1.mute = False
            if hasattr(reroute_063_1, 'name'):
                reroute_063_1.name = 'Reroute.063'
            if hasattr(reroute_063_1, 'use_custom_color'):
                reroute_063_1.use_custom_color = False
            if hasattr(reroute_063_1, 'width'):
                reroute_063_1.width = 16.0

            reroute_014_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_014_1, 'color'):
                reroute_014_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_014_1, 'hide'):
                reroute_014_1.hide = False
            if hasattr(reroute_014_1, 'location'):
                reroute_014_1.location = (1446.7025146484375, -185.32423400878906)
            if hasattr(reroute_014_1, 'mute'):
                reroute_014_1.mute = False
            if hasattr(reroute_014_1, 'name'):
                reroute_014_1.name = 'Reroute.014'
            if hasattr(reroute_014_1, 'use_custom_color'):
                reroute_014_1.use_custom_color = False
            if hasattr(reroute_014_1, 'width'):
                reroute_014_1.width = 16.0

            reroute_059_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_059_1, 'color'):
                reroute_059_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_059_1, 'hide'):
                reroute_059_1.hide = False
            if hasattr(reroute_059_1, 'location'):
                reroute_059_1.location = (3328.998291015625, 3.341456413269043)
            if hasattr(reroute_059_1, 'mute'):
                reroute_059_1.mute = False
            if hasattr(reroute_059_1, 'name'):
                reroute_059_1.name = 'Reroute.059'
            if hasattr(reroute_059_1, 'use_custom_color'):
                reroute_059_1.use_custom_color = False
            if hasattr(reroute_059_1, 'width'):
                reroute_059_1.width = 16.0

            mix_1 = node_tree4.nodes.new('ShaderNodeMix')
            if hasattr(mix_1, 'blend_type'):
                mix_1.blend_type = 'MULTIPLY'
            if hasattr(mix_1, 'clamp_factor'):
                mix_1.clamp_factor = True
            if hasattr(mix_1, 'clamp_result'):
                mix_1.clamp_result = False
            if hasattr(mix_1, 'color'):
                mix_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(mix_1, 'data_type'):
                mix_1.data_type = 'RGBA'
            if hasattr(mix_1, 'factor_mode'):
                mix_1.factor_mode = 'UNIFORM'
            if hasattr(mix_1, 'hide'):
                mix_1.hide = False
            if hasattr(mix_1, 'location'):
                mix_1.location = (2377.041259765625, 593.1778564453125)
            if hasattr(mix_1, 'mute'):
                mix_1.mute = False
            if hasattr(mix_1, 'name'):
                mix_1.name = 'Mix'
            if hasattr(mix_1, 'use_custom_color'):
                mix_1.use_custom_color = False
            if hasattr(mix_1, 'width'):
                mix_1.width = 140.0
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='Factor_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='Factor_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='A_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='B_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='A_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='B_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='A_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_1.inputs if input_.identifier=='B_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in mix_1.outputs if output.identifier=='Result_Float'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_1.outputs if output.identifier=='Result_Vector'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_1.outputs if output.identifier=='Result_Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            math_003_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_003_1, 'color'):
                math_003_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_003_1, 'hide'):
                math_003_1.hide = False
            if hasattr(math_003_1, 'location'):
                math_003_1.location = (2395.739501953125, 17.44978904724121)
            if hasattr(math_003_1, 'mute'):
                math_003_1.mute = False
            if hasattr(math_003_1, 'name'):
                math_003_1.name = 'Math.003'
            if hasattr(math_003_1, 'operation'):
                math_003_1.operation = 'MULTIPLY'
            if hasattr(math_003_1, 'use_clamp'):
                math_003_1.use_clamp = False
            if hasattr(math_003_1, 'use_custom_color'):
                math_003_1.use_custom_color = False
            if hasattr(math_003_1, 'width'):
                math_003_1.width = 140.0
            input_ = next((input_ for input_ in math_003_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_003_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_003_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_003_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_005_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_005_1, 'color'):
                reroute_005_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_005_1, 'hide'):
                reroute_005_1.hide = False
            if hasattr(reroute_005_1, 'location'):
                reroute_005_1.location = (1846.5892333984375, -925.2599487304688)
            if hasattr(reroute_005_1, 'mute'):
                reroute_005_1.mute = False
            if hasattr(reroute_005_1, 'name'):
                reroute_005_1.name = 'Reroute.005'
            if hasattr(reroute_005_1, 'use_custom_color'):
                reroute_005_1.use_custom_color = False
            if hasattr(reroute_005_1, 'width'):
                reroute_005_1.width = 16.0

            group_015_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_015_1, 'node_tree'):
                group_015_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_015_1, 'color'):
                group_015_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_015_1, 'hide'):
                group_015_1.hide = False
            if hasattr(group_015_1, 'location'):
                group_015_1.location = (-1609.9658203125, 1146.75048828125)
            if hasattr(group_015_1, 'mute'):
                group_015_1.mute = False
            if hasattr(group_015_1, 'name'):
                group_015_1.name = 'Group.015'
            if hasattr(group_015_1, 'use_custom_color'):
                group_015_1.use_custom_color = False
            if hasattr(group_015_1, 'width'):
                group_015_1.width = 140.0
            if hasattr(group_015_1.inputs[0], 'default_value'):
                group_015_1.inputs[0].default_value = 0.0
            if hasattr(group_015_1.inputs[0], 'display_shape'):
                group_015_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_015_1.inputs[0], 'enabled'):
                group_015_1.inputs[0].enabled = True
            if hasattr(group_015_1.inputs[0], 'hide'):
                group_015_1.inputs[0].hide = False
            if hasattr(group_015_1.inputs[0], 'hide_value'):
                group_015_1.inputs[0].hide_value = False
            if hasattr(group_015_1.inputs[0], 'name'):
                group_015_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_015_1.inputs[0], 'show_expanded'):
                group_015_1.inputs[0].show_expanded = False
            if hasattr(group_015_1.inputs[1], 'default_value'):
                group_015_1.inputs[1].default_value = (0.014443843625485897, 0.014443840831518173, 0.014443840831518173, 1.0)
            if hasattr(group_015_1.inputs[1], 'display_shape'):
                group_015_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_015_1.inputs[1], 'enabled'):
                group_015_1.inputs[1].enabled = True
            if hasattr(group_015_1.inputs[1], 'hide'):
                group_015_1.inputs[1].hide = False
            if hasattr(group_015_1.inputs[1], 'hide_value'):
                group_015_1.inputs[1].hide_value = False
            if hasattr(group_015_1.inputs[1], 'name'):
                group_015_1.inputs[1].name = 'Top'
            if hasattr(group_015_1.inputs[1], 'show_expanded'):
                group_015_1.inputs[1].show_expanded = False
            if hasattr(group_015_1.inputs[2], 'default_value'):
                group_015_1.inputs[2].default_value = (0.014443843625485897, 0.014443840831518173, 0.014443840831518173, 1.0)
            if hasattr(group_015_1.inputs[2], 'display_shape'):
                group_015_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_015_1.inputs[2], 'enabled'):
                group_015_1.inputs[2].enabled = True
            if hasattr(group_015_1.inputs[2], 'hide'):
                group_015_1.inputs[2].hide = False
            if hasattr(group_015_1.inputs[2], 'hide_value'):
                group_015_1.inputs[2].hide_value = False
            if hasattr(group_015_1.inputs[2], 'name'):
                group_015_1.inputs[2].name = 'Mid'
            if hasattr(group_015_1.inputs[2], 'show_expanded'):
                group_015_1.inputs[2].show_expanded = False
            if hasattr(group_015_1.inputs[3], 'default_value'):
                group_015_1.inputs[3].default_value = (0.014443843625485897, 0.014443840831518173, 0.014443840831518173, 1.0)
            if hasattr(group_015_1.inputs[3], 'display_shape'):
                group_015_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_015_1.inputs[3], 'enabled'):
                group_015_1.inputs[3].enabled = True
            if hasattr(group_015_1.inputs[3], 'hide'):
                group_015_1.inputs[3].hide = False
            if hasattr(group_015_1.inputs[3], 'hide_value'):
                group_015_1.inputs[3].hide_value = False
            if hasattr(group_015_1.inputs[3], 'name'):
                group_015_1.inputs[3].name = 'Bot'
            if hasattr(group_015_1.inputs[3], 'show_expanded'):
                group_015_1.inputs[3].show_expanded = False
            if hasattr(group_015_1.outputs[0], 'default_value'):
                group_015_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_015_1.outputs[0], 'display_shape'):
                group_015_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_015_1.outputs[0], 'enabled'):
                group_015_1.outputs[0].enabled = True
            if hasattr(group_015_1.outputs[0], 'hide'):
                group_015_1.outputs[0].hide = False
            if hasattr(group_015_1.outputs[0], 'hide_value'):
                group_015_1.outputs[0].hide_value = False
            if hasattr(group_015_1.outputs[0], 'name'):
                group_015_1.outputs[0].name = 'Color'
            if hasattr(group_015_1.outputs[0], 'show_expanded'):
                group_015_1.outputs[0].show_expanded = False

            group_012_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_012_1, 'node_tree'):
                group_012_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_012_1, 'color'):
                group_012_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_012_1, 'hide'):
                group_012_1.hide = False
            if hasattr(group_012_1, 'location'):
                group_012_1.location = (-1609.9658203125, 1326.75048828125)
            if hasattr(group_012_1, 'mute'):
                group_012_1.mute = False
            if hasattr(group_012_1, 'name'):
                group_012_1.name = 'Group.012'
            if hasattr(group_012_1, 'use_custom_color'):
                group_012_1.use_custom_color = False
            if hasattr(group_012_1, 'width'):
                group_012_1.width = 140.0
            if hasattr(group_012_1.inputs[0], 'default_value'):
                group_012_1.inputs[0].default_value = 0.0
            if hasattr(group_012_1.inputs[0], 'display_shape'):
                group_012_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_012_1.inputs[0], 'enabled'):
                group_012_1.inputs[0].enabled = True
            if hasattr(group_012_1.inputs[0], 'hide'):
                group_012_1.inputs[0].hide = False
            if hasattr(group_012_1.inputs[0], 'hide_value'):
                group_012_1.inputs[0].hide_value = False
            if hasattr(group_012_1.inputs[0], 'name'):
                group_012_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_012_1.inputs[0], 'show_expanded'):
                group_012_1.inputs[0].show_expanded = False
            if hasattr(group_012_1.inputs[1], 'default_value'):
                group_012_1.inputs[1].default_value = (0.5, 0.5, 0.5, 1.0)
            if hasattr(group_012_1.inputs[1], 'display_shape'):
                group_012_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_012_1.inputs[1], 'enabled'):
                group_012_1.inputs[1].enabled = True
            if hasattr(group_012_1.inputs[1], 'hide'):
                group_012_1.inputs[1].hide = False
            if hasattr(group_012_1.inputs[1], 'hide_value'):
                group_012_1.inputs[1].hide_value = False
            if hasattr(group_012_1.inputs[1], 'name'):
                group_012_1.inputs[1].name = 'Top'
            if hasattr(group_012_1.inputs[1], 'show_expanded'):
                group_012_1.inputs[1].show_expanded = False
            if hasattr(group_012_1.inputs[2], 'default_value'):
                group_012_1.inputs[2].default_value = (0.5, 0.5, 0.5, 1.0)
            if hasattr(group_012_1.inputs[2], 'display_shape'):
                group_012_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_012_1.inputs[2], 'enabled'):
                group_012_1.inputs[2].enabled = True
            if hasattr(group_012_1.inputs[2], 'hide'):
                group_012_1.inputs[2].hide = False
            if hasattr(group_012_1.inputs[2], 'hide_value'):
                group_012_1.inputs[2].hide_value = False
            if hasattr(group_012_1.inputs[2], 'name'):
                group_012_1.inputs[2].name = 'Mid'
            if hasattr(group_012_1.inputs[2], 'show_expanded'):
                group_012_1.inputs[2].show_expanded = False
            if hasattr(group_012_1.inputs[3], 'default_value'):
                group_012_1.inputs[3].default_value = (0.5, 0.5, 0.5, 1.0)
            if hasattr(group_012_1.inputs[3], 'display_shape'):
                group_012_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_012_1.inputs[3], 'enabled'):
                group_012_1.inputs[3].enabled = True
            if hasattr(group_012_1.inputs[3], 'hide'):
                group_012_1.inputs[3].hide = False
            if hasattr(group_012_1.inputs[3], 'hide_value'):
                group_012_1.inputs[3].hide_value = False
            if hasattr(group_012_1.inputs[3], 'name'):
                group_012_1.inputs[3].name = 'Bot'
            if hasattr(group_012_1.inputs[3], 'show_expanded'):
                group_012_1.inputs[3].show_expanded = False
            if hasattr(group_012_1.outputs[0], 'default_value'):
                group_012_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_012_1.outputs[0], 'display_shape'):
                group_012_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_012_1.outputs[0], 'enabled'):
                group_012_1.outputs[0].enabled = True
            if hasattr(group_012_1.outputs[0], 'hide'):
                group_012_1.outputs[0].hide = False
            if hasattr(group_012_1.outputs[0], 'hide_value'):
                group_012_1.outputs[0].hide_value = False
            if hasattr(group_012_1.outputs[0], 'name'):
                group_012_1.outputs[0].name = 'Color'
            if hasattr(group_012_1.outputs[0], 'show_expanded'):
                group_012_1.outputs[0].show_expanded = False

            reroute_061_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_061_1, 'color'):
                reroute_061_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_061_1, 'hide'):
                reroute_061_1.hide = False
            if hasattr(reroute_061_1, 'location'):
                reroute_061_1.location = (4692.388671875, 189.62496948242188)
            if hasattr(reroute_061_1, 'mute'):
                reroute_061_1.mute = False
            if hasattr(reroute_061_1, 'name'):
                reroute_061_1.name = 'Reroute.061'
            if hasattr(reroute_061_1, 'use_custom_color'):
                reroute_061_1.use_custom_color = False
            if hasattr(reroute_061_1, 'width'):
                reroute_061_1.width = 16.0

            reroute_030_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_030_1, 'color'):
                reroute_030_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_030_1, 'hide'):
                reroute_030_1.hide = False
            if hasattr(reroute_030_1, 'location'):
                reroute_030_1.location = (4059.80517578125, 495.5069274902344)
            if hasattr(reroute_030_1, 'mute'):
                reroute_030_1.mute = False
            if hasattr(reroute_030_1, 'name'):
                reroute_030_1.name = 'Reroute.030'
            if hasattr(reroute_030_1, 'use_custom_color'):
                reroute_030_1.use_custom_color = False
            if hasattr(reroute_030_1, 'width'):
                reroute_030_1.width = 16.0

            mix_004_1 = node_tree4.nodes.new('ShaderNodeMix')
            if hasattr(mix_004_1, 'blend_type'):
                mix_004_1.blend_type = 'MIX'
            if hasattr(mix_004_1, 'clamp_factor'):
                mix_004_1.clamp_factor = True
            if hasattr(mix_004_1, 'clamp_result'):
                mix_004_1.clamp_result = True
            if hasattr(mix_004_1, 'color'):
                mix_004_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(mix_004_1, 'data_type'):
                mix_004_1.data_type = 'RGBA'
            if hasattr(mix_004_1, 'factor_mode'):
                mix_004_1.factor_mode = 'UNIFORM'
            if hasattr(mix_004_1, 'hide'):
                mix_004_1.hide = False
            if hasattr(mix_004_1, 'location'):
                mix_004_1.location = (3559.901123046875, 732.34619140625)
            if hasattr(mix_004_1, 'mute'):
                mix_004_1.mute = False
            if hasattr(mix_004_1, 'name'):
                mix_004_1.name = 'Mix.004'
            if hasattr(mix_004_1, 'use_custom_color'):
                mix_004_1.use_custom_color = False
            if hasattr(mix_004_1, 'width'):
                mix_004_1.width = 140.0
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='Factor_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='Factor_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='A_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='B_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='A_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='B_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='A_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_004_1.inputs if input_.identifier=='B_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0395461842417717, 0.03954620659351349, 0.039546236395835876, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in mix_004_1.outputs if output.identifier=='Result_Float'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_004_1.outputs if output.identifier=='Result_Vector'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_004_1.outputs if output.identifier=='Result_Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_052_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_052_1, 'color'):
                reroute_052_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_052_1, 'hide'):
                reroute_052_1.hide = False
            if hasattr(reroute_052_1, 'location'):
                reroute_052_1.location = (4230.68603515625, 309.67291259765625)
            if hasattr(reroute_052_1, 'mute'):
                reroute_052_1.mute = False
            if hasattr(reroute_052_1, 'name'):
                reroute_052_1.name = 'Reroute.052'
            if hasattr(reroute_052_1, 'use_custom_color'):
                reroute_052_1.use_custom_color = False
            if hasattr(reroute_052_1, 'width'):
                reroute_052_1.width = 16.0

            reroute_029_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_029_1, 'color'):
                reroute_029_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_029_1, 'hide'):
                reroute_029_1.hide = False
            if hasattr(reroute_029_1, 'location'):
                reroute_029_1.location = (4549.212890625, 262.6029357910156)
            if hasattr(reroute_029_1, 'mute'):
                reroute_029_1.mute = False
            if hasattr(reroute_029_1, 'name'):
                reroute_029_1.name = 'Reroute.029'
            if hasattr(reroute_029_1, 'use_custom_color'):
                reroute_029_1.use_custom_color = False
            if hasattr(reroute_029_1, 'width'):
                reroute_029_1.width = 16.0

            mix_006_1 = node_tree4.nodes.new('ShaderNodeMix')
            if hasattr(mix_006_1, 'blend_type'):
                mix_006_1.blend_type = 'MULTIPLY'
            if hasattr(mix_006_1, 'clamp_factor'):
                mix_006_1.clamp_factor = True
            if hasattr(mix_006_1, 'clamp_result'):
                mix_006_1.clamp_result = True
            if hasattr(mix_006_1, 'color'):
                mix_006_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(mix_006_1, 'data_type'):
                mix_006_1.data_type = 'RGBA'
            if hasattr(mix_006_1, 'factor_mode'):
                mix_006_1.factor_mode = 'UNIFORM'
            if hasattr(mix_006_1, 'hide'):
                mix_006_1.hide = True
            if hasattr(mix_006_1, 'location'):
                mix_006_1.location = (3899.473388671875, 242.8136444091797)
            if hasattr(mix_006_1, 'mute'):
                mix_006_1.mute = False
            if hasattr(mix_006_1, 'name'):
                mix_006_1.name = 'Mix.006'
            if hasattr(mix_006_1, 'use_custom_color'):
                mix_006_1.use_custom_color = False
            if hasattr(mix_006_1, 'width'):
                mix_006_1.width = 140.0
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='Factor_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='Factor_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Factor'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='A_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='B_Float'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='A_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='B_Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='A_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'A'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mix_006_1.inputs if input_.identifier=='B_Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'B'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in mix_006_1.outputs if output.identifier=='Result_Float'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_006_1.outputs if output.identifier=='Result_Vector'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = False
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in mix_006_1.outputs if output.identifier=='Result_Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Result'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_031_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_031_1, 'color'):
                reroute_031_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_031_1, 'hide'):
                reroute_031_1.hide = False
            if hasattr(reroute_031_1, 'location'):
                reroute_031_1.location = (3284.982177734375, 550.6635131835938)
            if hasattr(reroute_031_1, 'mute'):
                reroute_031_1.mute = False
            if hasattr(reroute_031_1, 'name'):
                reroute_031_1.name = 'Reroute.031'
            if hasattr(reroute_031_1, 'use_custom_color'):
                reroute_031_1.use_custom_color = False
            if hasattr(reroute_031_1, 'width'):
                reroute_031_1.width = 16.0

            reroute_044_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_044_1, 'color'):
                reroute_044_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_044_1, 'hide'):
                reroute_044_1.hide = False
            if hasattr(reroute_044_1, 'location'):
                reroute_044_1.location = (3898.373779296875, 442.1236267089844)
            if hasattr(reroute_044_1, 'mute'):
                reroute_044_1.mute = False
            if hasattr(reroute_044_1, 'name'):
                reroute_044_1.name = 'Reroute.044'
            if hasattr(reroute_044_1, 'use_custom_color'):
                reroute_044_1.use_custom_color = False
            if hasattr(reroute_044_1, 'width'):
                reroute_044_1.width = 16.0

            reroute_020_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_020_1, 'color'):
                reroute_020_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_020_1, 'hide'):
                reroute_020_1.hide = False
            if hasattr(reroute_020_1, 'location'):
                reroute_020_1.location = (3926.859619140625, 372.5987854003906)
            if hasattr(reroute_020_1, 'mute'):
                reroute_020_1.mute = False
            if hasattr(reroute_020_1, 'name'):
                reroute_020_1.name = 'Reroute.020'
            if hasattr(reroute_020_1, 'use_custom_color'):
                reroute_020_1.use_custom_color = False
            if hasattr(reroute_020_1, 'width'):
                reroute_020_1.width = 16.0

            reroute_049_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_049_1, 'color'):
                reroute_049_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_049_1, 'hide'):
                reroute_049_1.hide = False
            if hasattr(reroute_049_1, 'location'):
                reroute_049_1.location = (4105.80126953125, 353.3472900390625)
            if hasattr(reroute_049_1, 'mute'):
                reroute_049_1.mute = False
            if hasattr(reroute_049_1, 'name'):
                reroute_049_1.name = 'Reroute.049'
            if hasattr(reroute_049_1, 'use_custom_color'):
                reroute_049_1.use_custom_color = False
            if hasattr(reroute_049_1, 'width'):
                reroute_049_1.width = 16.0

            math_006_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_006_1, 'color'):
                math_006_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_006_1, 'hide'):
                math_006_1.hide = False
            if hasattr(math_006_1, 'location'):
                math_006_1.location = (4489.9873046875, -158.54791259765625)
            if hasattr(math_006_1, 'mute'):
                math_006_1.mute = False
            if hasattr(math_006_1, 'name'):
                math_006_1.name = 'Math.006'
            if hasattr(math_006_1, 'operation'):
                math_006_1.operation = 'SUBTRACT'
            if hasattr(math_006_1, 'use_clamp'):
                math_006_1.use_clamp = False
            if hasattr(math_006_1, 'use_custom_color'):
                math_006_1.use_custom_color = False
            if hasattr(math_006_1, 'width'):
                math_006_1.width = 141.0074920654297
            input_ = next((input_ for input_ in math_006_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_006_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_006_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_006_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            reroute_027_1 = node_tree4.nodes.new('NodeReroute')
            if hasattr(reroute_027_1, 'color'):
                reroute_027_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(reroute_027_1, 'hide'):
                reroute_027_1.hide = False
            if hasattr(reroute_027_1, 'location'):
                reroute_027_1.location = (3927.99951171875, 201.0716094970703)
            if hasattr(reroute_027_1, 'mute'):
                reroute_027_1.mute = False
            if hasattr(reroute_027_1, 'name'):
                reroute_027_1.name = 'Reroute.027'
            if hasattr(reroute_027_1, 'use_custom_color'):
                reroute_027_1.use_custom_color = False
            if hasattr(reroute_027_1, 'width'):
                reroute_027_1.width = 16.0

            group_output_1 = node_tree4.nodes.new('NodeGroupOutput')
            if hasattr(group_output_1, 'color'):
                group_output_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_output_1, 'hide'):
                group_output_1.hide = False
            if hasattr(group_output_1, 'is_active_output'):
                group_output_1.is_active_output = True
            if hasattr(group_output_1, 'location'):
                group_output_1.location = (5019.28515625, 406.7503967285156)
            if hasattr(group_output_1, 'mute'):
                group_output_1.mute = False
            if hasattr(group_output_1, 'name'):
                group_output_1.name = 'Group Output'
            if hasattr(group_output_1, 'use_custom_color'):
                group_output_1.use_custom_color = False
            if hasattr(group_output_1, 'width'):
                group_output_1.width = 140.0
            if hasattr(group_output_1.inputs[1], 'default_value'):
                group_output_1.inputs[1].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[1], 'display_shape'):
                group_output_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[1], 'enabled'):
                group_output_1.inputs[1].enabled = True
            if hasattr(group_output_1.inputs[1], 'hide'):
                group_output_1.inputs[1].hide = False
            if hasattr(group_output_1.inputs[1], 'hide_value'):
                group_output_1.inputs[1].hide_value = False
            if hasattr(group_output_1.inputs[1], 'name'):
                group_output_1.inputs[1].name = 'Color'
            if hasattr(group_output_1.inputs[1], 'show_expanded'):
                group_output_1.inputs[1].show_expanded = False
            if hasattr(group_output_1.inputs[2], 'default_value'):
                group_output_1.inputs[2].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[2], 'display_shape'):
                group_output_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[2], 'enabled'):
                group_output_1.inputs[2].enabled = True
            if hasattr(group_output_1.inputs[2], 'hide'):
                group_output_1.inputs[2].hide = False
            if hasattr(group_output_1.inputs[2], 'hide_value'):
                group_output_1.inputs[2].hide_value = False
            if hasattr(group_output_1.inputs[2], 'name'):
                group_output_1.inputs[2].name = 'Metallic'
            if hasattr(group_output_1.inputs[2], 'show_expanded'):
                group_output_1.inputs[2].show_expanded = False
            if hasattr(group_output_1.inputs[3], 'default_value'):
                group_output_1.inputs[3].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[3], 'display_shape'):
                group_output_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[3], 'enabled'):
                group_output_1.inputs[3].enabled = True
            if hasattr(group_output_1.inputs[3], 'hide'):
                group_output_1.inputs[3].hide = False
            if hasattr(group_output_1.inputs[3], 'hide_value'):
                group_output_1.inputs[3].hide_value = False
            if hasattr(group_output_1.inputs[3], 'name'):
                group_output_1.inputs[3].name = 'Roughness'
            if hasattr(group_output_1.inputs[3], 'show_expanded'):
                group_output_1.inputs[3].show_expanded = False
            if hasattr(group_output_1.inputs[4], 'default_value'):
                group_output_1.inputs[4].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[4], 'display_shape'):
                group_output_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[4], 'enabled'):
                group_output_1.inputs[4].enabled = True
            if hasattr(group_output_1.inputs[4], 'hide'):
                group_output_1.inputs[4].hide = False
            if hasattr(group_output_1.inputs[4], 'hide_value'):
                group_output_1.inputs[4].hide_value = False
            if hasattr(group_output_1.inputs[4], 'name'):
                group_output_1.inputs[4].name = 'Emmisive'
            if hasattr(group_output_1.inputs[4], 'show_expanded'):
                group_output_1.inputs[4].show_expanded = False
            if hasattr(group_output_1.inputs[5], 'default_value'):
                group_output_1.inputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[5], 'display_shape'):
                group_output_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[5], 'enabled'):
                group_output_1.inputs[5].enabled = True
            if hasattr(group_output_1.inputs[5], 'hide'):
                group_output_1.inputs[5].hide = False
            if hasattr(group_output_1.inputs[5], 'hide_value'):
                group_output_1.inputs[5].hide_value = False
            if hasattr(group_output_1.inputs[5], 'name'):
                group_output_1.inputs[5].name = 'Specular'
            if hasattr(group_output_1.inputs[5], 'show_expanded'):
                group_output_1.inputs[5].show_expanded = False
            if hasattr(group_output_1.inputs[6], 'default_value'):
                group_output_1.inputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[6], 'display_shape'):
                group_output_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[6], 'enabled'):
                group_output_1.inputs[6].enabled = True
            if hasattr(group_output_1.inputs[6], 'hide'):
                group_output_1.inputs[6].hide = False
            if hasattr(group_output_1.inputs[6], 'hide_value'):
                group_output_1.inputs[6].hide_value = False
            if hasattr(group_output_1.inputs[6], 'name'):
                group_output_1.inputs[6].name = 'Specular Albedo'
            if hasattr(group_output_1.inputs[6], 'show_expanded'):
                group_output_1.inputs[6].show_expanded = False
            if hasattr(group_output_1.inputs[7], 'default_value'):
                group_output_1.inputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[7], 'display_shape'):
                group_output_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[7], 'enabled'):
                group_output_1.inputs[7].enabled = True
            if hasattr(group_output_1.inputs[7], 'hide'):
                group_output_1.inputs[7].hide = False
            if hasattr(group_output_1.inputs[7], 'hide_value'):
                group_output_1.inputs[7].hide_value = False
            if hasattr(group_output_1.inputs[7], 'name'):
                group_output_1.inputs[7].name = 'Ambient Occlusion'
            if hasattr(group_output_1.inputs[7], 'show_expanded'):
                group_output_1.inputs[7].show_expanded = False
            if hasattr(group_output_1.inputs[8], 'default_value'):
                group_output_1.inputs[8].default_value = (0.0, 0.0, 0.0)
            if hasattr(group_output_1.inputs[8], 'display_shape'):
                group_output_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[8], 'enabled'):
                group_output_1.inputs[8].enabled = True
            if hasattr(group_output_1.inputs[8], 'hide'):
                group_output_1.inputs[8].hide = False
            if hasattr(group_output_1.inputs[8], 'hide_value'):
                group_output_1.inputs[8].hide_value = False
            if hasattr(group_output_1.inputs[8], 'name'):
                group_output_1.inputs[8].name = 'Normal'
            if hasattr(group_output_1.inputs[8], 'show_expanded'):
                group_output_1.inputs[8].show_expanded = False
            if hasattr(group_output_1.inputs[9], 'default_value'):
                group_output_1.inputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[9], 'display_shape'):
                group_output_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[9], 'enabled'):
                group_output_1.inputs[9].enabled = True
            if hasattr(group_output_1.inputs[9], 'hide'):
                group_output_1.inputs[9].hide = False
            if hasattr(group_output_1.inputs[9], 'hide_value'):
                group_output_1.inputs[9].hide_value = False
            if hasattr(group_output_1.inputs[9], 'name'):
                group_output_1.inputs[9].name = 'Unity Mask Map'
            if hasattr(group_output_1.inputs[9], 'show_expanded'):
                group_output_1.inputs[9].show_expanded = False
            if hasattr(group_output_1.inputs[10], 'default_value'):
                group_output_1.inputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_output_1.inputs[10], 'display_shape'):
                group_output_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_output_1.inputs[10], 'enabled'):
                group_output_1.inputs[10].enabled = True
            if hasattr(group_output_1.inputs[10], 'hide'):
                group_output_1.inputs[10].hide = False
            if hasattr(group_output_1.inputs[10], 'hide_value'):
                group_output_1.inputs[10].hide_value = False
            if hasattr(group_output_1.inputs[10], 'name'):
                group_output_1.inputs[10].name = 'Unity Smoothness Map'
            if hasattr(group_output_1.inputs[10], 'show_expanded'):
                group_output_1.inputs[10].show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Masking Sorter noGrime')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Masking Sorter noGrime', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-700.0, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-400.0, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-200.0, 0.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-300.0, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'SUBTRACT'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'FLOAT'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-500.0, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'FLOAT'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-400.0, -20.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'FLOAT'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-300.0, -20.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'FLOAT'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-200.0, -20.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-800.0, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.5
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.0
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Slot 1'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = 0.0
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 2'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = 0.0
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 3'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = 0.0
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 4'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = 0.0
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 5'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = 0.0
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Slot 6'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = 0.0
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Dust'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'FLOAT'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-600.0, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = True
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'FLOAT'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-100.0, 0.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[6], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_004_2.inputs[7])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], math_001_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], math_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[1])
                node_tree2.links.new(mix_004_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[3])
                node_tree2.links.new(mix_2.outputs[0], mix_001_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[6], mix_001_2.inputs[3])
                node_tree2.links.new(mix_001_2.outputs[0], mix_002_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[7], mix_002_2.inputs[3])
                node_tree2.links.new(mix_002_2.outputs[0], mix_003_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[8], mix_003_2.inputs[3])
                node_tree2.links.new(mix_003_2.outputs[0], mix_004_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[9], mix_004_2.inputs[3])
                node_tree2.links.new(mix_004_2.outputs[0], mix_006_2.inputs[2])
                node_tree2.links.new(mix_006_2.outputs[0], group_output_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[3])

            group_018_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_018_1, 'node_tree'):
                group_018_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter noGrime')
            if hasattr(group_018_1, 'color'):
                group_018_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_018_1, 'hide'):
                group_018_1.hide = False
            if hasattr(group_018_1, 'location'):
                group_018_1.location = (-1689.9661865234375, -333.2493896484375)
            if hasattr(group_018_1, 'mute'):
                group_018_1.mute = False
            if hasattr(group_018_1, 'name'):
                group_018_1.name = 'Group.018'
            if hasattr(group_018_1, 'use_custom_color'):
                group_018_1.use_custom_color = False
            if hasattr(group_018_1, 'width'):
                group_018_1.width = 239.4532470703125
            if hasattr(group_018_1.inputs[0], 'default_value'):
                group_018_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_018_1.inputs[0], 'display_shape'):
                group_018_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[0], 'enabled'):
                group_018_1.inputs[0].enabled = True
            if hasattr(group_018_1.inputs[0], 'hide'):
                group_018_1.inputs[0].hide = False
            if hasattr(group_018_1.inputs[0], 'hide_value'):
                group_018_1.inputs[0].hide_value = False
            if hasattr(group_018_1.inputs[0], 'name'):
                group_018_1.inputs[0].name = 'ASG'
            if hasattr(group_018_1.inputs[0], 'show_expanded'):
                group_018_1.inputs[0].show_expanded = False
            if hasattr(group_018_1.inputs[1], 'default_value'):
                group_018_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_018_1.inputs[1], 'display_shape'):
                group_018_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[1], 'enabled'):
                group_018_1.inputs[1].enabled = True
            if hasattr(group_018_1.inputs[1], 'hide'):
                group_018_1.inputs[1].hide = False
            if hasattr(group_018_1.inputs[1], 'hide_value'):
                group_018_1.inputs[1].hide_value = False
            if hasattr(group_018_1.inputs[1], 'name'):
                group_018_1.inputs[1].name = 'Mask_0'
            if hasattr(group_018_1.inputs[1], 'show_expanded'):
                group_018_1.inputs[1].show_expanded = False
            if hasattr(group_018_1.inputs[2], 'default_value'):
                group_018_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_018_1.inputs[2], 'display_shape'):
                group_018_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[2], 'enabled'):
                group_018_1.inputs[2].enabled = True
            if hasattr(group_018_1.inputs[2], 'hide'):
                group_018_1.inputs[2].hide = False
            if hasattr(group_018_1.inputs[2], 'hide_value'):
                group_018_1.inputs[2].hide_value = False
            if hasattr(group_018_1.inputs[2], 'name'):
                group_018_1.inputs[2].name = 'Mask_1'
            if hasattr(group_018_1.inputs[2], 'show_expanded'):
                group_018_1.inputs[2].show_expanded = False
            if hasattr(group_018_1.inputs[3], 'default_value'):
                group_018_1.inputs[3].default_value = 0.5
            if hasattr(group_018_1.inputs[3], 'display_shape'):
                group_018_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[3], 'enabled'):
                group_018_1.inputs[3].enabled = True
            if hasattr(group_018_1.inputs[3], 'hide'):
                group_018_1.inputs[3].hide = False
            if hasattr(group_018_1.inputs[3], 'hide_value'):
                group_018_1.inputs[3].hide_value = False
            if hasattr(group_018_1.inputs[3], 'name'):
                group_018_1.inputs[3].name = 'Dust Amount'
            if hasattr(group_018_1.inputs[3], 'show_expanded'):
                group_018_1.inputs[3].show_expanded = False
            if hasattr(group_018_1.inputs[4], 'default_value'):
                group_018_1.inputs[4].default_value = 0.0
            if hasattr(group_018_1.inputs[4], 'display_shape'):
                group_018_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[4], 'enabled'):
                group_018_1.inputs[4].enabled = True
            if hasattr(group_018_1.inputs[4], 'hide'):
                group_018_1.inputs[4].hide = False
            if hasattr(group_018_1.inputs[4], 'hide_value'):
                group_018_1.inputs[4].hide_value = False
            if hasattr(group_018_1.inputs[4], 'name'):
                group_018_1.inputs[4].name = 'Slot 1'
            if hasattr(group_018_1.inputs[4], 'show_expanded'):
                group_018_1.inputs[4].show_expanded = False
            if hasattr(group_018_1.inputs[5], 'display_shape'):
                group_018_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[5], 'enabled'):
                group_018_1.inputs[5].enabled = True
            if hasattr(group_018_1.inputs[5], 'hide'):
                group_018_1.inputs[5].hide = False
            if hasattr(group_018_1.inputs[5], 'hide_value'):
                group_018_1.inputs[5].hide_value = False
            if hasattr(group_018_1.inputs[5], 'name'):
                group_018_1.inputs[5].name = 'Slot 2'
            if hasattr(group_018_1.inputs[5], 'show_expanded'):
                group_018_1.inputs[5].show_expanded = False
            if hasattr(group_018_1.inputs[6], 'display_shape'):
                group_018_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[6], 'enabled'):
                group_018_1.inputs[6].enabled = True
            if hasattr(group_018_1.inputs[6], 'hide'):
                group_018_1.inputs[6].hide = False
            if hasattr(group_018_1.inputs[6], 'hide_value'):
                group_018_1.inputs[6].hide_value = False
            if hasattr(group_018_1.inputs[6], 'name'):
                group_018_1.inputs[6].name = 'Slot 3'
            if hasattr(group_018_1.inputs[6], 'show_expanded'):
                group_018_1.inputs[6].show_expanded = False
            if hasattr(group_018_1.inputs[7], 'display_shape'):
                group_018_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[7], 'enabled'):
                group_018_1.inputs[7].enabled = True
            if hasattr(group_018_1.inputs[7], 'hide'):
                group_018_1.inputs[7].hide = False
            if hasattr(group_018_1.inputs[7], 'hide_value'):
                group_018_1.inputs[7].hide_value = False
            if hasattr(group_018_1.inputs[7], 'name'):
                group_018_1.inputs[7].name = 'Slot 4'
            if hasattr(group_018_1.inputs[7], 'show_expanded'):
                group_018_1.inputs[7].show_expanded = False
            if hasattr(group_018_1.inputs[8], 'display_shape'):
                group_018_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[8], 'enabled'):
                group_018_1.inputs[8].enabled = True
            if hasattr(group_018_1.inputs[8], 'hide'):
                group_018_1.inputs[8].hide = False
            if hasattr(group_018_1.inputs[8], 'hide_value'):
                group_018_1.inputs[8].hide_value = False
            if hasattr(group_018_1.inputs[8], 'name'):
                group_018_1.inputs[8].name = 'Slot 5'
            if hasattr(group_018_1.inputs[8], 'show_expanded'):
                group_018_1.inputs[8].show_expanded = False
            if hasattr(group_018_1.inputs[9], 'display_shape'):
                group_018_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[9], 'enabled'):
                group_018_1.inputs[9].enabled = True
            if hasattr(group_018_1.inputs[9], 'hide'):
                group_018_1.inputs[9].hide = False
            if hasattr(group_018_1.inputs[9], 'hide_value'):
                group_018_1.inputs[9].hide_value = False
            if hasattr(group_018_1.inputs[9], 'name'):
                group_018_1.inputs[9].name = 'Slot 6'
            if hasattr(group_018_1.inputs[9], 'show_expanded'):
                group_018_1.inputs[9].show_expanded = False
            if hasattr(group_018_1.inputs[10], 'display_shape'):
                group_018_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_018_1.inputs[10], 'enabled'):
                group_018_1.inputs[10].enabled = True
            if hasattr(group_018_1.inputs[10], 'hide'):
                group_018_1.inputs[10].hide = False
            if hasattr(group_018_1.inputs[10], 'hide_value'):
                group_018_1.inputs[10].hide_value = False
            if hasattr(group_018_1.inputs[10], 'name'):
                group_018_1.inputs[10].name = 'Dust'
            if hasattr(group_018_1.inputs[10], 'show_expanded'):
                group_018_1.inputs[10].show_expanded = False
            if hasattr(group_018_1.outputs[0], 'default_value'):
                group_018_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_018_1.outputs[0], 'display_shape'):
                group_018_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_018_1.outputs[0], 'enabled'):
                group_018_1.outputs[0].enabled = True
            if hasattr(group_018_1.outputs[0], 'hide'):
                group_018_1.outputs[0].hide = False
            if hasattr(group_018_1.outputs[0], 'hide_value'):
                group_018_1.outputs[0].hide_value = False
            if hasattr(group_018_1.outputs[0], 'name'):
                group_018_1.outputs[0].name = 'Color'
            if hasattr(group_018_1.outputs[0], 'show_expanded'):
                group_018_1.outputs[0].show_expanded = False

            group_020_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_020_1, 'node_tree'):
                group_020_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter noGrime')
            if hasattr(group_020_1, 'color'):
                group_020_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_020_1, 'hide'):
                group_020_1.hide = False
            if hasattr(group_020_1, 'location'):
                group_020_1.location = (-1689.9661865234375, 14.793144226074219)
            if hasattr(group_020_1, 'mute'):
                group_020_1.mute = False
            if hasattr(group_020_1, 'name'):
                group_020_1.name = 'Group.020'
            if hasattr(group_020_1, 'use_custom_color'):
                group_020_1.use_custom_color = False
            if hasattr(group_020_1, 'width'):
                group_020_1.width = 239.4532470703125
            if hasattr(group_020_1.inputs[0], 'default_value'):
                group_020_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_020_1.inputs[0], 'display_shape'):
                group_020_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_020_1.inputs[0], 'enabled'):
                group_020_1.inputs[0].enabled = True
            if hasattr(group_020_1.inputs[0], 'hide'):
                group_020_1.inputs[0].hide = False
            if hasattr(group_020_1.inputs[0], 'hide_value'):
                group_020_1.inputs[0].hide_value = False
            if hasattr(group_020_1.inputs[0], 'name'):
                group_020_1.inputs[0].name = 'ASG'
            if hasattr(group_020_1.inputs[0], 'show_expanded'):
                group_020_1.inputs[0].show_expanded = False
            if hasattr(group_020_1.inputs[1], 'default_value'):
                group_020_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_020_1.inputs[1], 'display_shape'):
                group_020_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_020_1.inputs[1], 'enabled'):
                group_020_1.inputs[1].enabled = True
            if hasattr(group_020_1.inputs[1], 'hide'):
                group_020_1.inputs[1].hide = False
            if hasattr(group_020_1.inputs[1], 'hide_value'):
                group_020_1.inputs[1].hide_value = False
            if hasattr(group_020_1.inputs[1], 'name'):
                group_020_1.inputs[1].name = 'Mask_0'
            if hasattr(group_020_1.inputs[1], 'show_expanded'):
                group_020_1.inputs[1].show_expanded = False
            if hasattr(group_020_1.inputs[2], 'default_value'):
                group_020_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_020_1.inputs[2], 'display_shape'):
                group_020_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_020_1.inputs[2], 'enabled'):
                group_020_1.inputs[2].enabled = True
            if hasattr(group_020_1.inputs[10], 'display_shape'):
                group_020_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_020_1.inputs[10], 'enabled'):
                group_020_1.inputs[10].enabled = True
            if hasattr(group_020_1.inputs[10], 'hide'):
                group_020_1.inputs[10].hide = False
            if hasattr(group_020_1.inputs[10], 'hide_value'):
                group_020_1.inputs[10].hide_value = False
            if hasattr(group_020_1.inputs[10], 'name'):
                group_020_1.inputs[10].name = 'Dust'
            if hasattr(group_020_1.inputs[10], 'show_expanded'):
                group_020_1.inputs[10].show_expanded = False
            if hasattr(group_020_1.outputs[0], 'default_value'):
                group_020_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_020_1.outputs[0], 'display_shape'):
                group_020_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_020_1.outputs[0], 'enabled'):
                group_020_1.outputs[0].enabled = True
            if hasattr(group_020_1.outputs[0], 'hide'):
                group_020_1.outputs[0].hide = False
            if hasattr(group_020_1.outputs[0], 'hide_value'):
                group_020_1.outputs[0].hide_value = False
            if hasattr(group_020_1.outputs[0], 'name'):
                group_020_1.outputs[0].name = 'Color'
            if hasattr(group_020_1.outputs[0], 'show_expanded'):
                group_020_1.outputs[0].show_expanded = False

            group_017_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_017_1, 'node_tree'):
                group_017_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter noGrime')
            if hasattr(group_017_1, 'color'):
                group_017_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_017_1, 'hide'):
                group_017_1.hide = False
            if hasattr(group_017_1, 'location'):
                group_017_1.location = (-1689.9661865234375, 366.7505798339844)
            if hasattr(group_017_1, 'mute'):
                group_017_1.mute = False
            if hasattr(group_017_1, 'name'):
                group_017_1.name = 'Group.017'
            if hasattr(group_017_1, 'use_custom_color'):
                group_017_1.use_custom_color = False
            if hasattr(group_017_1, 'width'):
                group_017_1.width = 239.53497314453125

            node_tree2 = bpy.data.node_groups.get('Infinite Masking Sorter')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Masking Sorter', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketColor', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketColor', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-800.0, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-700.0, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-600.0, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-500.0, -20.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-400.0, -40.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_003_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_003_2, 'mode'):
                    separate_rgb_003_2.mode = 'RGB'
                if hasattr(separate_rgb_003_2, 'color'):
                    separate_rgb_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_003_2, 'hide'):
                    separate_rgb_003_2.hide = False
                if hasattr(separate_rgb_003_2, 'location'):
                    separate_rgb_003_2.location = (-400.0, -20.0)
                if hasattr(separate_rgb_003_2, 'mute'):
                    separate_rgb_003_2.mute = False
                if hasattr(separate_rgb_003_2, 'name'):
                    separate_rgb_003_2.name = 'Separate RGB.003'
                if hasattr(separate_rgb_003_2, 'use_custom_color'):
                    separate_rgb_003_2.use_custom_color = False
                if hasattr(separate_rgb_003_2, 'width'):
                    separate_rgb_003_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_003_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-500.0, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-900.0, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.5
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.5
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 1'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 2'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 3'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 4'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Slot 5'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Slot 6'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Grime'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Dust'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-400.0, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'SUBTRACT'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-300.0, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'SUBTRACT'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = False
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'RGBA'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Grime'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-200.0, -20.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-300.0, -40.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = True
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'RGBA'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-100.0, 0.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-300.0, -20.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'ADD'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-200.0, 0.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[6], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[10], mix_004_2.inputs[7])
                node_tree2.links.new(mix_006_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_003_2.inputs[0])
                node_tree2.links.new(mix_004_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(mix_005_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(math_002_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[11], mix_005_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[12], mix_006_2.inputs[7])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], math_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], math_2.inputs[0])
                node_tree2.links.new(math_2.outputs[0], math_002_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], math_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[2], math_002_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[1])

            group_019_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_019_1, 'node_tree'):
                group_019_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter')
            if hasattr(group_019_1, 'color'):
                group_019_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_019_1, 'hide'):
                group_019_1.hide = False
            if hasattr(group_019_1, 'location'):
                group_019_1.location = (-1693.8319091796875, -700.814697265625)
            if hasattr(group_019_1, 'mute'):
                group_019_1.mute = False
            if hasattr(group_019_1, 'name'):
                group_019_1.name = 'Group.019'
            if hasattr(group_019_1, 'use_custom_color'):
                group_019_1.use_custom_color = False
            if hasattr(group_019_1, 'width'):
                group_019_1.width = 241.806396484375
            if hasattr(group_019_1.inputs[0], 'default_value'):
                group_019_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_019_1.inputs[0], 'display_shape'):
                group_019_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[0], 'enabled'):
                group_019_1.inputs[0].enabled = True
            if hasattr(group_019_1.inputs[0], 'hide'):
                group_019_1.inputs[0].hide = False
            if hasattr(group_019_1.inputs[0], 'hide_value'):
                group_019_1.inputs[0].hide_value = False
            if hasattr(group_019_1.inputs[0], 'name'):
                group_019_1.inputs[0].name = 'ASG'
            if hasattr(group_019_1.inputs[0], 'show_expanded'):
                group_019_1.inputs[0].show_expanded = False
            if hasattr(group_019_1.inputs[1], 'default_value'):
                group_019_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[1], 'display_shape'):
                group_019_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[1], 'enabled'):
                group_019_1.inputs[1].enabled = True
            if hasattr(group_019_1.inputs[1], 'hide'):
                group_019_1.inputs[1].hide = False
            if hasattr(group_019_1.inputs[1], 'hide_value'):
                group_019_1.inputs[1].hide_value = False
            if hasattr(group_019_1.inputs[1], 'name'):
                group_019_1.inputs[1].name = 'Mask_0'
            if hasattr(group_019_1.inputs[1], 'show_expanded'):
                group_019_1.inputs[1].show_expanded = False
            if hasattr(group_019_1.inputs[2], 'default_value'):
                group_019_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[2], 'display_shape'):
                group_019_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[2], 'enabled'):
                group_019_1.inputs[2].enabled = True
            if hasattr(group_019_1.inputs[2], 'hide'):
                group_019_1.inputs[2].hide = False
            if hasattr(group_019_1.inputs[2], 'hide_value'):
                group_019_1.inputs[2].hide_value = False
            if hasattr(group_019_1.inputs[2], 'name'):
                group_019_1.inputs[2].name = 'Mask_1'
            if hasattr(group_019_1.inputs[2], 'show_expanded'):
                group_019_1.inputs[2].show_expanded = False
            if hasattr(group_019_1.inputs[3], 'default_value'):
                group_019_1.inputs[3].default_value = 0.5
            if hasattr(group_019_1.inputs[3], 'display_shape'):
                group_019_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[3], 'enabled'):
                group_019_1.inputs[3].enabled = True
            if hasattr(group_019_1.inputs[3], 'hide'):
                group_019_1.inputs[3].hide = False
            if hasattr(group_019_1.inputs[3], 'hide_value'):
                group_019_1.inputs[3].hide_value = False
            if hasattr(group_019_1.inputs[3], 'name'):
                group_019_1.inputs[3].name = 'Grime Amount'
            if hasattr(group_019_1.inputs[3], 'show_expanded'):
                group_019_1.inputs[3].show_expanded = False
            if hasattr(group_019_1.inputs[4], 'default_value'):
                group_019_1.inputs[4].default_value = 0.5
            if hasattr(group_019_1.inputs[4], 'display_shape'):
                group_019_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[4], 'enabled'):
                group_019_1.inputs[4].enabled = True
            if hasattr(group_019_1.inputs[4], 'hide'):
                group_019_1.inputs[4].hide = False
            if hasattr(group_019_1.inputs[4], 'hide_value'):
                group_019_1.inputs[4].hide_value = False
            if hasattr(group_019_1.inputs[4], 'name'):
                group_019_1.inputs[4].name = 'Dust Amount'
            if hasattr(group_019_1.inputs[4], 'show_expanded'):
                group_019_1.inputs[4].show_expanded = False
            if hasattr(group_019_1.inputs[5], 'default_value'):
                group_019_1.inputs[5].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[5], 'display_shape'):
                group_019_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[5], 'enabled'):
                group_019_1.inputs[5].enabled = True
            if hasattr(group_019_1.inputs[5], 'hide'):
                group_019_1.inputs[5].hide = False
            if hasattr(group_019_1.inputs[5], 'hide_value'):
                group_019_1.inputs[5].hide_value = False
            if hasattr(group_019_1.inputs[5], 'name'):
                group_019_1.inputs[5].name = 'Slot 1'
            if hasattr(group_019_1.inputs[5], 'show_expanded'):
                group_019_1.inputs[5].show_expanded = False
            if hasattr(group_019_1.inputs[6], 'default_value'):
                group_019_1.inputs[6].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[6], 'display_shape'):
                group_019_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[6], 'enabled'):
                group_019_1.inputs[6].enabled = True
            if hasattr(group_019_1.inputs[6], 'hide'):
                group_019_1.inputs[6].hide = False
            if hasattr(group_019_1.inputs[6], 'hide_value'):
                group_019_1.inputs[6].hide_value = False
            if hasattr(group_019_1.inputs[6], 'name'):
                group_019_1.inputs[6].name = 'Slot 2'
            if hasattr(group_019_1.inputs[6], 'show_expanded'):
                group_019_1.inputs[6].show_expanded = False
            if hasattr(group_019_1.inputs[7], 'default_value'):
                group_019_1.inputs[7].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[7], 'display_shape'):
                group_019_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[7], 'enabled'):
                group_019_1.inputs[7].enabled = True
            if hasattr(group_019_1.inputs[7], 'hide'):
                group_019_1.inputs[7].hide = False
            if hasattr(group_019_1.inputs[7], 'hide_value'):
                group_019_1.inputs[7].hide_value = False
            if hasattr(group_019_1.inputs[7], 'name'):
                group_019_1.inputs[7].name = 'Slot 3'
            if hasattr(group_019_1.inputs[7], 'show_expanded'):
                group_019_1.inputs[7].show_expanded = False
            if hasattr(group_019_1.inputs[8], 'default_value'):
                group_019_1.inputs[8].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[8], 'display_shape'):
                group_019_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[8], 'enabled'):
                group_019_1.inputs[8].enabled = True
            if hasattr(group_019_1.inputs[8], 'hide'):
                group_019_1.inputs[8].hide = False
            if hasattr(group_019_1.inputs[8], 'hide_value'):
                group_019_1.inputs[8].hide_value = False
            if hasattr(group_019_1.inputs[8], 'name'):
                group_019_1.inputs[8].name = 'Slot 4'
            if hasattr(group_019_1.inputs[8], 'show_expanded'):
                group_019_1.inputs[8].show_expanded = False
            if hasattr(group_019_1.inputs[9], 'default_value'):
                group_019_1.inputs[9].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[9], 'display_shape'):
                group_019_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[9], 'enabled'):
                group_019_1.inputs[9].enabled = True
            if hasattr(group_019_1.inputs[9], 'hide'):
                group_019_1.inputs[9].hide = False
            if hasattr(group_019_1.inputs[9], 'hide_value'):
                group_019_1.inputs[9].hide_value = False
            if hasattr(group_019_1.inputs[9], 'name'):
                group_019_1.inputs[9].name = 'Slot 5'
            if hasattr(group_019_1.inputs[9], 'show_expanded'):
                group_019_1.inputs[9].show_expanded = False
            if hasattr(group_019_1.inputs[10], 'default_value'):
                group_019_1.inputs[10].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_019_1.inputs[10], 'display_shape'):
                group_019_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[10], 'enabled'):
                group_019_1.inputs[10].enabled = True
            if hasattr(group_019_1.inputs[10], 'hide'):
                group_019_1.inputs[10].hide = False
            if hasattr(group_019_1.inputs[10], 'hide_value'):
                group_019_1.inputs[10].hide_value = False
            if hasattr(group_019_1.inputs[10], 'name'):
                group_019_1.inputs[10].name = 'Slot 6'
            if hasattr(group_019_1.inputs[10], 'show_expanded'):
                group_019_1.inputs[10].show_expanded = False
            if hasattr(group_019_1.inputs[11], 'default_value'):
                group_019_1.inputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_019_1.inputs[11], 'display_shape'):
                group_019_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[11], 'enabled'):
                group_019_1.inputs[11].enabled = True
            if hasattr(group_019_1.inputs[11], 'hide'):
                group_019_1.inputs[11].hide = False
            if hasattr(group_019_1.inputs[11], 'hide_value'):
                group_019_1.inputs[11].hide_value = False
            if hasattr(group_019_1.inputs[11], 'name'):
                group_019_1.inputs[11].name = 'Grime'
            if hasattr(group_019_1.inputs[11], 'show_expanded'):
                group_019_1.inputs[11].show_expanded = False
            if hasattr(group_019_1.inputs[12], 'default_value'):
                group_019_1.inputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_019_1.inputs[12], 'display_shape'):
                group_019_1.inputs[12].display_shape = 'CIRCLE'
            if hasattr(group_019_1.inputs[12], 'enabled'):
                group_019_1.inputs[12].enabled = True
            if hasattr(group_019_1.inputs[12], 'hide'):
                group_019_1.inputs[12].hide = False
            if hasattr(group_019_1.inputs[12], 'hide_value'):
                group_019_1.inputs[12].hide_value = False
            if hasattr(group_019_1.inputs[12], 'name'):
                group_019_1.inputs[12].name = 'Dust'
            if hasattr(group_019_1.inputs[12], 'show_expanded'):
                group_019_1.inputs[12].show_expanded = False
            if hasattr(group_019_1.outputs[0], 'default_value'):
                group_019_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_019_1.outputs[0], 'display_shape'):
                group_019_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_019_1.outputs[0], 'enabled'):
                group_019_1.outputs[0].enabled = True
            if hasattr(group_019_1.outputs[0], 'hide'):
                group_019_1.outputs[0].hide = False
            if hasattr(group_019_1.outputs[0], 'hide_value'):
                group_019_1.outputs[0].hide_value = False
            if hasattr(group_019_1.outputs[0], 'name'):
                group_019_1.outputs[0].name = 'Color'
            if hasattr(group_019_1.outputs[0], 'show_expanded'):
                group_019_1.outputs[0].show_expanded = False

            group_023_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_023_1, 'node_tree'):
                group_023_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter')
            if hasattr(group_023_1, 'color'):
                group_023_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_023_1, 'hide'):
                group_023_1.hide = False
            if hasattr(group_023_1, 'location'):
                group_023_1.location = (-1702.3663330078125, -1467.1307373046875)
            if hasattr(group_023_1, 'mute'):
                group_023_1.mute = False
            if hasattr(group_023_1, 'name'):
                group_023_1.name = 'Group.023'
            if hasattr(group_023_1, 'use_custom_color'):
                group_023_1.use_custom_color = False
            if hasattr(group_023_1, 'width'):
                group_023_1.width = 241.806396484375
            if hasattr(group_023_1.inputs[0], 'default_value'):
                group_023_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_023_1.inputs[0], 'display_shape'):
                group_023_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[0], 'enabled'):
                group_023_1.inputs[0].enabled = True
            if hasattr(group_023_1.inputs[0], 'hide'):
                group_023_1.inputs[0].hide = False
            if hasattr(group_023_1.inputs[0], 'hide_value'):
                group_023_1.inputs[0].hide_value = False
            if hasattr(group_023_1.inputs[0], 'name'):
                group_023_1.inputs[0].name = 'ASG'
            if hasattr(group_023_1.inputs[0], 'show_expanded'):
                group_023_1.inputs[0].show_expanded = False
            if hasattr(group_023_1.inputs[1], 'default_value'):
                group_023_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[1], 'display_shape'):
                group_023_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[1], 'enabled'):
                group_023_1.inputs[1].enabled = True
            if hasattr(group_023_1.inputs[1], 'hide'):
                group_023_1.inputs[1].hide = False
            if hasattr(group_023_1.inputs[1], 'hide_value'):
                group_023_1.inputs[1].hide_value = False
            if hasattr(group_023_1.inputs[1], 'name'):
                group_023_1.inputs[1].name = 'Mask_0'
            if hasattr(group_023_1.inputs[1], 'show_expanded'):
                group_023_1.inputs[1].show_expanded = False
            if hasattr(group_023_1.inputs[2], 'default_value'):
                group_023_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[2], 'display_shape'):
                group_023_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[2], 'enabled'):
                group_023_1.inputs[2].enabled = True
            if hasattr(group_023_1.inputs[2], 'hide'):
                group_023_1.inputs[2].hide = False
            if hasattr(group_023_1.inputs[2], 'hide_value'):
                group_023_1.inputs[2].hide_value = False
            if hasattr(group_023_1.inputs[2], 'name'):
                group_023_1.inputs[2].name = 'Mask_1'
            if hasattr(group_023_1.inputs[2], 'show_expanded'):
                group_023_1.inputs[2].show_expanded = False
            if hasattr(group_023_1.inputs[3], 'default_value'):
                group_023_1.inputs[3].default_value = 0.5
            if hasattr(group_023_1.inputs[3], 'display_shape'):
                group_023_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[3], 'enabled'):
                group_023_1.inputs[3].enabled = True
            if hasattr(group_023_1.inputs[3], 'hide'):
                group_023_1.inputs[3].hide = False
            if hasattr(group_023_1.inputs[3], 'hide_value'):
                group_023_1.inputs[3].hide_value = False
            if hasattr(group_023_1.inputs[3], 'name'):
                group_023_1.inputs[3].name = 'Grime Amount'
            if hasattr(group_023_1.inputs[3], 'show_expanded'):
                group_023_1.inputs[3].show_expanded = False
            if hasattr(group_023_1.inputs[4], 'default_value'):
                group_023_1.inputs[4].default_value = 0.5
            if hasattr(group_023_1.inputs[4], 'display_shape'):
                group_023_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[4], 'enabled'):
                group_023_1.inputs[4].enabled = True
            if hasattr(group_023_1.inputs[4], 'hide'):
                group_023_1.inputs[4].hide = False
            if hasattr(group_023_1.inputs[4], 'hide_value'):
                group_023_1.inputs[4].hide_value = False
            if hasattr(group_023_1.inputs[4], 'name'):
                group_023_1.inputs[4].name = 'Dust Amount'
            if hasattr(group_023_1.inputs[4], 'show_expanded'):
                group_023_1.inputs[4].show_expanded = False
            if hasattr(group_023_1.inputs[5], 'default_value'):
                group_023_1.inputs[5].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[5], 'display_shape'):
                group_023_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[5], 'enabled'):
                group_023_1.inputs[5].enabled = True
            if hasattr(group_023_1.inputs[5], 'hide'):
                group_023_1.inputs[5].hide = False
            if hasattr(group_023_1.inputs[5], 'hide_value'):
                group_023_1.inputs[5].hide_value = False
            if hasattr(group_023_1.inputs[5], 'name'):
                group_023_1.inputs[5].name = 'Slot 1'
            if hasattr(group_023_1.inputs[5], 'show_expanded'):
                group_023_1.inputs[5].show_expanded = False
            if hasattr(group_023_1.inputs[6], 'default_value'):
                group_023_1.inputs[6].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[6], 'display_shape'):
                group_023_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[6], 'enabled'):
                group_023_1.inputs[6].enabled = True
            if hasattr(group_023_1.inputs[6], 'hide'):
                group_023_1.inputs[6].hide = False
            if hasattr(group_023_1.inputs[6], 'hide_value'):
                group_023_1.inputs[6].hide_value = False
            if hasattr(group_023_1.inputs[6], 'name'):
                group_023_1.inputs[6].name = 'Slot 2'
            if hasattr(group_023_1.inputs[6], 'show_expanded'):
                group_023_1.inputs[6].show_expanded = False
            if hasattr(group_023_1.inputs[7], 'default_value'):
                group_023_1.inputs[7].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[7], 'display_shape'):
                group_023_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[7], 'enabled'):
                group_023_1.inputs[7].enabled = True
            if hasattr(group_023_1.inputs[7], 'hide'):
                group_023_1.inputs[7].hide = False
            if hasattr(group_023_1.inputs[7], 'hide_value'):
                group_023_1.inputs[7].hide_value = False
            if hasattr(group_023_1.inputs[7], 'name'):
                group_023_1.inputs[7].name = 'Slot 3'
            if hasattr(group_023_1.inputs[7], 'show_expanded'):
                group_023_1.inputs[7].show_expanded = False
            if hasattr(group_023_1.inputs[8], 'default_value'):
                group_023_1.inputs[8].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[8], 'display_shape'):
                group_023_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[8], 'enabled'):
                group_023_1.inputs[8].enabled = True
            if hasattr(group_023_1.inputs[8], 'hide'):
                group_023_1.inputs[8].hide = False
            if hasattr(group_023_1.inputs[8], 'hide_value'):
                group_023_1.inputs[8].hide_value = False
            if hasattr(group_023_1.inputs[8], 'name'):
                group_023_1.inputs[8].name = 'Slot 4'
            if hasattr(group_023_1.inputs[8], 'show_expanded'):
                group_023_1.inputs[8].show_expanded = False
            if hasattr(group_023_1.inputs[9], 'default_value'):
                group_023_1.inputs[9].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[9], 'display_shape'):
                group_023_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[9], 'enabled'):
                group_023_1.inputs[9].enabled = True
            if hasattr(group_023_1.inputs[9], 'hide'):
                group_023_1.inputs[9].hide = False
            if hasattr(group_023_1.inputs[9], 'hide_value'):
                group_023_1.inputs[9].hide_value = False
            if hasattr(group_023_1.inputs[9], 'name'):
                group_023_1.inputs[9].name = 'Slot 5'
            if hasattr(group_023_1.inputs[9], 'show_expanded'):
                group_023_1.inputs[9].show_expanded = False
            if hasattr(group_023_1.inputs[10], 'default_value'):
                group_023_1.inputs[10].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_023_1.inputs[10], 'display_shape'):
                group_023_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[10], 'enabled'):
                group_023_1.inputs[10].enabled = True
            if hasattr(group_023_1.inputs[10], 'hide'):
                group_023_1.inputs[10].hide = False
            if hasattr(group_023_1.inputs[10], 'hide_value'):
                group_023_1.inputs[10].hide_value = False
            if hasattr(group_023_1.inputs[10], 'name'):
                group_023_1.inputs[10].name = 'Slot 6'
            if hasattr(group_023_1.inputs[10], 'show_expanded'):
                group_023_1.inputs[10].show_expanded = False
            if hasattr(group_023_1.inputs[11], 'default_value'):
                group_023_1.inputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_023_1.inputs[11], 'display_shape'):
                group_023_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[11], 'enabled'):
                group_023_1.inputs[11].enabled = True
            if hasattr(group_023_1.inputs[11], 'hide'):
                group_023_1.inputs[11].hide = False
            if hasattr(group_023_1.inputs[11], 'hide_value'):
                group_023_1.inputs[11].hide_value = False
            if hasattr(group_023_1.inputs[11], 'name'):
                group_023_1.inputs[11].name = 'Grime'
            if hasattr(group_023_1.inputs[11], 'show_expanded'):
                group_023_1.inputs[11].show_expanded = False
            if hasattr(group_023_1.inputs[12], 'default_value'):
                group_023_1.inputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_023_1.inputs[12], 'display_shape'):
                group_023_1.inputs[12].display_shape = 'CIRCLE'
            if hasattr(group_023_1.inputs[12], 'enabled'):
                group_023_1.inputs[12].enabled = True
            if hasattr(group_023_1.inputs[12], 'hide'):
                group_023_1.inputs[12].hide = False
            if hasattr(group_023_1.inputs[12], 'hide_value'):
                group_023_1.inputs[12].hide_value = False
            if hasattr(group_023_1.inputs[12], 'name'):
                group_023_1.inputs[12].name = 'Dust'
            if hasattr(group_023_1.inputs[12], 'show_expanded'):
                group_023_1.inputs[12].show_expanded = False
            if hasattr(group_023_1.outputs[0], 'default_value'):
                group_023_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_023_1.outputs[0], 'display_shape'):
                group_023_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_023_1.outputs[0], 'enabled'):
                group_023_1.outputs[0].enabled = True
            if hasattr(group_023_1.outputs[0], 'hide'):
                group_023_1.outputs[0].hide = False
            if hasattr(group_023_1.outputs[0], 'hide_value'):
                group_023_1.outputs[0].hide_value = False
            if hasattr(group_023_1.outputs[0], 'name'):
                group_023_1.outputs[0].name = 'Color'
            if hasattr(group_023_1.outputs[0], 'show_expanded'):
                group_023_1.outputs[0].show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Color')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Color', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG Control')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG Control'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketColor', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketColor', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                input = node_tree2.inputs.new('NodeSocketColor', 'Scratch')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (1.0, 1.0, 1.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Scratch'
                input = node_tree2.inputs.new('NodeSocketColor', 'Emblem')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Emblem'
                input = node_tree2.inputs.new('NodeSocketColor', 'Emblem_Alpha')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Emblem_Alpha'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 2.0
                if hasattr(input, 'min_value'):
                    input.min_value = 0.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Scratch Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Scratch Amount'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-1855.016845703125, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-2633.35595703125, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-1047.50830078125, 0.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'SUBTRACT'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-807.5083618164062, -174.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-807.5083618164062, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'SUBTRACT'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-538.3388671875, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'ADD'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_003_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_003_2, 'mode'):
                    separate_rgb_003_2.mode = 'RGB'
                if hasattr(separate_rgb_003_2, 'color'):
                    separate_rgb_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_003_2, 'hide'):
                    separate_rgb_003_2.hide = False
                if hasattr(separate_rgb_003_2, 'location'):
                    separate_rgb_003_2.location = (-1316.6778564453125, 0.0)
                if hasattr(separate_rgb_003_2, 'mute'):
                    separate_rgb_003_2.mute = False
                if hasattr(separate_rgb_003_2, 'name'):
                    separate_rgb_003_2.name = 'Separate RGB.003'
                if hasattr(separate_rgb_003_2, 'use_custom_color'):
                    separate_rgb_003_2.use_custom_color = False
                if hasattr(separate_rgb_003_2, 'width'):
                    separate_rgb_003_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_003_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_004_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_004_2, 'color'):
                    math_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_004_2, 'hide'):
                    math_004_2.hide = False
                if hasattr(math_004_2, 'location'):
                    math_004_2.location = (-1316.6778564453125, -169.0)
                if hasattr(math_004_2, 'mute'):
                    math_004_2.mute = False
                if hasattr(math_004_2, 'name'):
                    math_004_2.name = 'Math.004'
                if hasattr(math_004_2, 'operation'):
                    math_004_2.operation = 'SUBTRACT'
                if hasattr(math_004_2, 'use_clamp'):
                    math_004_2.use_clamp = False
                if hasattr(math_004_2, 'use_custom_color'):
                    math_004_2.use_custom_color = False
                if hasattr(math_004_2, 'width'):
                    math_004_2.width = 140.0
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_004_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_005_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_005_2, 'color'):
                    math_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_005_2, 'hide'):
                    math_005_2.hide = False
                if hasattr(math_005_2, 'location'):
                    math_005_2.location = (-1047.50830078125, -174.0)
                if hasattr(math_005_2, 'mute'):
                    math_005_2.mute = False
                if hasattr(math_005_2, 'name'):
                    math_005_2.name = 'Math.005'
                if hasattr(math_005_2, 'operation'):
                    math_005_2.operation = 'ADD'
                if hasattr(math_005_2, 'use_clamp'):
                    math_005_2.use_clamp = False
                if hasattr(math_005_2, 'use_custom_color'):
                    math_005_2.use_custom_color = False
                if hasattr(math_005_2, 'width'):
                    math_005_2.width = 140.0
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_005_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-2878.9443359375, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG Control'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Slot 1'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Slot 2'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 3'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 4'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 5'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 6'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Grime'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Dust'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = (1.0, 1.0, 1.0, 1.0)
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Scratch'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Emblem'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False
                if hasattr(group_input_2.outputs[13], 'default_value'):
                    group_input_2.outputs[13].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[13], 'display_shape'):
                    group_input_2.outputs[13].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[13], 'enabled'):
                    group_input_2.outputs[13].enabled = True
                if hasattr(group_input_2.outputs[13], 'hide'):
                    group_input_2.outputs[13].hide = False
                if hasattr(group_input_2.outputs[13], 'hide_value'):
                    group_input_2.outputs[13].hide_value = False
                if hasattr(group_input_2.outputs[13], 'name'):
                    group_input_2.outputs[13].name = 'Emblem_Alpha'
                if hasattr(group_input_2.outputs[13], 'show_expanded'):
                    group_input_2.outputs[13].show_expanded = False
                if hasattr(group_input_2.outputs[14], 'default_value'):
                    group_input_2.outputs[14].default_value = 0.0
                if hasattr(group_input_2.outputs[14], 'display_shape'):
                    group_input_2.outputs[14].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[14], 'enabled'):
                    group_input_2.outputs[14].enabled = True
                if hasattr(group_input_2.outputs[14], 'hide'):
                    group_input_2.outputs[14].hide = False
                if hasattr(group_input_2.outputs[14], 'hide_value'):
                    group_input_2.outputs[14].hide_value = False
                if hasattr(group_input_2.outputs[14], 'name'):
                    group_input_2.outputs[14].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[14], 'show_expanded'):
                    group_input_2.outputs[14].show_expanded = False
                if hasattr(group_input_2.outputs[15], 'default_value'):
                    group_input_2.outputs[15].default_value = 1.0
                if hasattr(group_input_2.outputs[15], 'display_shape'):
                    group_input_2.outputs[15].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[15], 'enabled'):
                    group_input_2.outputs[15].enabled = True
                if hasattr(group_input_2.outputs[15], 'hide'):
                    group_input_2.outputs[15].hide = False
                if hasattr(group_input_2.outputs[15], 'hide_value'):
                    group_input_2.outputs[15].hide_value = False
                if hasattr(group_input_2.outputs[15], 'name'):
                    group_input_2.outputs[15].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[15], 'show_expanded'):
                    group_input_2.outputs[15].show_expanded = False
                if hasattr(group_input_2.outputs[16], 'default_value'):
                    group_input_2.outputs[16].default_value = 0.0
                if hasattr(group_input_2.outputs[16], 'display_shape'):
                    group_input_2.outputs[16].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[16], 'enabled'):
                    group_input_2.outputs[16].enabled = True
                if hasattr(group_input_2.outputs[16], 'hide'):
                    group_input_2.outputs[16].hide = False
                if hasattr(group_input_2.outputs[16], 'hide_value'):
                    group_input_2.outputs[16].hide_value = False
                if hasattr(group_input_2.outputs[16], 'name'):
                    group_input_2.outputs[16].name = 'Scratch Amount'
                if hasattr(group_input_2.outputs[16], 'show_expanded'):
                    group_input_2.outputs[16].show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-2124.186279296875, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-1316.6778564453125, -343.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = False
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'RGBA'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-538.3388671875, -174.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = True
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'RGBA'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Grime'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-269.16943359375, 0.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-2393.35595703125, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_007_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_007_2, 'blend_type'):
                    mix_007_2.blend_type = 'MIX'
                if hasattr(mix_007_2, 'clamp_factor'):
                    mix_007_2.clamp_factor = True
                if hasattr(mix_007_2, 'clamp_result'):
                    mix_007_2.clamp_result = False
                if hasattr(mix_007_2, 'color'):
                    mix_007_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_007_2, 'data_type'):
                    mix_007_2.data_type = 'RGBA'
                if hasattr(mix_007_2, 'factor_mode'):
                    mix_007_2.factor_mode = 'UNIFORM'
                if hasattr(mix_007_2, 'hide'):
                    mix_007_2.hide = False
                if hasattr(mix_007_2, 'label'):
                    mix_007_2.label = 'Scratch'
                if hasattr(mix_007_2, 'location'):
                    mix_007_2.location = (-807.5083618164062, -348.0)
                if hasattr(mix_007_2, 'mute'):
                    mix_007_2.mute = False
                if hasattr(mix_007_2, 'name'):
                    mix_007_2.name = 'Mix.007'
                if hasattr(mix_007_2, 'use_custom_color'):
                    mix_007_2.use_custom_color = False
                if hasattr(mix_007_2, 'width'):
                    mix_007_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_008_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_008_2, 'blend_type'):
                    mix_008_2.blend_type = 'MIX'
                if hasattr(mix_008_2, 'clamp_factor'):
                    mix_008_2.clamp_factor = True
                if hasattr(mix_008_2, 'clamp_result'):
                    mix_008_2.clamp_result = False
                if hasattr(mix_008_2, 'color'):
                    mix_008_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_008_2, 'data_type'):
                    mix_008_2.data_type = 'RGBA'
                if hasattr(mix_008_2, 'factor_mode'):
                    mix_008_2.factor_mode = 'UNIFORM'
                if hasattr(mix_008_2, 'hide'):
                    mix_008_2.hide = False
                if hasattr(mix_008_2, 'label'):
                    mix_008_2.label = 'Emblem'
                if hasattr(mix_008_2, 'location'):
                    mix_008_2.location = (-1047.50830078125, -348.0)
                if hasattr(mix_008_2, 'mute'):
                    mix_008_2.mute = False
                if hasattr(mix_008_2, 'name'):
                    mix_008_2.name = 'Mix.008'
                if hasattr(mix_008_2, 'use_custom_color'):
                    mix_008_2.use_custom_color = False
                if hasattr(mix_008_2, 'width'):
                    mix_008_2.width = 140.0
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_008_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_008_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_008_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_008_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-1585.847412109375, 0.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-1855.016845703125, -169.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[6], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_004_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[11], mix_007_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_005_2.inputs[7])
                node_tree2.links.new(mix_005_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(mix_007_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(mix_006_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(math_2.outputs[0], math_001_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[2], math_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[14], math_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(math_002_2.outputs[0], math_003_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[15], math_002_2.inputs[0])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(math_004_2.outputs[0], math_005_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[16], math_004_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[1], math_005_2.inputs[0])
                node_tree2.links.new(math_005_2.outputs[0], mix_007_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[13], mix_008_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[12], mix_008_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[3], mix_2.inputs[6])
                node_tree2.links.new(mix_004_2.outputs[2], mix_008_2.inputs[6])
                node_tree2.links.new(mix_008_2.outputs[2], mix_007_2.inputs[6])

            group_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_1, 'node_tree'):
                group_1.node_tree = bpy.data.node_groups.get('Infinite Color')
            if hasattr(group_1, 'color'):
                group_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_1, 'hide'):
                group_1.hide = False
            if hasattr(group_1, 'label'):
                group_1.label = 'Color'
            if hasattr(group_1, 'location'):
                group_1.location = (-53.98965072631836, 1419.260498046875)
            if hasattr(group_1, 'mute'):
                group_1.mute = False
            if hasattr(group_1, 'name'):
                group_1.name = 'Group'
            if hasattr(group_1, 'use_custom_color'):
                group_1.use_custom_color = False
            if hasattr(group_1, 'width'):
                group_1.width = 212.21826171875
            if hasattr(group_1.inputs[0], 'default_value'):
                group_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_1.inputs[0], 'display_shape'):
                group_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[0], 'enabled'):
                group_1.inputs[0].enabled = True
            if hasattr(group_1.inputs[0], 'hide'):
                group_1.inputs[0].hide = False
            if hasattr(group_1.inputs[0], 'hide_value'):
                group_1.inputs[0].hide_value = False
            if hasattr(group_1.inputs[0], 'name'):
                group_1.inputs[0].name = 'ASG Control'
            if hasattr(group_1.inputs[0], 'show_expanded'):
                group_1.inputs[0].show_expanded = False
            if hasattr(group_1.inputs[1], 'default_value'):
                group_1.inputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_1.inputs[1], 'display_shape'):
                group_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[1], 'enabled'):
                group_1.inputs[1].enabled = True
            if hasattr(group_1.inputs[1], 'hide'):
                group_1.inputs[1].hide = False
            if hasattr(group_1.inputs[1], 'hide_value'):
                group_1.inputs[1].hide_value = False
            if hasattr(group_1.inputs[1], 'name'):
                group_1.inputs[1].name = 'Mask_0'
            if hasattr(group_1.inputs[1], 'show_expanded'):
                group_1.inputs[1].show_expanded = False
            if hasattr(group_1.inputs[2], 'default_value'):
                group_1.inputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_1.inputs[2], 'display_shape'):
                group_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[2], 'enabled'):
                group_1.inputs[2].enabled = True
            if hasattr(group_1.inputs[2], 'hide'):
                group_1.inputs[2].hide = False
            if hasattr(group_1.inputs[2], 'hide_value'):
                group_1.inputs[2].hide_value = False
            if hasattr(group_1.inputs[2], 'name'):
                group_1.inputs[2].name = 'Mask_1'
            if hasattr(group_1.inputs[2], 'show_expanded'):
                group_1.inputs[2].show_expanded = False
            if hasattr(group_1.inputs[3], 'default_value'):
                group_1.inputs[3].default_value = (0.14995989203453064, 0.20155631005764008, 0.06124607473611832, 1.0)
            if hasattr(group_1.inputs[3], 'display_shape'):
                group_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[3], 'enabled'):
                group_1.inputs[3].enabled = True
            if hasattr(group_1.inputs[3], 'hide'):
                group_1.inputs[3].hide = False
            if hasattr(group_1.inputs[3], 'hide_value'):
                group_1.inputs[3].hide_value = False
            if hasattr(group_1.inputs[3], 'name'):
                group_1.inputs[3].name = 'Slot 1'
            if hasattr(group_1.inputs[3], 'show_expanded'):
                group_1.inputs[3].show_expanded = False
            if hasattr(group_1.inputs[4], 'default_value'):
                group_1.inputs[4].default_value = (0.14995989203453064, 0.20155631005764008, 0.06124607473611832, 1.0)
            if hasattr(group_1.inputs[4], 'display_shape'):
                group_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[4], 'enabled'):
                group_1.inputs[4].enabled = True
            if hasattr(group_1.inputs[4], 'hide'):
                group_1.inputs[4].hide = False
            if hasattr(group_1.inputs[4], 'hide_value'):
                group_1.inputs[4].hide_value = False
            if hasattr(group_1.inputs[4], 'name'):
                group_1.inputs[4].name = 'Slot 2'
            if hasattr(group_1.inputs[4], 'show_expanded'):
                group_1.inputs[4].show_expanded = False
            if hasattr(group_1.inputs[5], 'default_value'):
                group_1.inputs[5].default_value = (0.05448029935359955, 0.04666509851813316, 0.030713459476828575, 1.0)
            if hasattr(group_1.inputs[5], 'display_shape'):
                group_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[5], 'enabled'):
                group_1.inputs[5].enabled = True
            if hasattr(group_1.inputs[5], 'hide'):
                group_1.inputs[5].hide = False
            if hasattr(group_1.inputs[5], 'hide_value'):
                group_1.inputs[5].hide_value = False
            if hasattr(group_1.inputs[5], 'name'):
                group_1.inputs[5].name = 'Slot 3'
            if hasattr(group_1.inputs[5], 'show_expanded'):
                group_1.inputs[5].show_expanded = False
            if hasattr(group_1.inputs[6], 'default_value'):
                group_1.inputs[6].default_value = (0.028426000848412514, 0.030713457614183426, 0.0284260381013155, 1.0)
            if hasattr(group_1.inputs[6], 'display_shape'):
                group_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[6], 'enabled'):
                group_1.inputs[6].enabled = True
            if hasattr(group_1.inputs[6], 'hide'):
                group_1.inputs[6].hide = False
            if hasattr(group_1.inputs[6], 'hide_value'):
                group_1.inputs[6].hide_value = False
            if hasattr(group_1.inputs[6], 'name'):
                group_1.inputs[6].name = 'Slot 4'
            if hasattr(group_1.inputs[6], 'show_expanded'):
                group_1.inputs[6].show_expanded = False
            if hasattr(group_1.inputs[7], 'default_value'):
                group_1.inputs[7].default_value = (0.3817319869995117, 0.3817319869995117, 0.3817319869995117, 1.0)
            if hasattr(group_1.inputs[7], 'display_shape'):
                group_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[7], 'enabled'):
                group_1.inputs[7].enabled = True
            if hasattr(group_1.inputs[7], 'hide'):
                group_1.inputs[7].hide = False
            if hasattr(group_1.inputs[7], 'hide_value'):
                group_1.inputs[7].hide_value = False
            if hasattr(group_1.inputs[7], 'name'):
                group_1.inputs[7].name = 'Slot 5'
            if hasattr(group_1.inputs[7], 'show_expanded'):
                group_1.inputs[7].show_expanded = False
            if hasattr(group_1.inputs[8], 'default_value'):
                group_1.inputs[8].default_value = (0.4280591905117035, 0.4280591905117035, 0.4280591905117035, 1.0)
            if hasattr(group_1.inputs[8], 'display_shape'):
                group_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[8], 'enabled'):
                group_1.inputs[8].enabled = True
            if hasattr(group_1.inputs[8], 'hide'):
                group_1.inputs[8].hide = False
            if hasattr(group_1.inputs[8], 'hide_value'):
                group_1.inputs[8].hide_value = False
            if hasattr(group_1.inputs[8], 'name'):
                group_1.inputs[8].name = 'Slot 6'
            if hasattr(group_1.inputs[8], 'show_expanded'):
                group_1.inputs[8].show_expanded = False
            if hasattr(group_1.inputs[9], 'default_value'):
                group_1.inputs[9].default_value = (0.051607925444841385, 0.039593372493982315, 0.031214507296681404, 1.0)
            if hasattr(group_1.inputs[9], 'display_shape'):
                group_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[9], 'enabled'):
                group_1.inputs[9].enabled = True
            if hasattr(group_1.inputs[9], 'hide'):
                group_1.inputs[9].hide = False
            if hasattr(group_1.inputs[9], 'hide_value'):
                group_1.inputs[9].hide_value = False
            if hasattr(group_1.inputs[9], 'name'):
                group_1.inputs[9].name = 'Grime'
            if hasattr(group_1.inputs[9], 'show_expanded'):
                group_1.inputs[9].show_expanded = False
            if hasattr(group_1.inputs[10], 'default_value'):
                group_1.inputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_1.inputs[10], 'display_shape'):
                group_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[10], 'enabled'):
                group_1.inputs[10].enabled = True
            if hasattr(group_1.inputs[10], 'hide'):
                group_1.inputs[10].hide = False
            if hasattr(group_1.inputs[10], 'hide_value'):
                group_1.inputs[10].hide_value = False
            if hasattr(group_1.inputs[10], 'name'):
                group_1.inputs[10].name = 'Dust'
            if hasattr(group_1.inputs[10], 'show_expanded'):
                group_1.inputs[10].show_expanded = False
            if hasattr(group_1.inputs[11], 'default_value'):
                group_1.inputs[11].default_value = (0.2961384057998657, 0.29613828659057617, 0.2874408960342407, 1.0)
            if hasattr(group_1.inputs[11], 'display_shape'):
                group_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[11], 'enabled'):
                group_1.inputs[11].enabled = True
            if hasattr(group_1.inputs[11], 'hide'):
                group_1.inputs[11].hide = False
            if hasattr(group_1.inputs[11], 'hide_value'):
                group_1.inputs[11].hide_value = False
            if hasattr(group_1.inputs[11], 'name'):
                group_1.inputs[11].name = 'Scratch'
            if hasattr(group_1.inputs[11], 'show_expanded'):
                group_1.inputs[11].show_expanded = False
            if hasattr(group_1.inputs[12], 'default_value'):
                group_1.inputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_1.inputs[12], 'display_shape'):
                group_1.inputs[12].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[12], 'enabled'):
                group_1.inputs[12].enabled = True
            if hasattr(group_1.inputs[12], 'hide'):
                group_1.inputs[12].hide = False
            if hasattr(group_1.inputs[12], 'hide_value'):
                group_1.inputs[12].hide_value = False
            if hasattr(group_1.inputs[12], 'name'):
                group_1.inputs[12].name = 'Emblem'
            if hasattr(group_1.inputs[12], 'show_expanded'):
                group_1.inputs[12].show_expanded = False
            if hasattr(group_1.inputs[13], 'default_value'):
                group_1.inputs[13].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_1.inputs[13], 'display_shape'):
                group_1.inputs[13].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[13], 'enabled'):
                group_1.inputs[13].enabled = True
            if hasattr(group_1.inputs[13], 'hide'):
                group_1.inputs[13].hide = False
            if hasattr(group_1.inputs[13], 'hide_value'):
                group_1.inputs[13].hide_value = False
            if hasattr(group_1.inputs[13], 'name'):
                group_1.inputs[13].name = 'Emblem_Alpha'
            if hasattr(group_1.inputs[13], 'show_expanded'):
                group_1.inputs[13].show_expanded = False
            if hasattr(group_1.inputs[14], 'default_value'):
                group_1.inputs[14].default_value = 0.0
            if hasattr(group_1.inputs[14], 'display_shape'):
                group_1.inputs[14].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[14], 'enabled'):
                group_1.inputs[14].enabled = True
            if hasattr(group_1.inputs[14], 'hide'):
                group_1.inputs[14].hide = False
            if hasattr(group_1.inputs[14], 'hide_value'):
                group_1.inputs[14].hide_value = False
            if hasattr(group_1.inputs[14], 'name'):
                group_1.inputs[14].name = 'Grime Amount'
            if hasattr(group_1.inputs[14], 'show_expanded'):
                group_1.inputs[14].show_expanded = False
            if hasattr(group_1.inputs[15], 'default_value'):
                group_1.inputs[15].default_value = 1.0
            if hasattr(group_1.inputs[15], 'display_shape'):
                group_1.inputs[15].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[15], 'enabled'):
                group_1.inputs[15].enabled = True
            if hasattr(group_1.inputs[15], 'hide'):
                group_1.inputs[15].hide = False
            if hasattr(group_1.inputs[15], 'hide_value'):
                group_1.inputs[15].hide_value = False
            if hasattr(group_1.inputs[15], 'name'):
                group_1.inputs[15].name = 'Dust Amount'
            if hasattr(group_1.inputs[15], 'show_expanded'):
                group_1.inputs[15].show_expanded = False
            if hasattr(group_1.inputs[16], 'default_value'):
                group_1.inputs[16].default_value = 0.0
            if hasattr(group_1.inputs[16], 'display_shape'):
                group_1.inputs[16].display_shape = 'CIRCLE'
            if hasattr(group_1.inputs[16], 'enabled'):
                group_1.inputs[16].enabled = True
            if hasattr(group_1.inputs[16], 'hide'):
                group_1.inputs[16].hide = False
            if hasattr(group_1.inputs[16], 'hide_value'):
                group_1.inputs[16].hide_value = False
            if hasattr(group_1.inputs[16], 'name'):
                group_1.inputs[16].name = 'Scratch Amount'
            if hasattr(group_1.inputs[16], 'show_expanded'):
                group_1.inputs[16].show_expanded = False
            if hasattr(group_1.outputs[0], 'default_value'):
                group_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_1.outputs[0], 'display_shape'):
                group_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_1.outputs[0], 'enabled'):
                group_1.outputs[0].enabled = True
            if hasattr(group_1.outputs[0], 'hide'):
                group_1.outputs[0].hide = False
            if hasattr(group_1.outputs[0], 'hide_value'):
                group_1.outputs[0].hide_value = False
            if hasattr(group_1.outputs[0], 'name'):
                group_1.outputs[0].name = 'Color'
            if hasattr(group_1.outputs[0], 'show_expanded'):
                group_1.outputs[0].show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Matts')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Matts', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG Control')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG Control'
                input = node_tree2.inputs.new('NodeSocketColor', 'RGB Control')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'RGB Control'
                input = node_tree2.inputs.new('NodeSocketColor', 'Blue Control')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Blue Control'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = True
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Scratch')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Scratch'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Scratch Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Scratch Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 2.0
                if hasattr(input, 'min_value'):
                    input.min_value = 0.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketFloat', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'max_value'):
                    output.max_value = 3.4028234663852886e+38
                if hasattr(output, 'min_value'):
                    output.min_value = -3.4028234663852886e+38
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-1076.677978515625, 0.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'SUBTRACT'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-1615.016845703125, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-2393.35595703125, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-807.5084228515625, -174.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = True
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-807.5084228515625, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'SUBTRACT'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-538.3389282226562, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'ADD'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = True
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = 0.0
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = False
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = True
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'FLOAT'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Grime'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-269.16943359375, 0.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = False
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = False
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'FLOAT'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-538.3389282226562, -174.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = False
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'FLOAT'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-2153.35595703125, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = False
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'FLOAT'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-1884.1864013671875, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = False
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'FLOAT'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-1615.016845703125, -169.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = False
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'FLOAT'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-1345.847412109375, -343.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = False
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'FLOAT'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-1076.677978515625, -348.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_007_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_007_2, 'blend_type'):
                    mix_007_2.blend_type = 'MIX'
                if hasattr(mix_007_2, 'clamp_factor'):
                    mix_007_2.clamp_factor = False
                if hasattr(mix_007_2, 'clamp_result'):
                    mix_007_2.clamp_result = False
                if hasattr(mix_007_2, 'color'):
                    mix_007_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_007_2, 'data_type'):
                    mix_007_2.data_type = 'FLOAT'
                if hasattr(mix_007_2, 'factor_mode'):
                    mix_007_2.factor_mode = 'UNIFORM'
                if hasattr(mix_007_2, 'hide'):
                    mix_007_2.hide = False
                if hasattr(mix_007_2, 'label'):
                    mix_007_2.label = 'Scratch'
                if hasattr(mix_007_2, 'location'):
                    mix_007_2.location = (-807.5084228515625, -348.0)
                if hasattr(mix_007_2, 'mute'):
                    mix_007_2.mute = False
                if hasattr(mix_007_2, 'name'):
                    mix_007_2.name = 'Mix.007'
                if hasattr(mix_007_2, 'use_custom_color'):
                    mix_007_2.use_custom_color = False
                if hasattr(mix_007_2, 'width'):
                    mix_007_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_003_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_003_2, 'mode'):
                    separate_rgb_003_2.mode = 'RGB'
                if hasattr(separate_rgb_003_2, 'color'):
                    separate_rgb_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_003_2, 'hide'):
                    separate_rgb_003_2.hide = False
                if hasattr(separate_rgb_003_2, 'location'):
                    separate_rgb_003_2.location = (-1345.847412109375, 0.0)
                if hasattr(separate_rgb_003_2, 'mute'):
                    separate_rgb_003_2.mute = False
                if hasattr(separate_rgb_003_2, 'name'):
                    separate_rgb_003_2.name = 'Separate RGB.003'
                if hasattr(separate_rgb_003_2, 'use_custom_color'):
                    separate_rgb_003_2.use_custom_color = False
                if hasattr(separate_rgb_003_2, 'width'):
                    separate_rgb_003_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_003_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_004_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_004_2, 'color'):
                    math_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_004_2, 'hide'):
                    math_004_2.hide = False
                if hasattr(math_004_2, 'location'):
                    math_004_2.location = (-1345.847412109375, -169.0)
                if hasattr(math_004_2, 'mute'):
                    math_004_2.mute = False
                if hasattr(math_004_2, 'name'):
                    math_004_2.name = 'Math.004'
                if hasattr(math_004_2, 'operation'):
                    math_004_2.operation = 'SUBTRACT'
                if hasattr(math_004_2, 'use_clamp'):
                    math_004_2.use_clamp = False
                if hasattr(math_004_2, 'use_custom_color'):
                    math_004_2.use_custom_color = False
                if hasattr(math_004_2, 'width'):
                    math_004_2.width = 140.0
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_004_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_005_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_005_2, 'color'):
                    math_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_005_2, 'hide'):
                    math_005_2.hide = False
                if hasattr(math_005_2, 'location'):
                    math_005_2.location = (-1076.677978515625, -174.0)
                if hasattr(math_005_2, 'mute'):
                    math_005_2.mute = False
                if hasattr(math_005_2, 'name'):
                    math_005_2.name = 'Math.005'
                if hasattr(math_005_2, 'operation'):
                    math_005_2.operation = 'ADD'
                if hasattr(math_005_2, 'use_clamp'):
                    math_005_2.use_clamp = True
                if hasattr(math_005_2, 'use_custom_color'):
                    math_005_2.use_custom_color = False
                if hasattr(math_005_2, 'width'):
                    math_005_2.width = 140.0
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_005_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-2633.35595703125, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 140.0
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG Control'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'RGB Control'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Blue Control'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.0
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Slot 1'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.0
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = True
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Slot 2'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = 0.0
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 3'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = 0.0
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 4'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = 0.0
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 5'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = 0.0
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 6'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = 0.0
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Grime'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = 0.0
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Dust'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = 0.0
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Scratch'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = 0.5
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Scratch Amount'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False
                if hasattr(group_input_2.outputs[13], 'default_value'):
                    group_input_2.outputs[13].default_value = 1.0
                if hasattr(group_input_2.outputs[13], 'display_shape'):
                    group_input_2.outputs[13].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[13], 'enabled'):
                    group_input_2.outputs[13].enabled = True
                if hasattr(group_input_2.outputs[13], 'hide'):
                    group_input_2.outputs[13].hide = False
                if hasattr(group_input_2.outputs[13], 'hide_value'):
                    group_input_2.outputs[13].hide_value = False
                if hasattr(group_input_2.outputs[13], 'name'):
                    group_input_2.outputs[13].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[13], 'show_expanded'):
                    group_input_2.outputs[13].show_expanded = False
                if hasattr(group_input_2.outputs[14], 'default_value'):
                    group_input_2.outputs[14].default_value = 1.0
                if hasattr(group_input_2.outputs[14], 'display_shape'):
                    group_input_2.outputs[14].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[14], 'enabled'):
                    group_input_2.outputs[14].enabled = True
                if hasattr(group_input_2.outputs[14], 'hide'):
                    group_input_2.outputs[14].hide = False
                if hasattr(group_input_2.outputs[14], 'hide_value'):
                    group_input_2.outputs[14].hide_value = False
                if hasattr(group_input_2.outputs[14], 'name'):
                    group_input_2.outputs[14].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[14], 'show_expanded'):
                    group_input_2.outputs[14].show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[6], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_004_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[11], mix_007_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_005_2.inputs[7])
                node_tree2.links.new(mix_004_2.outputs[2], mix_007_2.inputs[6])
                node_tree2.links.new(mix_007_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(mix_006_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(math_2.outputs[0], math_001_2.inputs[1])
                node_tree2.links.new(math_002_2.outputs[0], math_003_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[2], math_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[13], math_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[14], math_002_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(math_004_2.outputs[0], math_005_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[12], math_004_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[1], math_005_2.inputs[0])
                node_tree2.links.new(math_005_2.outputs[0], mix_007_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], mix_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[3])
                node_tree2.links.new(mix_2.outputs[0], mix_001_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[3])
                node_tree2.links.new(mix_001_2.outputs[0], mix_002_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[6], mix_002_2.inputs[3])
                node_tree2.links.new(mix_002_2.outputs[0], mix_003_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[7], mix_003_2.inputs[3])
                node_tree2.links.new(mix_003_2.outputs[0], mix_004_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[8], mix_004_2.inputs[3])
                node_tree2.links.new(mix_004_2.outputs[0], mix_007_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[11], mix_007_2.inputs[3])
                node_tree2.links.new(mix_007_2.outputs[0], mix_006_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[3])
                node_tree2.links.new(mix_006_2.outputs[0], mix_005_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[9], mix_005_2.inputs[3])
                node_tree2.links.new(mix_005_2.outputs[0], group_output_2.inputs[0])

            group_001_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_001_1, 'node_tree'):
                group_001_1.node_tree = bpy.data.node_groups.get('Infinite Matts')
            if hasattr(group_001_1, 'color'):
                group_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_001_1, 'hide'):
                group_001_1.hide = False
            if hasattr(group_001_1, 'label'):
                group_001_1.label = 'Metalness'
            if hasattr(group_001_1, 'location'):
                group_001_1.location = (-49.96565628051758, 806.75048828125)
            if hasattr(group_001_1, 'mute'):
                group_001_1.mute = False
            if hasattr(group_001_1, 'name'):
                group_001_1.name = 'Group.001'
            if hasattr(group_001_1, 'use_custom_color'):
                group_001_1.use_custom_color = False
            if hasattr(group_001_1, 'width'):
                group_001_1.width = 216.826904296875

            texture_coordinate_1 = node_tree4.nodes.new('ShaderNodeTexCoord')
            if hasattr(texture_coordinate_1, 'color'):
                texture_coordinate_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(texture_coordinate_1, 'from_instancer'):
                texture_coordinate_1.from_instancer = False
            if hasattr(texture_coordinate_1, 'hide'):
                texture_coordinate_1.hide = False
            if hasattr(texture_coordinate_1, 'location'):
                texture_coordinate_1.location = (778.5026245117188, 1611.7574462890625)
            if hasattr(texture_coordinate_1, 'mute'):
                texture_coordinate_1.mute = False
            if hasattr(texture_coordinate_1, 'name'):
                texture_coordinate_1.name = 'Texture Coordinate'
            if hasattr(texture_coordinate_1, 'use_custom_color'):
                texture_coordinate_1.use_custom_color = False
            if hasattr(texture_coordinate_1, 'width'):
                texture_coordinate_1.width = 140.0
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Generated'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Generated'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Normal'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Normal'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='UV'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'UV'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Object'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Object'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Camera'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Camera'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Window'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Window'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in texture_coordinate_1.outputs if output.identifier=='Reflection'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Reflection'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            mapping_1 = node_tree4.nodes.new('ShaderNodeMapping')
            if hasattr(mapping_1, 'color'):
                mapping_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(mapping_1, 'hide'):
                mapping_1.hide = False
            if hasattr(mapping_1, 'location'):
                mapping_1.location = (1013.5719604492188, 1622.7327880859375)
            if hasattr(mapping_1, 'mute'):
                mapping_1.mute = False
            if hasattr(mapping_1, 'name'):
                mapping_1.name = 'Mapping'
            if hasattr(mapping_1, 'use_custom_color'):
                mapping_1.use_custom_color = False
            if hasattr(mapping_1, 'vector_type'):
                mapping_1.vector_type = 'POINT'
            if hasattr(mapping_1, 'width'):
                mapping_1.width = 231.29718017578125
            input_ = next((input_ for input_ in mapping_1.inputs if input_.identifier=='Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Vector'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mapping_1.inputs if input_.identifier=='Location'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Location'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mapping_1.inputs if input_.identifier=='Rotation'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Rotation'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in mapping_1.inputs if input_.identifier=='Scale'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (1.0, 1.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Scale'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in mapping_1.outputs if output.identifier=='Vector'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Vector'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            separate_rgb_001_1 = node_tree4.nodes.new('ShaderNodeSeparateColor')
            if hasattr(separate_rgb_001_1, 'mode'):
                separate_rgb_001_1.mode = 'RGB'
            if hasattr(separate_rgb_001_1, 'color'):
                separate_rgb_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(separate_rgb_001_1, 'hide'):
                separate_rgb_001_1.hide = False
            if hasattr(separate_rgb_001_1, 'location'):
                separate_rgb_001_1.location = (1729.4832763671875, 1351.5589599609375)
            if hasattr(separate_rgb_001_1, 'mute'):
                separate_rgb_001_1.mute = False
            if hasattr(separate_rgb_001_1, 'name'):
                separate_rgb_001_1.name = 'Separate RGB.001'
            if hasattr(separate_rgb_001_1, 'use_custom_color'):
                separate_rgb_001_1.use_custom_color = False
            if hasattr(separate_rgb_001_1, 'width'):
                separate_rgb_001_1.width = 140.0
            input_ = next((input_ for input_ in separate_rgb_001_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in separate_rgb_001_1.outputs if output.identifier=='Red'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Red'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in separate_rgb_001_1.outputs if output.identifier=='Green'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Green'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in separate_rgb_001_1.outputs if output.identifier=='Blue'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Blue'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            group_016_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_016_1, 'node_tree'):
                group_016_1.node_tree = bpy.data.node_groups.get('Color Mixer')
            if hasattr(group_016_1, 'color'):
                group_016_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_016_1, 'hide'):
                group_016_1.hide = False
            if hasattr(group_016_1, 'location'):
                group_016_1.location = (-1609.9658203125, 966.75048828125)
            if hasattr(group_016_1, 'mute'):
                group_016_1.mute = False
            if hasattr(group_016_1, 'name'):
                group_016_1.name = 'Group.016'
            if hasattr(group_016_1, 'use_custom_color'):
                group_016_1.use_custom_color = False
            if hasattr(group_016_1, 'width'):
                group_016_1.width = 140.0
            if hasattr(group_016_1.inputs[0], 'default_value'):
                group_016_1.inputs[0].default_value = 0.0
            if hasattr(group_016_1.inputs[0], 'display_shape'):
                group_016_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_016_1.inputs[0], 'enabled'):
                group_016_1.inputs[0].enabled = True
            if hasattr(group_016_1.inputs[0], 'hide'):
                group_016_1.inputs[0].hide = False
            if hasattr(group_016_1.inputs[0], 'hide_value'):
                group_016_1.inputs[0].hide_value = False
            if hasattr(group_016_1.inputs[0], 'name'):
                group_016_1.inputs[0].name = 'Gradient Out'
            if hasattr(group_016_1.inputs[0], 'show_expanded'):
                group_016_1.inputs[0].show_expanded = False
            if hasattr(group_016_1.inputs[1], 'default_value'):
                group_016_1.inputs[1].default_value = (0.08865560591220856, 0.06124606728553772, 0.034339822828769684, 1.0)
            if hasattr(group_016_1.inputs[1], 'display_shape'):
                group_016_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_016_1.inputs[1], 'enabled'):
                group_016_1.inputs[1].enabled = True
            if hasattr(group_016_1.inputs[1], 'hide'):
                group_016_1.inputs[1].hide = False
            if hasattr(group_016_1.inputs[1], 'hide_value'):
                group_016_1.inputs[1].hide_value = False
            if hasattr(group_016_1.inputs[1], 'name'):
                group_016_1.inputs[1].name = 'Top'
            if hasattr(group_016_1.inputs[1], 'show_expanded'):
                group_016_1.inputs[1].show_expanded = False
            if hasattr(group_016_1.inputs[2], 'default_value'):
                group_016_1.inputs[2].default_value = (0.08865560591220856, 0.06124606728553772, 0.034339822828769684, 1.0)
            if hasattr(group_016_1.inputs[2], 'display_shape'):
                group_016_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_016_1.inputs[2], 'enabled'):
                group_016_1.inputs[2].enabled = True
            if hasattr(group_016_1.inputs[2], 'hide'):
                group_016_1.inputs[2].hide = False
            if hasattr(group_016_1.inputs[2], 'hide_value'):
                group_016_1.inputs[2].hide_value = False
            if hasattr(group_016_1.inputs[2], 'name'):
                group_016_1.inputs[2].name = 'Mid'
            if hasattr(group_016_1.inputs[2], 'show_expanded'):
                group_016_1.inputs[2].show_expanded = False
            if hasattr(group_016_1.inputs[3], 'default_value'):
                group_016_1.inputs[3].default_value = (0.08865560591220856, 0.06124606728553772, 0.034339822828769684, 1.0)
            if hasattr(group_016_1.inputs[3], 'display_shape'):
                group_016_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_016_1.inputs[3], 'enabled'):
                group_016_1.inputs[3].enabled = True
            if hasattr(group_016_1.inputs[3], 'hide'):
                group_016_1.inputs[3].hide = False
            if hasattr(group_016_1.inputs[3], 'hide_value'):
                group_016_1.inputs[3].hide_value = False
            if hasattr(group_016_1.inputs[3], 'name'):
                group_016_1.inputs[3].name = 'Bot'
            if hasattr(group_016_1.inputs[3], 'show_expanded'):
                group_016_1.inputs[3].show_expanded = False
            if hasattr(group_016_1.outputs[0], 'default_value'):
                group_016_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_016_1.outputs[0], 'display_shape'):
                group_016_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_016_1.outputs[0], 'enabled'):
                group_016_1.outputs[0].enabled = True
            if hasattr(group_016_1.outputs[0], 'hide'):
                group_016_1.outputs[0].hide = False
            if hasattr(group_016_1.outputs[0], 'hide_value'):
                group_016_1.outputs[0].hide_value = False
            if hasattr(group_016_1.outputs[0], 'name'):
                group_016_1.outputs[0].name = 'Color'
            if hasattr(group_016_1.outputs[0], 'show_expanded'):
                group_016_1.outputs[0].show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Masking Sorter noGrime Col')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Masking Sorter noGrime Col', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketColor', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-1855.0169677734375, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-1615.0169677734375, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-1345.847412109375, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-1076.677978515625, -169.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-807.5084838867188, -174.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-1076.677978515625, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-538.3389892578125, -174.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = True
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'RGBA'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-269.16949462890625, 0.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-538.3389892578125, 0.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-807.5084838867188, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'SUBTRACT'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-2100.60546875, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.5
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.5
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 1'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 2'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 3'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 4'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Slot 5'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Slot 6'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Dust'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[6], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[10], mix_004_2.inputs[7])
                node_tree2.links.new(mix_006_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], math_001_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], math_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[1])
                node_tree2.links.new(mix_004_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[11], mix_006_2.inputs[7])

            group_014_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_014_1, 'node_tree'):
                group_014_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter noGrime Col')
            if hasattr(group_014_1, 'color'):
                group_014_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_014_1, 'hide'):
                group_014_1.hide = False
            if hasattr(group_014_1, 'location'):
                group_014_1.location = (-1689.9661865234375, 706.75048828125)
            if hasattr(group_014_1, 'mute'):
                group_014_1.mute = False
            if hasattr(group_014_1, 'name'):
                group_014_1.name = 'Group.014'
            if hasattr(group_014_1, 'use_custom_color'):
                group_014_1.use_custom_color = False
            if hasattr(group_014_1, 'width'):
                group_014_1.width = 240.0601806640625
            if hasattr(group_014_1.inputs[0], 'default_value'):
                group_014_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_014_1.inputs[0], 'display_shape'):
                group_014_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[0], 'enabled'):
                group_014_1.inputs[0].enabled = True
            if hasattr(group_014_1.inputs[0], 'hide'):
                group_014_1.inputs[0].hide = False
            if hasattr(group_014_1.inputs[0], 'hide_value'):
                group_014_1.inputs[0].hide_value = False
            if hasattr(group_014_1.inputs[0], 'name'):
                group_014_1.inputs[0].name = 'ASG'
            if hasattr(group_014_1.inputs[0], 'show_expanded'):
                group_014_1.inputs[0].show_expanded = False
            if hasattr(group_014_1.inputs[1], 'default_value'):
                group_014_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[1], 'display_shape'):
                group_014_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[1], 'enabled'):
                group_014_1.inputs[1].enabled = True
            if hasattr(group_014_1.inputs[1], 'hide'):
                group_014_1.inputs[1].hide = False
            if hasattr(group_014_1.inputs[1], 'hide_value'):
                group_014_1.inputs[1].hide_value = False
            if hasattr(group_014_1.inputs[1], 'name'):
                group_014_1.inputs[1].name = 'Mask_0'
            if hasattr(group_014_1.inputs[1], 'show_expanded'):
                group_014_1.inputs[1].show_expanded = False
            if hasattr(group_014_1.inputs[2], 'default_value'):
                group_014_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[2], 'display_shape'):
                group_014_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[2], 'enabled'):
                group_014_1.inputs[2].enabled = True
            if hasattr(group_014_1.inputs[2], 'hide'):
                group_014_1.inputs[2].hide = False
            if hasattr(group_014_1.inputs[2], 'hide_value'):
                group_014_1.inputs[2].hide_value = False
            if hasattr(group_014_1.inputs[2], 'name'):
                group_014_1.inputs[2].name = 'Mask_1'
            if hasattr(group_014_1.inputs[2], 'show_expanded'):
                group_014_1.inputs[2].show_expanded = False
            if hasattr(group_014_1.inputs[3], 'default_value'):
                group_014_1.inputs[3].default_value = 1.0
            if hasattr(group_014_1.inputs[3], 'display_shape'):
                group_014_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[3], 'enabled'):
                group_014_1.inputs[3].enabled = True
            if hasattr(group_014_1.inputs[3], 'hide'):
                group_014_1.inputs[3].hide = False
            if hasattr(group_014_1.inputs[3], 'hide_value'):
                group_014_1.inputs[3].hide_value = False
            if hasattr(group_014_1.inputs[3], 'name'):
                group_014_1.inputs[3].name = 'Grime Amount'
            if hasattr(group_014_1.inputs[3], 'show_expanded'):
                group_014_1.inputs[3].show_expanded = False
            if hasattr(group_014_1.inputs[4], 'default_value'):
                group_014_1.inputs[4].default_value = 1.0
            if hasattr(group_014_1.inputs[4], 'display_shape'):
                group_014_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[4], 'enabled'):
                group_014_1.inputs[4].enabled = True
            if hasattr(group_014_1.inputs[4], 'hide'):
                group_014_1.inputs[4].hide = False
            if hasattr(group_014_1.inputs[4], 'hide_value'):
                group_014_1.inputs[4].hide_value = False
            if hasattr(group_014_1.inputs[4], 'name'):
                group_014_1.inputs[4].name = 'Dust Amount'
            if hasattr(group_014_1.inputs[4], 'show_expanded'):
                group_014_1.inputs[4].show_expanded = False
            if hasattr(group_014_1.inputs[5], 'default_value'):
                group_014_1.inputs[5].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[5], 'display_shape'):
                group_014_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[5], 'enabled'):
                group_014_1.inputs[5].enabled = True
            if hasattr(group_014_1.inputs[5], 'hide'):
                group_014_1.inputs[5].hide = False
            if hasattr(group_014_1.inputs[5], 'hide_value'):
                group_014_1.inputs[5].hide_value = False
            if hasattr(group_014_1.inputs[5], 'name'):
                group_014_1.inputs[5].name = 'Slot 1'
            if hasattr(group_014_1.inputs[5], 'show_expanded'):
                group_014_1.inputs[5].show_expanded = False
            if hasattr(group_014_1.inputs[6], 'default_value'):
                group_014_1.inputs[6].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[6], 'display_shape'):
                group_014_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[6], 'enabled'):
                group_014_1.inputs[6].enabled = True
            if hasattr(group_014_1.inputs[6], 'hide'):
                group_014_1.inputs[6].hide = False
            if hasattr(group_014_1.inputs[6], 'hide_value'):
                group_014_1.inputs[6].hide_value = False
            if hasattr(group_014_1.inputs[6], 'name'):
                group_014_1.inputs[6].name = 'Slot 2'
            if hasattr(group_014_1.inputs[6], 'show_expanded'):
                group_014_1.inputs[6].show_expanded = False
            if hasattr(group_014_1.inputs[7], 'default_value'):
                group_014_1.inputs[7].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[7], 'display_shape'):
                group_014_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[7], 'enabled'):
                group_014_1.inputs[7].enabled = True
            if hasattr(group_014_1.inputs[7], 'hide'):
                group_014_1.inputs[7].hide = False
            if hasattr(group_014_1.inputs[7], 'hide_value'):
                group_014_1.inputs[7].hide_value = False
            if hasattr(group_014_1.inputs[7], 'name'):
                group_014_1.inputs[7].name = 'Slot 3'
            if hasattr(group_014_1.inputs[7], 'show_expanded'):
                group_014_1.inputs[7].show_expanded = False
            if hasattr(group_014_1.inputs[8], 'default_value'):
                group_014_1.inputs[8].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[8], 'display_shape'):
                group_014_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[8], 'enabled'):
                group_014_1.inputs[8].enabled = True
            if hasattr(group_014_1.inputs[8], 'hide'):
                group_014_1.inputs[8].hide = False
            if hasattr(group_014_1.inputs[8], 'hide_value'):
                group_014_1.inputs[8].hide_value = False
            if hasattr(group_014_1.inputs[8], 'name'):
                group_014_1.inputs[8].name = 'Slot 4'
            if hasattr(group_014_1.inputs[8], 'show_expanded'):
                group_014_1.inputs[8].show_expanded = False
            if hasattr(group_014_1.inputs[9], 'default_value'):
                group_014_1.inputs[9].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[9], 'display_shape'):
                group_014_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[9], 'enabled'):
                group_014_1.inputs[9].enabled = True
            if hasattr(group_014_1.inputs[9], 'hide'):
                group_014_1.inputs[9].hide = False
            if hasattr(group_014_1.inputs[9], 'hide_value'):
                group_014_1.inputs[9].hide_value = False
            if hasattr(group_014_1.inputs[9], 'name'):
                group_014_1.inputs[9].name = 'Slot 5'
            if hasattr(group_014_1.inputs[9], 'show_expanded'):
                group_014_1.inputs[9].show_expanded = False
            if hasattr(group_014_1.inputs[10], 'default_value'):
                group_014_1.inputs[10].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_014_1.inputs[10], 'display_shape'):
                group_014_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[10], 'enabled'):
                group_014_1.inputs[10].enabled = True
            if hasattr(group_014_1.inputs[10], 'hide'):
                group_014_1.inputs[10].hide = False
            if hasattr(group_014_1.inputs[10], 'hide_value'):
                group_014_1.inputs[10].hide_value = False
            if hasattr(group_014_1.inputs[10], 'name'):
                group_014_1.inputs[10].name = 'Slot 6'
            if hasattr(group_014_1.inputs[10], 'show_expanded'):
                group_014_1.inputs[10].show_expanded = False
            if hasattr(group_014_1.inputs[11], 'default_value'):
                group_014_1.inputs[11].default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
            if hasattr(group_014_1.inputs[11], 'display_shape'):
                group_014_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_014_1.inputs[11], 'enabled'):
                group_014_1.inputs[11].enabled = True
            if hasattr(group_014_1.inputs[11], 'hide'):
                group_014_1.inputs[11].hide = False
            if hasattr(group_014_1.inputs[11], 'hide_value'):
                group_014_1.inputs[11].hide_value = False
            if hasattr(group_014_1.inputs[11], 'name'):
                group_014_1.inputs[11].name = 'Dust'
            if hasattr(group_014_1.inputs[11], 'show_expanded'):
                group_014_1.inputs[11].show_expanded = False
            if hasattr(group_014_1.outputs[0], 'default_value'):
                group_014_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_014_1.outputs[0], 'display_shape'):
                group_014_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_014_1.outputs[0], 'enabled'):
                group_014_1.outputs[0].enabled = True
            if hasattr(group_014_1.outputs[0], 'hide'):
                group_014_1.outputs[0].hide = False
            if hasattr(group_014_1.outputs[0], 'hide_value'):
                group_014_1.outputs[0].hide_value = False
            if hasattr(group_014_1.outputs[0], 'name'):
                group_014_1.outputs[0].name = 'Color'
            if hasattr(group_014_1.outputs[0], 'show_expanded'):
                group_014_1.outputs[0].show_expanded = False

            group_009_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_009_1, 'node_tree'):
                group_009_1.node_tree = bpy.data.node_groups.get('Infinite Matts')
            if hasattr(group_009_1, 'color'):
                group_009_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_009_1, 'hide'):
                group_009_1.hide = False
            if hasattr(group_009_1, 'label'):
                group_009_1.label = 'Roughness'
            if hasattr(group_009_1, 'location'):
                group_009_1.location = (-49.96565628051758, 306.75048828125)
            if hasattr(group_009_1, 'mute'):
                group_009_1.mute = False
            if hasattr(group_009_1, 'name'):
                group_009_1.name = 'Group.009'
            if hasattr(group_009_1, 'use_custom_color'):
                group_009_1.use_custom_color = False
            if hasattr(group_009_1, 'width'):
                group_009_1.width = 216.826904296875
            

            node_tree2 = bpy.data.node_groups.get('Emission')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Emission', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 3.4028234663852886e+38
                if hasattr(input, 'min_value'):
                    input.min_value = -3.4028234663852886e+38
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketFloat', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'max_value'):
                    output.max_value = 3.4028234663852886e+38
                if hasattr(output, 'min_value'):
                    output.min_value = -3.4028234663852886e+38
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = 0.0
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'FLOAT'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-400.0, -40.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-500.0, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-200.0, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'MULTIPLY'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-400.0, -20.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'SUBTRACT'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-900.0, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.0
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Slot 1'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.0
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Slot 2'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = 0.0
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 3'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = 0.0
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 4'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = 0.0
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 5'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = 0.0
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 6'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = 0.0
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Grime'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = 0.0
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Dust'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = 0.5
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = 0.5
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False

                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-800.0, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_003_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_003_2, 'mode'):
                    separate_rgb_003_2.mode = 'RGB'
                if hasattr(separate_rgb_003_2, 'color'):
                    separate_rgb_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_003_2, 'hide'):
                    separate_rgb_003_2.hide = False
                if hasattr(separate_rgb_003_2, 'location'):
                    separate_rgb_003_2.location = (-400.0, 0.0)
                if hasattr(separate_rgb_003_2, 'mute'):
                    separate_rgb_003_2.mute = False
                if hasattr(separate_rgb_003_2, 'name'):
                    separate_rgb_003_2.name = 'Separate RGB.003'
                if hasattr(separate_rgb_003_2, 'use_custom_color'):
                    separate_rgb_003_2.use_custom_color = False
                if hasattr(separate_rgb_003_2, 'width'):
                    separate_rgb_003_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_003_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'FLOAT'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-700.0, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'FLOAT'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-600.0, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'FLOAT'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-500.0, -20.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'FLOAT'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-300.0, -20.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = False
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'FLOAT'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-100.0, 0.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-300.0, 0.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = False
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'FLOAT'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Slot 6'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-200.0, -20.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[6], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_004_2.inputs[7])
                node_tree2.links.new(math_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[12], math_2.inputs[1])
                node_tree2.links.new(mix_005_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(mix_004_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[9], mix_005_2.inputs[7])
                node_tree2.links.new(math_002_2.outputs[0], math_003_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[11], math_002_2.inputs[0])
                node_tree2.links.new(math_003_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[2], math_003_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], mix_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[3])
                node_tree2.links.new(mix_2.outputs[0], mix_001_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[5], mix_001_2.inputs[3])
                node_tree2.links.new(mix_001_2.outputs[0], mix_002_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[6], mix_002_2.inputs[3])
                node_tree2.links.new(mix_002_2.outputs[0], mix_003_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[7], mix_003_2.inputs[3])
                node_tree2.links.new(mix_003_2.outputs[0], mix_004_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[8], mix_004_2.inputs[3])
                node_tree2.links.new(mix_004_2.outputs[0], mix_005_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[9], mix_005_2.inputs[3])
                node_tree2.links.new(mix_005_2.outputs[0], mix_006_2.inputs[2])
                node_tree2.links.new(group_input_2.outputs[10], mix_006_2.inputs[3])
                node_tree2.links.new(mix_006_2.outputs[0], group_output_2.inputs[0])

            group_013_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_013_1, 'node_tree'):
                group_013_1.node_tree = bpy.data.node_groups.get('Emission')
            if hasattr(group_013_1, 'color'):
                group_013_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_013_1, 'hide'):
                group_013_1.hide = False
            if hasattr(group_013_1, 'location'):
                group_013_1.location = (-61.55836868286133, -781.67822265625)
            if hasattr(group_013_1, 'mute'):
                group_013_1.mute = False
            if hasattr(group_013_1, 'name'):
                group_013_1.name = 'Group.013'
            if hasattr(group_013_1, 'use_custom_color'):
                group_013_1.use_custom_color = False
            if hasattr(group_013_1, 'width'):
                group_013_1.width = 212.21826171875
            if hasattr(group_013_1.inputs[0], 'default_value'):
                group_013_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_013_1.inputs[0], 'display_shape'):
                group_013_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_013_1.inputs[0], 'enabled'):
                group_013_1.inputs[0].enabled = True
            if hasattr(group_013_1.inputs[0], 'hide'):
                group_013_1.inputs[0].hide = False
            if hasattr(group_013_1.inputs[0], 'hide_value'):
                group_013_1.inputs[0].hide_value = False
            if hasattr(group_013_1.inputs[0], 'name'):
                group_013_1.inputs[0].name = 'ASG'
            if hasattr(group_013_1.inputs[0], 'show_expanded'):
                group_013_1.inputs[0].show_expanded = False
            if hasattr(group_013_1.inputs[1], 'default_value'):
                group_013_1.inputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_013_1.inputs[1], 'display_shape'):
                group_013_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_013_1.inputs[1], 'enabled'):
                group_013_1.inputs[1].enabled = True
            if hasattr(group_013_1.inputs[1], 'hide'):
                group_013_1.inputs[1].hide = False
            if hasattr(group_013_1.inputs[1], 'hide_value'):
                group_013_1.inputs[1].hide_value = False
            if hasattr(group_013_1.inputs[1], 'name'):
                group_013_1.inputs[1].name = 'Mask_0'
            if hasattr(group_013_1.inputs[1], 'show_expanded'):
                group_013_1.inputs[1].show_expanded = False
            if hasattr(group_013_1.inputs[2], 'default_value'):
                group_013_1.inputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_013_1.inputs[2], 'display_shape'):
                group_013_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_013_1.inputs[2], 'enabled'):
                group_013_1.inputs[2].enabled = True
            if hasattr(group_013_1.inputs[2], 'hide'):
                group_013_1.inputs[2].hide = False
            if hasattr(group_013_1.inputs[2], 'hide_value'):
                group_013_1.inputs[2].hide_value = False
            if hasattr(group_013_1.inputs[2], 'name'):
                group_013_1.inputs[2].name = 'Mask_1'
            if hasattr(group_013_1.inputs[2], 'show_expanded'):
                group_013_1.inputs[2].show_expanded = False
            

            separate_rgb_1 = node_tree4.nodes.new('ShaderNodeSeparateColor')
            if hasattr(separate_rgb_1, 'mode'):
                separate_rgb_1.mode = 'RGB'
            if hasattr(separate_rgb_1, 'color'):
                separate_rgb_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(separate_rgb_1, 'hide'):
                separate_rgb_1.hide = False
            if hasattr(separate_rgb_1, 'location'):
                separate_rgb_1.location = (1210.0343017578125, 366.75048828125)
            if hasattr(separate_rgb_1, 'mute'):
                separate_rgb_1.mute = False
            if hasattr(separate_rgb_1, 'name'):
                separate_rgb_1.name = 'Separate RGB'
            if hasattr(separate_rgb_1, 'use_custom_color'):
                separate_rgb_1.use_custom_color = False
            if hasattr(separate_rgb_1, 'width'):
                separate_rgb_1.width = 140.0
            input_ = next((input_ for input_ in separate_rgb_1.inputs if input_.identifier=='Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in separate_rgb_1.outputs if output.identifier=='Red'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Red'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in separate_rgb_1.outputs if output.identifier=='Green'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Green'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in separate_rgb_1.outputs if output.identifier=='Blue'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Blue'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            math_004_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_004_1, 'color'):
                math_004_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_004_1, 'hide'):
                math_004_1.hide = False
            if hasattr(math_004_1, 'location'):
                math_004_1.location = (2615.739501953125, -140.130126953125)
            if hasattr(math_004_1, 'mute'):
                math_004_1.mute = False
            if hasattr(math_004_1, 'name'):
                math_004_1.name = 'Math.004'
            if hasattr(math_004_1, 'operation'):
                math_004_1.operation = 'MULTIPLY'
            if hasattr(math_004_1, 'use_clamp'):
                math_004_1.use_clamp = True
            if hasattr(math_004_1, 'use_custom_color'):
                math_004_1.use_custom_color = False
            if hasattr(math_004_1, 'width'):
                math_004_1.width = 140.0
            input_ = next((input_ for input_ in math_004_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_004_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_004_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_004_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            math_1 = node_tree4.nodes.new('ShaderNodeMath')
            if hasattr(math_1, 'color'):
                math_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(math_1, 'hide'):
                math_1.hide = True
            if hasattr(math_1, 'label'):
                math_1.label = 'Finalize Base Spec'
            if hasattr(math_1, 'location'):
                math_1.location = (3264.053955078125, 127.77780151367188)
            if hasattr(math_1, 'mute'):
                math_1.mute = False
            if hasattr(math_1, 'name'):
                math_1.name = 'Math'
            if hasattr(math_1, 'operation'):
                math_1.operation = 'MULTIPLY'
            if hasattr(math_1, 'use_clamp'):
                math_1.use_clamp = False
            if hasattr(math_1, 'use_custom_color'):
                math_1.use_custom_color = False
            if hasattr(math_1, 'width'):
                math_1.width = 140.0
            input_ = next((input_ for input_ in math_1.inputs if input_.identifier=='Value'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_1.inputs if input_.identifier=='Value_001'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in math_1.inputs if input_.identifier=='Value_002'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Value'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in math_1.outputs if output.identifier=='Value'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Value'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Masking Sorter col')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Masking Sorter col', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 0.5
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                input = node_tree2.inputs.new('NodeSocketColor', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketColor', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Color')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                # NODES
                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-800.0, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-700.0, 0.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 1.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-600.0, 0.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.8411373496055603, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-500.0, -20.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-400.0, -40.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.7098963856697083, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_003_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_003_2, 'mode'):
                    separate_rgb_003_2.mode = 'RGB'
                if hasattr(separate_rgb_003_2, 'color'):
                    separate_rgb_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_003_2, 'hide'):
                    separate_rgb_003_2.hide = False
                if hasattr(separate_rgb_003_2, 'location'):
                    separate_rgb_003_2.location = (-400.0, -20.0)
                if hasattr(separate_rgb_003_2, 'mute'):
                    separate_rgb_003_2.mute = False
                if hasattr(separate_rgb_003_2, 'name'):
                    separate_rgb_003_2.name = 'Separate RGB.003'
                if hasattr(separate_rgb_003_2, 'use_custom_color'):
                    separate_rgb_003_2.use_custom_color = False
                if hasattr(separate_rgb_003_2, 'width'):
                    separate_rgb_003_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_003_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_003_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-500.0, 0.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-900.0, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = 0.5
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = 0.5
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 1'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 2'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Slot 3'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Slot 4'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Slot 5'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Slot 6'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Grime'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Dust'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-400.0, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'SUBTRACT'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-300.0, 0.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'SUBTRACT'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Color'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = False
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'RGBA'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Grime'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-200.0, -20.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-300.0, -40.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = True
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'RGBA'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Dust'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (-100.0, 0.0)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.7387133836746216, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-300.0, -20.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'ADD'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-200.0, 0.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[6], mix_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[7], mix_001_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[8], mix_002_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[9], mix_003_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[10], mix_004_2.inputs[7])
                node_tree2.links.new(mix_006_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_003_2.inputs[0])
                node_tree2.links.new(mix_004_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(mix_005_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(math_002_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[11], mix_005_2.inputs[7])
                node_tree2.links.new(group_input_2.outputs[12], mix_006_2.inputs[7])
                node_tree2.links.new(math_003_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], math_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], math_2.inputs[0])
                node_tree2.links.new(math_2.outputs[0], math_002_2.inputs[0])
                node_tree2.links.new(math_001_2.outputs[0], math_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_003_2.outputs[2], math_002_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_003_2.inputs[1])

            group_021_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_021_1, 'node_tree'):
                group_021_1.node_tree = bpy.data.node_groups.get('Infinite Masking Sorter col')
            if hasattr(group_021_1, 'color'):
                group_021_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_021_1, 'hide'):
                group_021_1.hide = False
            if hasattr(group_021_1, 'location'):
                group_021_1.location = (-1692.48388671875, -1088.162109375)
            if hasattr(group_021_1, 'mute'):
                group_021_1.mute = False
            if hasattr(group_021_1, 'name'):
                group_021_1.name = 'Group.021'
            if hasattr(group_021_1, 'use_custom_color'):
                group_021_1.use_custom_color = False
            if hasattr(group_021_1, 'width'):
                group_021_1.width = 239.4532470703125
            if hasattr(group_021_1.inputs[0], 'default_value'):
                group_021_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_021_1.inputs[0], 'display_shape'):
                group_021_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[0], 'enabled'):
                group_021_1.inputs[0].enabled = True
            if hasattr(group_021_1.inputs[0], 'hide'):
                group_021_1.inputs[0].hide = False
            if hasattr(group_021_1.inputs[0], 'hide_value'):
                group_021_1.inputs[0].hide_value = False
            if hasattr(group_021_1.inputs[0], 'name'):
                group_021_1.inputs[0].name = 'ASG'
            if hasattr(group_021_1.inputs[0], 'show_expanded'):
                group_021_1.inputs[0].show_expanded = False
            if hasattr(group_021_1.inputs[1], 'default_value'):
                group_021_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[1], 'display_shape'):
                group_021_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[1], 'enabled'):
                group_021_1.inputs[1].enabled = True
            if hasattr(group_021_1.inputs[1], 'hide'):
                group_021_1.inputs[1].hide = False
            if hasattr(group_021_1.inputs[1], 'hide_value'):
                group_021_1.inputs[1].hide_value = False
            if hasattr(group_021_1.inputs[1], 'name'):
                group_021_1.inputs[1].name = 'Mask_0'
            if hasattr(group_021_1.inputs[1], 'show_expanded'):
                group_021_1.inputs[1].show_expanded = False
            if hasattr(group_021_1.inputs[2], 'default_value'):
                group_021_1.inputs[2].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[2], 'display_shape'):
                group_021_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[2], 'enabled'):
                group_021_1.inputs[2].enabled = True
            if hasattr(group_021_1.inputs[2], 'hide'):
                group_021_1.inputs[2].hide = False
            if hasattr(group_021_1.inputs[2], 'hide_value'):
                group_021_1.inputs[2].hide_value = False
            if hasattr(group_021_1.inputs[2], 'name'):
                group_021_1.inputs[2].name = 'Mask_1'
            if hasattr(group_021_1.inputs[2], 'show_expanded'):
                group_021_1.inputs[2].show_expanded = False
            if hasattr(group_021_1.inputs[3], 'default_value'):
                group_021_1.inputs[3].default_value = 0.5
            if hasattr(group_021_1.inputs[3], 'display_shape'):
                group_021_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[3], 'enabled'):
                group_021_1.inputs[3].enabled = True
            if hasattr(group_021_1.inputs[3], 'hide'):
                group_021_1.inputs[3].hide = False
            if hasattr(group_021_1.inputs[3], 'hide_value'):
                group_021_1.inputs[3].hide_value = False
            if hasattr(group_021_1.inputs[3], 'name'):
                group_021_1.inputs[3].name = 'Grime Amount'
            if hasattr(group_021_1.inputs[3], 'show_expanded'):
                group_021_1.inputs[3].show_expanded = False
            if hasattr(group_021_1.inputs[4], 'default_value'):
                group_021_1.inputs[4].default_value = 0.5
            if hasattr(group_021_1.inputs[4], 'display_shape'):
                group_021_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[4], 'enabled'):
                group_021_1.inputs[4].enabled = True
            if hasattr(group_021_1.inputs[4], 'hide'):
                group_021_1.inputs[4].hide = False
            if hasattr(group_021_1.inputs[4], 'hide_value'):
                group_021_1.inputs[4].hide_value = False
            if hasattr(group_021_1.inputs[4], 'name'):
                group_021_1.inputs[4].name = 'Dust Amount'
            if hasattr(group_021_1.inputs[4], 'show_expanded'):
                group_021_1.inputs[4].show_expanded = False
            if hasattr(group_021_1.inputs[5], 'default_value'):
                group_021_1.inputs[5].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[5], 'display_shape'):
                group_021_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[5], 'enabled'):
                group_021_1.inputs[5].enabled = True
            if hasattr(group_021_1.inputs[5], 'hide'):
                group_021_1.inputs[5].hide = False
            if hasattr(group_021_1.inputs[5], 'hide_value'):
                group_021_1.inputs[5].hide_value = False
            if hasattr(group_021_1.inputs[5], 'name'):
                group_021_1.inputs[5].name = 'Slot 1'
            if hasattr(group_021_1.inputs[5], 'show_expanded'):
                group_021_1.inputs[5].show_expanded = False
            if hasattr(group_021_1.inputs[6], 'default_value'):
                group_021_1.inputs[6].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[6], 'display_shape'):
                group_021_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[6], 'enabled'):
                group_021_1.inputs[6].enabled = True
            if hasattr(group_021_1.inputs[6], 'hide'):
                group_021_1.inputs[6].hide = False
            if hasattr(group_021_1.inputs[6], 'hide_value'):
                group_021_1.inputs[6].hide_value = False
            if hasattr(group_021_1.inputs[6], 'name'):
                group_021_1.inputs[6].name = 'Slot 2'
            if hasattr(group_021_1.inputs[6], 'show_expanded'):
                group_021_1.inputs[6].show_expanded = False
            if hasattr(group_021_1.inputs[7], 'default_value'):
                group_021_1.inputs[7].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[7], 'display_shape'):
                group_021_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[7], 'enabled'):
                group_021_1.inputs[7].enabled = True
            if hasattr(group_021_1.inputs[7], 'hide'):
                group_021_1.inputs[7].hide = False
            if hasattr(group_021_1.inputs[7], 'hide_value'):
                group_021_1.inputs[7].hide_value = False
            if hasattr(group_021_1.inputs[7], 'name'):
                group_021_1.inputs[7].name = 'Slot 3'
            if hasattr(group_021_1.inputs[7], 'show_expanded'):
                group_021_1.inputs[7].show_expanded = False
            if hasattr(group_021_1.inputs[8], 'default_value'):
                group_021_1.inputs[8].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[8], 'display_shape'):
                group_021_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[8], 'enabled'):
                group_021_1.inputs[8].enabled = True
            if hasattr(group_021_1.inputs[8], 'hide'):
                group_021_1.inputs[8].hide = False
            if hasattr(group_021_1.inputs[8], 'hide_value'):
                group_021_1.inputs[8].hide_value = False
            if hasattr(group_021_1.inputs[8], 'name'):
                group_021_1.inputs[8].name = 'Slot 4'
            if hasattr(group_021_1.inputs[8], 'show_expanded'):
                group_021_1.inputs[8].show_expanded = False
            if hasattr(group_021_1.inputs[9], 'default_value'):
                group_021_1.inputs[9].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[9], 'display_shape'):
                group_021_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[9], 'enabled'):
                group_021_1.inputs[9].enabled = True
            if hasattr(group_021_1.inputs[9], 'hide'):
                group_021_1.inputs[9].hide = False
            if hasattr(group_021_1.inputs[9], 'hide_value'):
                group_021_1.inputs[9].hide_value = False
            if hasattr(group_021_1.inputs[9], 'name'):
                group_021_1.inputs[9].name = 'Slot 5'
            if hasattr(group_021_1.inputs[9], 'show_expanded'):
                group_021_1.inputs[9].show_expanded = False
            if hasattr(group_021_1.inputs[10], 'default_value'):
                group_021_1.inputs[10].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_021_1.inputs[10], 'display_shape'):
                group_021_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[10], 'enabled'):
                group_021_1.inputs[10].enabled = True
            if hasattr(group_021_1.inputs[10], 'hide'):
                group_021_1.inputs[10].hide = False
            if hasattr(group_021_1.inputs[10], 'hide_value'):
                group_021_1.inputs[10].hide_value = False
            if hasattr(group_021_1.inputs[10], 'name'):
                group_021_1.inputs[10].name = 'Slot 6'
            if hasattr(group_021_1.inputs[10], 'show_expanded'):
                group_021_1.inputs[10].show_expanded = False
            if hasattr(group_021_1.inputs[11], 'default_value'):
                group_021_1.inputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_021_1.inputs[11], 'display_shape'):
                group_021_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[11], 'enabled'):
                group_021_1.inputs[11].enabled = True
            if hasattr(group_021_1.inputs[11], 'hide'):
                group_021_1.inputs[11].hide = False
            if hasattr(group_021_1.inputs[11], 'hide_value'):
                group_021_1.inputs[11].hide_value = False
            if hasattr(group_021_1.inputs[11], 'name'):
                group_021_1.inputs[11].name = 'Grime'
            if hasattr(group_021_1.inputs[11], 'show_expanded'):
                group_021_1.inputs[11].show_expanded = False
            if hasattr(group_021_1.inputs[12], 'default_value'):
                group_021_1.inputs[12].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_021_1.inputs[12], 'display_shape'):
                group_021_1.inputs[12].display_shape = 'CIRCLE'
            if hasattr(group_021_1.inputs[12], 'enabled'):
                group_021_1.inputs[12].enabled = True
            if hasattr(group_021_1.inputs[12], 'hide'):
                group_021_1.inputs[12].hide = False
            if hasattr(group_021_1.inputs[12], 'hide_value'):
                group_021_1.inputs[12].hide_value = False
            if hasattr(group_021_1.inputs[12], 'name'):
                group_021_1.inputs[12].name = 'Dust'
            if hasattr(group_021_1.inputs[12], 'show_expanded'):
                group_021_1.inputs[12].show_expanded = False
            if hasattr(group_021_1.outputs[0], 'default_value'):
                group_021_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_021_1.outputs[0], 'display_shape'):
                group_021_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_021_1.outputs[0], 'enabled'):
                group_021_1.outputs[0].enabled = True
            if hasattr(group_021_1.outputs[0], 'hide'):
                group_021_1.outputs[0].hide = False
            if hasattr(group_021_1.outputs[0], 'hide_value'):
                group_021_1.outputs[0].hide_value = False
            if hasattr(group_021_1.outputs[0], 'name'):
                group_021_1.outputs[0].name = 'Color'
            if hasattr(group_021_1.outputs[0], 'show_expanded'):
                group_021_1.outputs[0].show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Infinite Masking Masks')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Infinite Masking Masks', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 2')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 2'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 3')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 3'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 4')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 4'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 5')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 5'
                input = node_tree2.inputs.new('NodeSocketColor', 'Slot 6')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Slot 6'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Mask0_New')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Mask0_New'
                output = node_tree2.outputs.new('NodeSocketColor', 'Mask1_New')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Mask1_New'
                # NODES
                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (0.0, 0.0)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Mask0_New'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False
                if hasattr(group_output_2.inputs[1], 'default_value'):
                    group_output_2.inputs[1].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[1], 'display_shape'):
                    group_output_2.inputs[1].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[1], 'enabled'):
                    group_output_2.inputs[1].enabled = True
                if hasattr(group_output_2.inputs[1], 'hide'):
                    group_output_2.inputs[1].hide = False
                if hasattr(group_output_2.inputs[1], 'hide_value'):
                    group_output_2.inputs[1].hide_value = False
                if hasattr(group_output_2.inputs[1], 'name'):
                    group_output_2.inputs[1].name = 'Mask1_New'
                if hasattr(group_output_2.inputs[1], 'show_expanded'):
                    group_output_2.inputs[1].show_expanded = False

                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-600.0, 0.0)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'label'):
                    mix_004_2.label = 'Slot 6'
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-200.0, -40.0)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'label'):
                    mix_003_2.label = 'Slot 5'
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-300.0, -80.0)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_2, 'color'):
                    math_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_2, 'hide'):
                    math_2.hide = False
                if hasattr(math_2, 'location'):
                    math_2.location = (-500.0, 0.0)
                if hasattr(math_2, 'mute'):
                    math_2.mute = False
                if hasattr(math_2, 'name'):
                    math_2.name = 'Math'
                if hasattr(math_2, 'operation'):
                    math_2.operation = 'SUBTRACT'
                if hasattr(math_2, 'use_clamp'):
                    math_2.use_clamp = False
                if hasattr(math_2, 'use_custom_color'):
                    math_2.use_custom_color = False
                if hasattr(math_2, 'width'):
                    math_2.width = 140.0
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_001_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_001_2, 'color'):
                    math_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_001_2, 'hide'):
                    math_001_2.hide = False
                if hasattr(math_001_2, 'location'):
                    math_001_2.location = (-400.0, -20.0)
                if hasattr(math_001_2, 'mute'):
                    math_001_2.mute = False
                if hasattr(math_001_2, 'name'):
                    math_001_2.name = 'Math.001'
                if hasattr(math_001_2, 'operation'):
                    math_001_2.operation = 'ADD'
                if hasattr(math_001_2, 'use_clamp'):
                    math_001_2.use_clamp = False
                if hasattr(math_001_2, 'use_custom_color'):
                    math_001_2.use_custom_color = False
                if hasattr(math_001_2, 'width'):
                    math_001_2.width = 140.0
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_001_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_001_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_003_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_003_2, 'color'):
                    math_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_003_2, 'hide'):
                    math_003_2.hide = False
                if hasattr(math_003_2, 'location'):
                    math_003_2.location = (-300.0, -20.0)
                if hasattr(math_003_2, 'mute'):
                    math_003_2.mute = False
                if hasattr(math_003_2, 'name'):
                    math_003_2.name = 'Math.003'
                if hasattr(math_003_2, 'operation'):
                    math_003_2.operation = 'ADD'
                if hasattr(math_003_2, 'use_clamp'):
                    math_003_2.use_clamp = False
                if hasattr(math_003_2, 'use_custom_color'):
                    math_003_2.use_custom_color = False
                if hasattr(math_003_2, 'width'):
                    math_003_2.width = 140.0
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_003_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_003_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_002_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_002_2, 'color'):
                    math_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_002_2, 'hide'):
                    math_002_2.hide = False
                if hasattr(math_002_2, 'location'):
                    math_002_2.location = (-400.0, 0.0)
                if hasattr(math_002_2, 'mute'):
                    math_002_2.mute = False
                if hasattr(math_002_2, 'name'):
                    math_002_2.name = 'Math.002'
                if hasattr(math_002_2, 'operation'):
                    math_002_2.operation = 'SUBTRACT'
                if hasattr(math_002_2, 'use_clamp'):
                    math_002_2.use_clamp = False
                if hasattr(math_002_2, 'use_custom_color'):
                    math_002_2.use_custom_color = False
                if hasattr(math_002_2, 'width'):
                    math_002_2.width = 140.0
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_002_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_002_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_004_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_004_2, 'color'):
                    math_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_004_2, 'hide'):
                    math_004_2.hide = False
                if hasattr(math_004_2, 'location'):
                    math_004_2.location = (-200.0, 0.0)
                if hasattr(math_004_2, 'mute'):
                    math_004_2.mute = False
                if hasattr(math_004_2, 'name'):
                    math_004_2.name = 'Math.004'
                if hasattr(math_004_2, 'operation'):
                    math_004_2.operation = 'ADD'
                if hasattr(math_004_2, 'use_clamp'):
                    math_004_2.use_clamp = False
                if hasattr(math_004_2, 'use_custom_color'):
                    math_004_2.use_custom_color = False
                if hasattr(math_004_2, 'width'):
                    math_004_2.width = 140.0
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_004_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_004_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_005_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_005_2, 'color'):
                    math_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_005_2, 'hide'):
                    math_005_2.hide = False
                if hasattr(math_005_2, 'location'):
                    math_005_2.location = (-300.0, 0.0)
                if hasattr(math_005_2, 'mute'):
                    math_005_2.mute = False
                if hasattr(math_005_2, 'name'):
                    math_005_2.name = 'Math.005'
                if hasattr(math_005_2, 'operation'):
                    math_005_2.operation = 'SUBTRACT'
                if hasattr(math_005_2, 'use_clamp'):
                    math_005_2.use_clamp = False
                if hasattr(math_005_2, 'use_custom_color'):
                    math_005_2.use_custom_color = False
                if hasattr(math_005_2, 'width'):
                    math_005_2.width = 140.0
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_005_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_005_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_006_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_006_2, 'color'):
                    math_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_006_2, 'hide'):
                    math_006_2.hide = False
                if hasattr(math_006_2, 'location'):
                    math_006_2.location = (-500.0, -20.0)
                if hasattr(math_006_2, 'mute'):
                    math_006_2.mute = False
                if hasattr(math_006_2, 'name'):
                    math_006_2.name = 'Math.006'
                if hasattr(math_006_2, 'operation'):
                    math_006_2.operation = 'SUBTRACT'
                if hasattr(math_006_2, 'use_clamp'):
                    math_006_2.use_clamp = False
                if hasattr(math_006_2, 'use_custom_color'):
                    math_006_2.use_custom_color = False
                if hasattr(math_006_2, 'width'):
                    math_006_2.width = 140.0
                input_ = next((input_ for input_ in math_006_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_006_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_006_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_006_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_008_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_008_2, 'color'):
                    math_008_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_008_2, 'hide'):
                    math_008_2.hide = False
                if hasattr(math_008_2, 'location'):
                    math_008_2.location = (-300.0, -60.0)
                if hasattr(math_008_2, 'mute'):
                    math_008_2.mute = False
                if hasattr(math_008_2, 'name'):
                    math_008_2.name = 'Math.008'
                if hasattr(math_008_2, 'operation'):
                    math_008_2.operation = 'ADD'
                if hasattr(math_008_2, 'use_clamp'):
                    math_008_2.use_clamp = False
                if hasattr(math_008_2, 'use_custom_color'):
                    math_008_2.use_custom_color = False
                if hasattr(math_008_2, 'width'):
                    math_008_2.width = 140.0
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_008_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_009_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_009_2, 'color'):
                    math_009_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_009_2, 'hide'):
                    math_009_2.hide = False
                if hasattr(math_009_2, 'location'):
                    math_009_2.location = (-400.0, -40.0)
                if hasattr(math_009_2, 'mute'):
                    math_009_2.mute = False
                if hasattr(math_009_2, 'name'):
                    math_009_2.name = 'Math.009'
                if hasattr(math_009_2, 'operation'):
                    math_009_2.operation = 'SUBTRACT'
                if hasattr(math_009_2, 'use_clamp'):
                    math_009_2.use_clamp = False
                if hasattr(math_009_2, 'use_custom_color'):
                    math_009_2.use_custom_color = False
                if hasattr(math_009_2, 'width'):
                    math_009_2.width = 140.0
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_009_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_007_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_007_2, 'color'):
                    math_007_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_007_2, 'hide'):
                    math_007_2.hide = False
                if hasattr(math_007_2, 'location'):
                    math_007_2.location = (-400.0, -60.0)
                if hasattr(math_007_2, 'mute'):
                    math_007_2.mute = False
                if hasattr(math_007_2, 'name'):
                    math_007_2.name = 'Math.007'
                if hasattr(math_007_2, 'operation'):
                    math_007_2.operation = 'ADD'
                if hasattr(math_007_2, 'use_clamp'):
                    math_007_2.use_clamp = False
                if hasattr(math_007_2, 'use_custom_color'):
                    math_007_2.use_custom_color = False
                if hasattr(math_007_2, 'width'):
                    math_007_2.width = 140.0
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_007_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-700.0, 0.0)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 145.58837890625
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'Mask_0'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_1'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Slot 2'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'Slot 3'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Slot 4'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Slot 5'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Slot 6'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-600.0, -20.0)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'label'):
                    mix_2.label = 'Slot 1 and 2'
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-300.0, -40.0)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'label'):
                    mix_001_2.label = 'Slot 3'
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-200.0, -20.0)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'label'):
                    mix_002_2.label = 'Slot 4'
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-100.0, 0.0)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.006658518221229315, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'ADD'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = False
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'RGBA'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Slot 6'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (-100.0, -20.0)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 169.16949462890625
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.04283957928419113, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 1.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(math_001_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(mix_004_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], mix_005_2.inputs[0])
                node_tree2.links.new(separate_rgb_002_2.outputs[0], math_2.inputs[0])
                node_tree2.links.new(math_2.outputs[0], math_001_2.inputs[0])
                node_tree2.links.new(math_002_2.outputs[0], math_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], math_002_2.inputs[0])
                node_tree2.links.new(math_003_2.outputs[0], mix_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[2], math_001_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[3], math_003_2.inputs[1])
                node_tree2.links.new(math_005_2.outputs[0], math_004_2.inputs[0])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], math_005_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], math_004_2.inputs[1])
                node_tree2.links.new(math_004_2.outputs[0], mix_002_2.inputs[0])
                node_tree2.links.new(math_006_2.outputs[0], math_007_2.inputs[0])
                node_tree2.links.new(math_009_2.outputs[0], math_008_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[5], math_007_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[6], math_008_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], math_006_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], math_009_2.inputs[0])
                node_tree2.links.new(math_007_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(math_008_2.outputs[0], mix_004_2.inputs[0])
                node_tree2.links.new(mix_002_2.outputs[2], group_output_2.inputs[0])
                node_tree2.links.new(mix_005_2.outputs[2], group_output_2.inputs[1])

            group_022_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_022_1, 'node_tree'):
                group_022_1.node_tree = bpy.data.node_groups.get('Infinite Masking Masks')
            if hasattr(group_022_1, 'color'):
                group_022_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_022_1, 'hide'):
                group_022_1.hide = False
            if hasattr(group_022_1, 'location'):
                group_022_1.location = (-2705.15869140625, 7.287872314453125)
            if hasattr(group_022_1, 'mute'):
                group_022_1.mute = False
            if hasattr(group_022_1, 'name'):
                group_022_1.name = 'Group.022'
            if hasattr(group_022_1, 'use_custom_color'):
                group_022_1.use_custom_color = False
            if hasattr(group_022_1, 'width'):
                group_022_1.width = 191.14303588867188
            if hasattr(group_022_1.inputs[0], 'default_value'):
                group_022_1.inputs[0].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_022_1.inputs[0], 'display_shape'):
                group_022_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[0], 'enabled'):
                group_022_1.inputs[0].enabled = True
            if hasattr(group_022_1.inputs[0], 'hide'):
                group_022_1.inputs[0].hide = False
            if hasattr(group_022_1.inputs[0], 'hide_value'):
                group_022_1.inputs[0].hide_value = False
            if hasattr(group_022_1.inputs[0], 'name'):
                group_022_1.inputs[0].name = 'Mask_0'
            if hasattr(group_022_1.inputs[0], 'show_expanded'):
                group_022_1.inputs[0].show_expanded = False
            if hasattr(group_022_1.inputs[1], 'default_value'):
                group_022_1.inputs[1].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_022_1.inputs[1], 'display_shape'):
                group_022_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[1], 'enabled'):
                group_022_1.inputs[1].enabled = True
            if hasattr(group_022_1.inputs[1], 'hide'):
                group_022_1.inputs[1].hide = False
            if hasattr(group_022_1.inputs[1], 'hide_value'):
                group_022_1.inputs[1].hide_value = False
            if hasattr(group_022_1.inputs[1], 'name'):
                group_022_1.inputs[1].name = 'Mask_1'
            if hasattr(group_022_1.inputs[1], 'show_expanded'):
                group_022_1.inputs[1].show_expanded = False
            if hasattr(group_022_1.inputs[2], 'default_value'):
                group_022_1.inputs[2].default_value = (0.0014430482406169176, 0.0014430482406169176, 0.0014430482406169176, 1.0)
            if hasattr(group_022_1.inputs[2], 'display_shape'):
                group_022_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[2], 'enabled'):
                group_022_1.inputs[2].enabled = True
            if hasattr(group_022_1.inputs[2], 'hide'):
                group_022_1.inputs[2].hide = False
            if hasattr(group_022_1.inputs[2], 'hide_value'):
                group_022_1.inputs[2].hide_value = False
            if hasattr(group_022_1.inputs[2], 'name'):
                group_022_1.inputs[2].name = 'Slot 2'
            if hasattr(group_022_1.inputs[2], 'show_expanded'):
                group_022_1.inputs[2].show_expanded = False
            if hasattr(group_022_1.inputs[3], 'default_value'):
                group_022_1.inputs[3].default_value = (0.000171088773640804, 0.000171088773640804, 0.000171088773640804, 1.0)
            if hasattr(group_022_1.inputs[3], 'display_shape'):
                group_022_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[3], 'enabled'):
                group_022_1.inputs[3].enabled = True
            if hasattr(group_022_1.inputs[3], 'hide'):
                group_022_1.inputs[3].hide = False
            if hasattr(group_022_1.inputs[3], 'hide_value'):
                group_022_1.inputs[3].hide_value = False
            if hasattr(group_022_1.inputs[3], 'name'):
                group_022_1.inputs[3].name = 'Slot 3'
            if hasattr(group_022_1.inputs[3], 'show_expanded'):
                group_022_1.inputs[3].show_expanded = False
            if hasattr(group_022_1.inputs[4], 'default_value'):
                group_022_1.inputs[4].default_value = (0.000171088773640804, 0.000171088773640804, 0.000171088773640804, 1.0)
            if hasattr(group_022_1.inputs[4], 'display_shape'):
                group_022_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[4], 'enabled'):
                group_022_1.inputs[4].enabled = True
            if hasattr(group_022_1.inputs[4], 'hide'):
                group_022_1.inputs[4].hide = False
            if hasattr(group_022_1.inputs[4], 'hide_value'):
                group_022_1.inputs[4].hide_value = False
            if hasattr(group_022_1.inputs[4], 'name'):
                group_022_1.inputs[4].name = 'Slot 4'
            if hasattr(group_022_1.inputs[4], 'show_expanded'):
                group_022_1.inputs[4].show_expanded = False
            if hasattr(group_022_1.inputs[5], 'default_value'):
                group_022_1.inputs[5].default_value = (0.000171088773640804, 0.000171088773640804, 0.000171088773640804, 1.0)
            if hasattr(group_022_1.inputs[5], 'display_shape'):
                group_022_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[5], 'enabled'):
                group_022_1.inputs[5].enabled = True
            if hasattr(group_022_1.inputs[5], 'hide'):
                group_022_1.inputs[5].hide = False
            if hasattr(group_022_1.inputs[5], 'hide_value'):
                group_022_1.inputs[5].hide_value = False
            if hasattr(group_022_1.inputs[5], 'name'):
                group_022_1.inputs[5].name = 'Slot 5'
            if hasattr(group_022_1.inputs[5], 'show_expanded'):
                group_022_1.inputs[5].show_expanded = False
            if hasattr(group_022_1.inputs[6], 'default_value'):
                group_022_1.inputs[6].default_value = (0.0001710902142804116, 0.0, 0.000131217238958925, 1.0)
            if hasattr(group_022_1.inputs[6], 'display_shape'):
                group_022_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_022_1.inputs[6], 'enabled'):
                group_022_1.inputs[6].enabled = True
            if hasattr(group_022_1.inputs[6], 'hide'):
                group_022_1.inputs[6].hide = False
            if hasattr(group_022_1.inputs[6], 'hide_value'):
                group_022_1.inputs[6].hide_value = False
            if hasattr(group_022_1.inputs[6], 'name'):
                group_022_1.inputs[6].name = 'Slot 6'
            if hasattr(group_022_1.inputs[6], 'show_expanded'):
                group_022_1.inputs[6].show_expanded = False
            if hasattr(group_022_1.outputs[0], 'default_value'):
                group_022_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_022_1.outputs[0], 'display_shape'):
                group_022_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_022_1.outputs[0], 'enabled'):
                group_022_1.outputs[0].enabled = True
            if hasattr(group_022_1.outputs[0], 'hide'):
                group_022_1.outputs[0].hide = False
            if hasattr(group_022_1.outputs[0], 'hide_value'):
                group_022_1.outputs[0].hide_value = False
            if hasattr(group_022_1.outputs[0], 'name'):
                group_022_1.outputs[0].name = 'Mask0_New'
            if hasattr(group_022_1.outputs[0], 'show_expanded'):
                group_022_1.outputs[0].show_expanded = False
            if hasattr(group_022_1.outputs[1], 'default_value'):
                group_022_1.outputs[1].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_022_1.outputs[1], 'display_shape'):
                group_022_1.outputs[1].display_shape = 'CIRCLE'
            if hasattr(group_022_1.outputs[1], 'enabled'):
                group_022_1.outputs[1].enabled = True
            if hasattr(group_022_1.outputs[1], 'hide'):
                group_022_1.outputs[1].hide = False
            if hasattr(group_022_1.outputs[1], 'hide_value'):
                group_022_1.outputs[1].hide_value = False
            if hasattr(group_022_1.outputs[1], 'name'):
                group_022_1.outputs[1].name = 'Mask1_New'
            if hasattr(group_022_1.outputs[1], 'show_expanded'):
                group_022_1.outputs[1].show_expanded = False

            principled_bsdf_1 = node_tree4.nodes.new('ShaderNodeBsdfPrincipled')
            if hasattr(principled_bsdf_1, 'color'):
                principled_bsdf_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(principled_bsdf_1, 'distribution'):
                principled_bsdf_1.distribution = 'GGX'
            if hasattr(principled_bsdf_1, 'hide'):
                principled_bsdf_1.hide = False
            if hasattr(principled_bsdf_1, 'location'):
                principled_bsdf_1.location = (3553.563720703125, 316.2340087890625)
            if hasattr(principled_bsdf_1, 'mute'):
                principled_bsdf_1.mute = False
            if hasattr(principled_bsdf_1, 'name'):
                principled_bsdf_1.name = 'Principled BSDF'
            if hasattr(principled_bsdf_1, 'subsurface_method'):
                principled_bsdf_1.subsurface_method = 'RANDOM_WALK'
            if hasattr(principled_bsdf_1, 'use_custom_color'):
                principled_bsdf_1.use_custom_color = False
            if hasattr(principled_bsdf_1, 'width'):
                principled_bsdf_1.width = 240.0
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Base Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.24415694177150726, 0.24415694177150726, 0.24415694177150726, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Base Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Subsurface'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Subsurface'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Subsurface Radius'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (1.0, 0.20000000298023224, 0.10000000149011612)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Subsurface Radius'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Subsurface Color'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Subsurface Color'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Subsurface IOR'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.399999976158142
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Subsurface IOR'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Subsurface Anisotropy'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Subsurface Anisotropy'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Metallic'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Metallic'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Specular'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Specular'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Specular Tint'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Specular Tint'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Roughness'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.5
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Roughness'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Anisotropic'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Anisotropic'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Anisotropic Rotation'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Anisotropic Rotation'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Sheen'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Sheen'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Sheen Tint'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Sheen Tint'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Clearcoat'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Clearcoat'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Clearcoat Roughness'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Clearcoat Roughness'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='IOR'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.4500000476837158
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'IOR'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Transmission'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Transmission'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Transmission Roughness'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Transmission Roughness'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Emission'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Emission'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Emission Strength'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 5.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Emission Strength'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Alpha'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 1.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Alpha'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Normal'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Normal'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Clearcoat Normal'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Clearcoat Normal'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Tangent'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Tangent'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            input_ = next((input_ for input_ in principled_bsdf_1.inputs if input_.identifier=='Weight'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = 0.0
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = False
                if hasattr(input_, 'hide'):
                    input_.hide = True
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = False
                if hasattr(input_, 'name'):
                    input_.name = 'Weight'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False

            image_texture_1 = node_tree4.nodes.new('ShaderNodeTexImage')
            if hasattr(image_texture_1, 'color'):
                image_texture_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(image_texture_1, 'extension'):
                image_texture_1.extension = 'REPEAT'
            if hasattr(image_texture_1, 'hide'):
                image_texture_1.hide = False
            if hasattr(image_texture_1, 'interpolation'):
                image_texture_1.interpolation = 'Smart'
            if hasattr(image_texture_1, 'location'):
                image_texture_1.location = (1345.4627685546875, 1413.3782958984375)
            if hasattr(image_texture_1, 'mute'):
                image_texture_1.mute = False
            if hasattr(image_texture_1, 'name'):
                image_texture_1.name = 'Image Texture'
            if hasattr(image_texture_1, 'projection'):
                image_texture_1.projection = 'FLAT'
            if hasattr(image_texture_1, 'projection_blend'):
                image_texture_1.projection_blend = 0.0
            if hasattr(image_texture_1, 'use_custom_color'):
                image_texture_1.use_custom_color = False
            if hasattr(image_texture_1, 'width'):
                image_texture_1.width = 240.0
            input_ = next((input_ for input_ in image_texture_1.inputs if input_.identifier=='Vector'), None)
            if input_:
                if hasattr(input_, 'default_value'):
                    input_.default_value = (0.0, 0.0, 0.0)
                if hasattr(input_, 'display_shape'):
                    input_.display_shape = 'CIRCLE'
                if hasattr(input_, 'enabled'):
                    input_.enabled = True
                if hasattr(input_, 'hide'):
                    input_.hide = False
                if hasattr(input_, 'hide_value'):
                    input_.hide_value = True
                if hasattr(input_, 'name'):
                    input_.name = 'Vector'
                if hasattr(input_, 'show_expanded'):
                    input_.show_expanded = False
            output = next((output for output in image_texture_1.outputs if output.identifier=='Color'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = False
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Color'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False
            output = next((output for output in image_texture_1.outputs if output.identifier=='Alpha'), None)
            if output:
                if hasattr(output, 'default_value'):
                    output.default_value = 0.0
                if hasattr(output, 'display_shape'):
                    output.display_shape = 'CIRCLE'
                if hasattr(output, 'enabled'):
                    output.enabled = True
                if hasattr(output, 'hide'):
                    output.hide = True
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Alpha'
                if hasattr(output, 'show_expanded'):
                    output.show_expanded = False

            node_tree2 = bpy.data.node_groups.get('Detail Normals (Chroma Mod)')
            if not node_tree2:
                node_tree2 = bpy.data.node_groups.new('Detail Normals (Chroma Mod)', 'ShaderNodeTree')
                for node in node_tree2.nodes:
                    node_tree2.nodes.remove(node)
                # INPUTS
                input = node_tree2.inputs.new('NodeSocketColor', 'ASG')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'ASG'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_0')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_0'
                input = node_tree2.inputs.new('NodeSocketColor', 'Mask_1')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Mask_1'
                input = node_tree2.inputs.new('NodeSocketColor', 'MainNormal')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.5, 0.5, 1.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'MainNormal'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-A')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-A'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-B')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-B'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-C')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-C'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-D')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-D'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-E')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-E'
                input = node_tree2.inputs.new('NodeSocketColor', 'Color-F')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Color-F'
                input = node_tree2.inputs.new('NodeSocketColor', 'Grime')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Grime'
                input = node_tree2.inputs.new('NodeSocketColor', 'Dust')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'name'):
                    input.name = 'Dust'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Scratch Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Scratch Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Grime Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 10000.0
                if hasattr(input, 'min_value'):
                    input.min_value = -10000.0
                if hasattr(input, 'name'):
                    input.name = 'Grime Amount'
                input = node_tree2.inputs.new('NodeSocketFloat', 'Dust Amount')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 2.0
                if hasattr(input, 'min_value'):
                    input.min_value = 0.0
                if hasattr(input, 'name'):
                    input.name = 'Dust Amount'
                input = node_tree2.inputs.new('NodeSocketFloatFactor', 'Detail Normal Toggle')
                if hasattr(input, 'attribute_domain'):
                    input.attribute_domain = 'POINT'
                if hasattr(input, 'default_value'):
                    input.default_value = 1.0
                if hasattr(input, 'hide_value'):
                    input.hide_value = False
                if hasattr(input, 'max_value'):
                    input.max_value = 1.0
                if hasattr(input, 'min_value'):
                    input.min_value = 0.0
                if hasattr(input, 'name'):
                    input.name = 'Detail Normal Toggle'
                # OUTPUTS
                output = node_tree2.outputs.new('NodeSocketColor', 'Normal')
                if hasattr(output, 'attribute_domain'):
                    output.attribute_domain = 'POINT'
                if hasattr(output, 'default_value'):
                    output.default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(output, 'hide_value'):
                    output.hide_value = False
                if hasattr(output, 'name'):
                    output.name = 'Normal'
                # NODES
                math_012_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_012_2, 'color'):
                    math_012_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_012_2, 'hide'):
                    math_012_2.hide = False
                if hasattr(math_012_2, 'location'):
                    math_012_2.location = (-400.928466796875, 1083.747802734375)
                if hasattr(math_012_2, 'mute'):
                    math_012_2.mute = False
                if hasattr(math_012_2, 'name'):
                    math_012_2.name = 'Math.012'
                if hasattr(math_012_2, 'operation'):
                    math_012_2.operation = 'SUBTRACT'
                if hasattr(math_012_2, 'use_clamp'):
                    math_012_2.use_clamp = False
                if hasattr(math_012_2, 'use_custom_color'):
                    math_012_2.use_custom_color = False
                if hasattr(math_012_2, 'width'):
                    math_012_2.width = 140.0
                input_ = next((input_ for input_ in math_012_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_012_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_012_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_012_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_011_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_011_2, 'color'):
                    math_011_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_011_2, 'hide'):
                    math_011_2.hide = False
                if hasattr(math_011_2, 'location'):
                    math_011_2.location = (-400.09942626953125, 1266.162109375)
                if hasattr(math_011_2, 'mute'):
                    math_011_2.mute = False
                if hasattr(math_011_2, 'name'):
                    math_011_2.name = 'Math.011'
                if hasattr(math_011_2, 'operation'):
                    math_011_2.operation = 'SUBTRACT'
                if hasattr(math_011_2, 'use_clamp'):
                    math_011_2.use_clamp = False
                if hasattr(math_011_2, 'use_custom_color'):
                    math_011_2.use_custom_color = False
                if hasattr(math_011_2, 'width'):
                    math_011_2.width = 140.0
                input_ = next((input_ for input_ in math_011_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_011_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_011_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_011_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_009_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_009_2, 'color'):
                    math_009_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_009_2, 'hide'):
                    math_009_2.hide = False
                if hasattr(math_009_2, 'label'):
                    math_009_2.label = 'Scratch'
                if hasattr(math_009_2, 'location'):
                    math_009_2.location = (-69.90155029296875, 1276.46826171875)
                if hasattr(math_009_2, 'mute'):
                    math_009_2.mute = False
                if hasattr(math_009_2, 'name'):
                    math_009_2.name = 'Math.009'
                if hasattr(math_009_2, 'operation'):
                    math_009_2.operation = 'ADD'
                if hasattr(math_009_2, 'use_clamp'):
                    math_009_2.use_clamp = True
                if hasattr(math_009_2, 'use_custom_color'):
                    math_009_2.use_custom_color = False
                if hasattr(math_009_2, 'width'):
                    math_009_2.width = 140.0
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_009_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_009_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_010_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_010_2, 'color'):
                    math_010_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_010_2, 'hide'):
                    math_010_2.hide = False
                if hasattr(math_010_2, 'location'):
                    math_010_2.location = (-380.75628662109375, 896.3024291992188)
                if hasattr(math_010_2, 'mute'):
                    math_010_2.mute = False
                if hasattr(math_010_2, 'name'):
                    math_010_2.name = 'Math.010'
                if hasattr(math_010_2, 'operation'):
                    math_010_2.operation = 'SUBTRACT'
                if hasattr(math_010_2, 'use_clamp'):
                    math_010_2.use_clamp = False
                if hasattr(math_010_2, 'use_custom_color'):
                    math_010_2.use_custom_color = False
                if hasattr(math_010_2, 'width'):
                    math_010_2.width = 140.0
                input_ = next((input_ for input_ in math_010_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_010_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_010_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_010_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_001_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_001_2, 'blend_type'):
                    mix_001_2.blend_type = 'MIX'
                if hasattr(mix_001_2, 'clamp_factor'):
                    mix_001_2.clamp_factor = True
                if hasattr(mix_001_2, 'clamp_result'):
                    mix_001_2.clamp_result = False
                if hasattr(mix_001_2, 'color'):
                    mix_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_001_2, 'data_type'):
                    mix_001_2.data_type = 'RGBA'
                if hasattr(mix_001_2, 'factor_mode'):
                    mix_001_2.factor_mode = 'UNIFORM'
                if hasattr(mix_001_2, 'hide'):
                    mix_001_2.hide = False
                if hasattr(mix_001_2, 'location'):
                    mix_001_2.location = (-670.0137939453125, 367.50067138671875)
                if hasattr(mix_001_2, 'mute'):
                    mix_001_2.mute = False
                if hasattr(mix_001_2, 'name'):
                    mix_001_2.name = 'Mix.001'
                if hasattr(mix_001_2, 'use_custom_color'):
                    mix_001_2.use_custom_color = False
                if hasattr(mix_001_2, 'width'):
                    mix_001_2.width = 140.0
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_001_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_001_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_002_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_002_2, 'blend_type'):
                    mix_002_2.blend_type = 'MIX'
                if hasattr(mix_002_2, 'clamp_factor'):
                    mix_002_2.clamp_factor = True
                if hasattr(mix_002_2, 'clamp_result'):
                    mix_002_2.clamp_result = False
                if hasattr(mix_002_2, 'color'):
                    mix_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_002_2, 'data_type'):
                    mix_002_2.data_type = 'RGBA'
                if hasattr(mix_002_2, 'factor_mode'):
                    mix_002_2.factor_mode = 'UNIFORM'
                if hasattr(mix_002_2, 'hide'):
                    mix_002_2.hide = False
                if hasattr(mix_002_2, 'location'):
                    mix_002_2.location = (-473.63037109375, 363.4728698730469)
                if hasattr(mix_002_2, 'mute'):
                    mix_002_2.mute = False
                if hasattr(mix_002_2, 'name'):
                    mix_002_2.name = 'Mix.002'
                if hasattr(mix_002_2, 'use_custom_color'):
                    mix_002_2.use_custom_color = False
                if hasattr(mix_002_2, 'width'):
                    mix_002_2.width = 140.0
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_002_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_002_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_003_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_003_2, 'blend_type'):
                    mix_003_2.blend_type = 'MIX'
                if hasattr(mix_003_2, 'clamp_factor'):
                    mix_003_2.clamp_factor = True
                if hasattr(mix_003_2, 'clamp_result'):
                    mix_003_2.clamp_result = False
                if hasattr(mix_003_2, 'color'):
                    mix_003_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_003_2, 'data_type'):
                    mix_003_2.data_type = 'RGBA'
                if hasattr(mix_003_2, 'factor_mode'):
                    mix_003_2.factor_mode = 'UNIFORM'
                if hasattr(mix_003_2, 'hide'):
                    mix_003_2.hide = False
                if hasattr(mix_003_2, 'location'):
                    mix_003_2.location = (-301.7841796875, 365.82666015625)
                if hasattr(mix_003_2, 'mute'):
                    mix_003_2.mute = False
                if hasattr(mix_003_2, 'name'):
                    mix_003_2.name = 'Mix.003'
                if hasattr(mix_003_2, 'use_custom_color'):
                    mix_003_2.use_custom_color = False
                if hasattr(mix_003_2, 'width'):
                    mix_003_2.width = 140.0
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_003_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_003_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_004_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_004_2, 'blend_type'):
                    mix_004_2.blend_type = 'MIX'
                if hasattr(mix_004_2, 'clamp_factor'):
                    mix_004_2.clamp_factor = True
                if hasattr(mix_004_2, 'clamp_result'):
                    mix_004_2.clamp_result = False
                if hasattr(mix_004_2, 'color'):
                    mix_004_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_004_2, 'data_type'):
                    mix_004_2.data_type = 'RGBA'
                if hasattr(mix_004_2, 'factor_mode'):
                    mix_004_2.factor_mode = 'UNIFORM'
                if hasattr(mix_004_2, 'hide'):
                    mix_004_2.hide = False
                if hasattr(mix_004_2, 'location'):
                    mix_004_2.location = (-127.23150634765625, 365.34185791015625)
                if hasattr(mix_004_2, 'mute'):
                    mix_004_2.mute = False
                if hasattr(mix_004_2, 'name'):
                    mix_004_2.name = 'Mix.004'
                if hasattr(mix_004_2, 'use_custom_color'):
                    mix_004_2.use_custom_color = False
                if hasattr(mix_004_2, 'width'):
                    mix_004_2.width = 140.0
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_004_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_004_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_007_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_007_2, 'color'):
                    math_007_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_007_2, 'hide'):
                    math_007_2.hide = False
                if hasattr(math_007_2, 'label'):
                    math_007_2.label = 'Dust'
                if hasattr(math_007_2, 'location'):
                    math_007_2.location = (-53.42236328125, 909.1626586914062)
                if hasattr(math_007_2, 'mute'):
                    math_007_2.mute = False
                if hasattr(math_007_2, 'name'):
                    math_007_2.name = 'Math.007'
                if hasattr(math_007_2, 'operation'):
                    math_007_2.operation = 'ADD'
                if hasattr(math_007_2, 'use_clamp'):
                    math_007_2.use_clamp = True
                if hasattr(math_007_2, 'use_custom_color'):
                    math_007_2.use_custom_color = False
                if hasattr(math_007_2, 'width'):
                    math_007_2.width = 140.0
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_007_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_007_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_005_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_005_2, 'blend_type'):
                    mix_005_2.blend_type = 'MIX'
                if hasattr(mix_005_2, 'clamp_factor'):
                    mix_005_2.clamp_factor = True
                if hasattr(mix_005_2, 'clamp_result'):
                    mix_005_2.clamp_result = False
                if hasattr(mix_005_2, 'color'):
                    mix_005_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_005_2, 'data_type'):
                    mix_005_2.data_type = 'RGBA'
                if hasattr(mix_005_2, 'factor_mode'):
                    mix_005_2.factor_mode = 'UNIFORM'
                if hasattr(mix_005_2, 'hide'):
                    mix_005_2.hide = False
                if hasattr(mix_005_2, 'label'):
                    mix_005_2.label = 'Dust'
                if hasattr(mix_005_2, 'location'):
                    mix_005_2.location = (62.10284423828125, 379.3305969238281)
                if hasattr(mix_005_2, 'mute'):
                    mix_005_2.mute = False
                if hasattr(mix_005_2, 'name'):
                    mix_005_2.name = 'Mix.005'
                if hasattr(mix_005_2, 'use_custom_color'):
                    mix_005_2.use_custom_color = False
                if hasattr(mix_005_2, 'width'):
                    mix_005_2.width = 140.0
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_005_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_005_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_006_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_006_2, 'blend_type'):
                    mix_006_2.blend_type = 'MIX'
                if hasattr(mix_006_2, 'clamp_factor'):
                    mix_006_2.clamp_factor = True
                if hasattr(mix_006_2, 'clamp_result'):
                    mix_006_2.clamp_result = False
                if hasattr(mix_006_2, 'color'):
                    mix_006_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_006_2, 'data_type'):
                    mix_006_2.data_type = 'RGBA'
                if hasattr(mix_006_2, 'factor_mode'):
                    mix_006_2.factor_mode = 'UNIFORM'
                if hasattr(mix_006_2, 'hide'):
                    mix_006_2.hide = False
                if hasattr(mix_006_2, 'label'):
                    mix_006_2.label = 'Scratch'
                if hasattr(mix_006_2, 'location'):
                    mix_006_2.location = (225.16224670410156, 384.31658935546875)
                if hasattr(mix_006_2, 'mute'):
                    mix_006_2.mute = False
                if hasattr(mix_006_2, 'name'):
                    mix_006_2.name = 'Mix.006'
                if hasattr(mix_006_2, 'use_custom_color'):
                    mix_006_2.use_custom_color = False
                if hasattr(mix_006_2, 'width'):
                    mix_006_2.width = 140.0
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_006_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_006_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_007_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_007_2, 'blend_type'):
                    mix_007_2.blend_type = 'MIX'
                if hasattr(mix_007_2, 'clamp_factor'):
                    mix_007_2.clamp_factor = True
                if hasattr(mix_007_2, 'clamp_result'):
                    mix_007_2.clamp_result = False
                if hasattr(mix_007_2, 'color'):
                    mix_007_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_007_2, 'data_type'):
                    mix_007_2.data_type = 'RGBA'
                if hasattr(mix_007_2, 'factor_mode'):
                    mix_007_2.factor_mode = 'UNIFORM'
                if hasattr(mix_007_2, 'hide'):
                    mix_007_2.hide = False
                if hasattr(mix_007_2, 'label'):
                    mix_007_2.label = 'Grime'
                if hasattr(mix_007_2, 'location'):
                    mix_007_2.location = (400.3974914550781, 378.2747497558594)
                if hasattr(mix_007_2, 'mute'):
                    mix_007_2.mute = False
                if hasattr(mix_007_2, 'name'):
                    mix_007_2.name = 'Mix.007'
                if hasattr(mix_007_2, 'use_custom_color'):
                    mix_007_2.use_custom_color = False
                if hasattr(mix_007_2, 'width'):
                    mix_007_2.width = 140.0
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_007_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_007_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                math_008_2 = node_tree2.nodes.new('ShaderNodeMath')
                if hasattr(math_008_2, 'color'):
                    math_008_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(math_008_2, 'hide'):
                    math_008_2.hide = False
                if hasattr(math_008_2, 'label'):
                    math_008_2.label = 'Grime'
                if hasattr(math_008_2, 'location'):
                    math_008_2.location = (-61.094482421875, 1105.439453125)
                if hasattr(math_008_2, 'mute'):
                    math_008_2.mute = False
                if hasattr(math_008_2, 'name'):
                    math_008_2.name = 'Math.008'
                if hasattr(math_008_2, 'operation'):
                    math_008_2.operation = 'ADD'
                if hasattr(math_008_2, 'use_clamp'):
                    math_008_2.use_clamp = False
                if hasattr(math_008_2, 'use_custom_color'):
                    math_008_2.use_custom_color = False
                if hasattr(math_008_2, 'width'):
                    math_008_2.width = 140.0
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value_001'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 1.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in math_008_2.inputs if input_.identifier=='Value_002'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Value'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in math_008_2.outputs if output.identifier=='Value'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Value'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_002_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_002_2, 'mode'):
                    separate_rgb_002_2.mode = 'RGB'
                if hasattr(separate_rgb_002_2, 'color'):
                    separate_rgb_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_002_2, 'hide'):
                    separate_rgb_002_2.hide = False
                if hasattr(separate_rgb_002_2, 'location'):
                    separate_rgb_002_2.location = (-861.2234497070312, 1125.5433349609375)
                if hasattr(separate_rgb_002_2, 'mute'):
                    separate_rgb_002_2.mute = False
                if hasattr(separate_rgb_002_2, 'name'):
                    separate_rgb_002_2.name = 'Separate RGB.002'
                if hasattr(separate_rgb_002_2, 'use_custom_color'):
                    separate_rgb_002_2.use_custom_color = False
                if hasattr(separate_rgb_002_2, 'width'):
                    separate_rgb_002_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_002_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_002_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_2, 'mode'):
                    separate_rgb_2.mode = 'RGB'
                if hasattr(separate_rgb_2, 'color'):
                    separate_rgb_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_2, 'hide'):
                    separate_rgb_2.hide = False
                if hasattr(separate_rgb_2, 'location'):
                    separate_rgb_2.location = (-895.7147216796875, 964.1780395507812)
                if hasattr(separate_rgb_2, 'mute'):
                    separate_rgb_2.mute = False
                if hasattr(separate_rgb_2, 'name'):
                    separate_rgb_2.name = 'Separate RGB'
                if hasattr(separate_rgb_2, 'use_custom_color'):
                    separate_rgb_2.use_custom_color = False
                if hasattr(separate_rgb_2, 'width'):
                    separate_rgb_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                separate_rgb_001_2 = node_tree2.nodes.new('ShaderNodeSeparateColor')
                if hasattr(separate_rgb_001_2, 'mode'):
                    separate_rgb_001_2.mode = 'RGB'
                if hasattr(separate_rgb_001_2, 'color'):
                    separate_rgb_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(separate_rgb_001_2, 'hide'):
                    separate_rgb_001_2.hide = False
                if hasattr(separate_rgb_001_2, 'location'):
                    separate_rgb_001_2.location = (-892.9122314453125, 757.7520141601562)
                if hasattr(separate_rgb_001_2, 'mute'):
                    separate_rgb_001_2.mute = False
                if hasattr(separate_rgb_001_2, 'name'):
                    separate_rgb_001_2.name = 'Separate RGB.001'
                if hasattr(separate_rgb_001_2, 'use_custom_color'):
                    separate_rgb_001_2.use_custom_color = False
                if hasattr(separate_rgb_001_2, 'width'):
                    separate_rgb_001_2.width = 140.0
                input_ = next((input_ for input_ in separate_rgb_001_2.inputs if input_.identifier=='Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Color'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Red'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Red'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Green'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Green'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in separate_rgb_001_2.outputs if output.identifier=='Blue'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Blue'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                mix_2 = node_tree2.nodes.new('ShaderNodeMix')
                if hasattr(mix_2, 'blend_type'):
                    mix_2.blend_type = 'MIX'
                if hasattr(mix_2, 'clamp_factor'):
                    mix_2.clamp_factor = True
                if hasattr(mix_2, 'clamp_result'):
                    mix_2.clamp_result = False
                if hasattr(mix_2, 'color'):
                    mix_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(mix_2, 'data_type'):
                    mix_2.data_type = 'RGBA'
                if hasattr(mix_2, 'factor_mode'):
                    mix_2.factor_mode = 'UNIFORM'
                if hasattr(mix_2, 'hide'):
                    mix_2.hide = False
                if hasattr(mix_2, 'location'):
                    mix_2.location = (-878.5439453125, 354.57696533203125)
                if hasattr(mix_2, 'mute'):
                    mix_2.mute = False
                if hasattr(mix_2, 'name'):
                    mix_2.name = 'Mix'
                if hasattr(mix_2, 'use_custom_color'):
                    mix_2.use_custom_color = False
                if hasattr(mix_2, 'width'):
                    mix_2.width = 140.0
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.5
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='Factor_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.5, 0.5, 0.5)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Factor'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Float'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Vector'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 0.0, 0.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = False
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='A_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (1.0, 0.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'A'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in mix_2.inputs if input_.identifier=='B_Color'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = (0.0, 1.0, 0.0, 1.0)
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'B'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Float'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = 0.0
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Vector'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = False
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False
                output = next((output for output in mix_2.outputs if output.identifier=='Result_Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Result'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                group_input_2 = node_tree2.nodes.new('NodeGroupInput')
                if hasattr(group_input_2, 'color'):
                    group_input_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_2, 'hide'):
                    group_input_2.hide = False
                if hasattr(group_input_2, 'location'):
                    group_input_2.location = (-1483.0567626953125, 489.8262023925781)
                if hasattr(group_input_2, 'mute'):
                    group_input_2.mute = False
                if hasattr(group_input_2, 'name'):
                    group_input_2.name = 'Group Input'
                if hasattr(group_input_2, 'use_custom_color'):
                    group_input_2.use_custom_color = False
                if hasattr(group_input_2, 'width'):
                    group_input_2.width = 184.6219940185547
                if hasattr(group_input_2.outputs[0], 'default_value'):
                    group_input_2.outputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[0], 'display_shape'):
                    group_input_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[0], 'enabled'):
                    group_input_2.outputs[0].enabled = True
                if hasattr(group_input_2.outputs[0], 'hide'):
                    group_input_2.outputs[0].hide = False
                if hasattr(group_input_2.outputs[0], 'hide_value'):
                    group_input_2.outputs[0].hide_value = False
                if hasattr(group_input_2.outputs[0], 'name'):
                    group_input_2.outputs[0].name = 'ASG'
                if hasattr(group_input_2.outputs[0], 'show_expanded'):
                    group_input_2.outputs[0].show_expanded = False
                if hasattr(group_input_2.outputs[1], 'default_value'):
                    group_input_2.outputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[1], 'display_shape'):
                    group_input_2.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[1], 'enabled'):
                    group_input_2.outputs[1].enabled = True
                if hasattr(group_input_2.outputs[1], 'hide'):
                    group_input_2.outputs[1].hide = False
                if hasattr(group_input_2.outputs[1], 'hide_value'):
                    group_input_2.outputs[1].hide_value = False
                if hasattr(group_input_2.outputs[1], 'name'):
                    group_input_2.outputs[1].name = 'Mask_0'
                if hasattr(group_input_2.outputs[1], 'show_expanded'):
                    group_input_2.outputs[1].show_expanded = False
                if hasattr(group_input_2.outputs[2], 'default_value'):
                    group_input_2.outputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
                if hasattr(group_input_2.outputs[2], 'display_shape'):
                    group_input_2.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[2], 'enabled'):
                    group_input_2.outputs[2].enabled = True
                if hasattr(group_input_2.outputs[2], 'hide'):
                    group_input_2.outputs[2].hide = False
                if hasattr(group_input_2.outputs[2], 'hide_value'):
                    group_input_2.outputs[2].hide_value = False
                if hasattr(group_input_2.outputs[2], 'name'):
                    group_input_2.outputs[2].name = 'Mask_1'
                if hasattr(group_input_2.outputs[2], 'show_expanded'):
                    group_input_2.outputs[2].show_expanded = False
                if hasattr(group_input_2.outputs[3], 'default_value'):
                    group_input_2.outputs[3].default_value = (0.5, 0.5, 0.5, 1.0)
                if hasattr(group_input_2.outputs[3], 'display_shape'):
                    group_input_2.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[3], 'enabled'):
                    group_input_2.outputs[3].enabled = True
                if hasattr(group_input_2.outputs[3], 'hide'):
                    group_input_2.outputs[3].hide = False
                if hasattr(group_input_2.outputs[3], 'hide_value'):
                    group_input_2.outputs[3].hide_value = False
                if hasattr(group_input_2.outputs[3], 'name'):
                    group_input_2.outputs[3].name = 'MainNormal'
                if hasattr(group_input_2.outputs[3], 'show_expanded'):
                    group_input_2.outputs[3].show_expanded = False
                if hasattr(group_input_2.outputs[4], 'default_value'):
                    group_input_2.outputs[4].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[4], 'display_shape'):
                    group_input_2.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[4], 'enabled'):
                    group_input_2.outputs[4].enabled = True
                if hasattr(group_input_2.outputs[4], 'hide'):
                    group_input_2.outputs[4].hide = False
                if hasattr(group_input_2.outputs[4], 'hide_value'):
                    group_input_2.outputs[4].hide_value = False
                if hasattr(group_input_2.outputs[4], 'name'):
                    group_input_2.outputs[4].name = 'Color-A'
                if hasattr(group_input_2.outputs[4], 'show_expanded'):
                    group_input_2.outputs[4].show_expanded = False
                if hasattr(group_input_2.outputs[5], 'default_value'):
                    group_input_2.outputs[5].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[5], 'display_shape'):
                    group_input_2.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[5], 'enabled'):
                    group_input_2.outputs[5].enabled = True
                if hasattr(group_input_2.outputs[5], 'hide'):
                    group_input_2.outputs[5].hide = False
                if hasattr(group_input_2.outputs[5], 'hide_value'):
                    group_input_2.outputs[5].hide_value = False
                if hasattr(group_input_2.outputs[5], 'name'):
                    group_input_2.outputs[5].name = 'Color-B'
                if hasattr(group_input_2.outputs[5], 'show_expanded'):
                    group_input_2.outputs[5].show_expanded = False
                if hasattr(group_input_2.outputs[6], 'default_value'):
                    group_input_2.outputs[6].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[6], 'display_shape'):
                    group_input_2.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[6], 'enabled'):
                    group_input_2.outputs[6].enabled = True
                if hasattr(group_input_2.outputs[6], 'hide'):
                    group_input_2.outputs[6].hide = False
                if hasattr(group_input_2.outputs[6], 'hide_value'):
                    group_input_2.outputs[6].hide_value = False
                if hasattr(group_input_2.outputs[6], 'name'):
                    group_input_2.outputs[6].name = 'Color-C'
                if hasattr(group_input_2.outputs[6], 'show_expanded'):
                    group_input_2.outputs[6].show_expanded = False
                if hasattr(group_input_2.outputs[7], 'default_value'):
                    group_input_2.outputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[7], 'display_shape'):
                    group_input_2.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[7], 'enabled'):
                    group_input_2.outputs[7].enabled = True
                if hasattr(group_input_2.outputs[7], 'hide'):
                    group_input_2.outputs[7].hide = False
                if hasattr(group_input_2.outputs[7], 'hide_value'):
                    group_input_2.outputs[7].hide_value = False
                if hasattr(group_input_2.outputs[7], 'name'):
                    group_input_2.outputs[7].name = 'Color-D'
                if hasattr(group_input_2.outputs[7], 'show_expanded'):
                    group_input_2.outputs[7].show_expanded = False
                if hasattr(group_input_2.outputs[8], 'default_value'):
                    group_input_2.outputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[8], 'display_shape'):
                    group_input_2.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[8], 'enabled'):
                    group_input_2.outputs[8].enabled = True
                if hasattr(group_input_2.outputs[8], 'hide'):
                    group_input_2.outputs[8].hide = False
                if hasattr(group_input_2.outputs[8], 'hide_value'):
                    group_input_2.outputs[8].hide_value = False
                if hasattr(group_input_2.outputs[8], 'name'):
                    group_input_2.outputs[8].name = 'Color-E'
                if hasattr(group_input_2.outputs[8], 'show_expanded'):
                    group_input_2.outputs[8].show_expanded = False
                if hasattr(group_input_2.outputs[9], 'default_value'):
                    group_input_2.outputs[9].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[9], 'display_shape'):
                    group_input_2.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[9], 'enabled'):
                    group_input_2.outputs[9].enabled = True
                if hasattr(group_input_2.outputs[9], 'hide'):
                    group_input_2.outputs[9].hide = False
                if hasattr(group_input_2.outputs[9], 'hide_value'):
                    group_input_2.outputs[9].hide_value = False
                if hasattr(group_input_2.outputs[9], 'name'):
                    group_input_2.outputs[9].name = 'Color-F'
                if hasattr(group_input_2.outputs[9], 'show_expanded'):
                    group_input_2.outputs[9].show_expanded = False
                if hasattr(group_input_2.outputs[10], 'default_value'):
                    group_input_2.outputs[10].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[10], 'display_shape'):
                    group_input_2.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[10], 'enabled'):
                    group_input_2.outputs[10].enabled = True
                if hasattr(group_input_2.outputs[10], 'hide'):
                    group_input_2.outputs[10].hide = False
                if hasattr(group_input_2.outputs[10], 'hide_value'):
                    group_input_2.outputs[10].hide_value = False
                if hasattr(group_input_2.outputs[10], 'name'):
                    group_input_2.outputs[10].name = 'Grime'
                if hasattr(group_input_2.outputs[10], 'show_expanded'):
                    group_input_2.outputs[10].show_expanded = False
                if hasattr(group_input_2.outputs[11], 'default_value'):
                    group_input_2.outputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_2.outputs[11], 'display_shape'):
                    group_input_2.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[11], 'enabled'):
                    group_input_2.outputs[11].enabled = True
                if hasattr(group_input_2.outputs[11], 'hide'):
                    group_input_2.outputs[11].hide = False
                if hasattr(group_input_2.outputs[11], 'hide_value'):
                    group_input_2.outputs[11].hide_value = False
                if hasattr(group_input_2.outputs[11], 'name'):
                    group_input_2.outputs[11].name = 'Dust'
                if hasattr(group_input_2.outputs[11], 'show_expanded'):
                    group_input_2.outputs[11].show_expanded = False
                if hasattr(group_input_2.outputs[12], 'default_value'):
                    group_input_2.outputs[12].default_value = 1.0
                if hasattr(group_input_2.outputs[12], 'display_shape'):
                    group_input_2.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[12], 'enabled'):
                    group_input_2.outputs[12].enabled = True
                if hasattr(group_input_2.outputs[12], 'hide'):
                    group_input_2.outputs[12].hide = False
                if hasattr(group_input_2.outputs[12], 'hide_value'):
                    group_input_2.outputs[12].hide_value = False
                if hasattr(group_input_2.outputs[12], 'name'):
                    group_input_2.outputs[12].name = 'Scratch Amount'
                if hasattr(group_input_2.outputs[12], 'show_expanded'):
                    group_input_2.outputs[12].show_expanded = False
                if hasattr(group_input_2.outputs[13], 'default_value'):
                    group_input_2.outputs[13].default_value = 1.0
                if hasattr(group_input_2.outputs[13], 'display_shape'):
                    group_input_2.outputs[13].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[13], 'enabled'):
                    group_input_2.outputs[13].enabled = True
                if hasattr(group_input_2.outputs[13], 'hide'):
                    group_input_2.outputs[13].hide = False
                if hasattr(group_input_2.outputs[13], 'hide_value'):
                    group_input_2.outputs[13].hide_value = False
                if hasattr(group_input_2.outputs[13], 'name'):
                    group_input_2.outputs[13].name = 'Grime Amount'
                if hasattr(group_input_2.outputs[13], 'show_expanded'):
                    group_input_2.outputs[13].show_expanded = False
                if hasattr(group_input_2.outputs[14], 'default_value'):
                    group_input_2.outputs[14].default_value = 1.0
                if hasattr(group_input_2.outputs[14], 'display_shape'):
                    group_input_2.outputs[14].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[14], 'enabled'):
                    group_input_2.outputs[14].enabled = True
                if hasattr(group_input_2.outputs[14], 'hide'):
                    group_input_2.outputs[14].hide = False
                if hasattr(group_input_2.outputs[14], 'hide_value'):
                    group_input_2.outputs[14].hide_value = False
                if hasattr(group_input_2.outputs[14], 'name'):
                    group_input_2.outputs[14].name = 'Dust Amount'
                if hasattr(group_input_2.outputs[14], 'show_expanded'):
                    group_input_2.outputs[14].show_expanded = False
                if hasattr(group_input_2.outputs[15], 'default_value'):
                    group_input_2.outputs[15].default_value = 1.0
                if hasattr(group_input_2.outputs[15], 'display_shape'):
                    group_input_2.outputs[15].display_shape = 'CIRCLE'
                if hasattr(group_input_2.outputs[15], 'enabled'):
                    group_input_2.outputs[15].enabled = True
                if hasattr(group_input_2.outputs[15], 'hide'):
                    group_input_2.outputs[15].hide = False
                if hasattr(group_input_2.outputs[15], 'hide_value'):
                    group_input_2.outputs[15].hide_value = False
                if hasattr(group_input_2.outputs[15], 'name'):
                    group_input_2.outputs[15].name = 'Detail Normal Toggle'
                if hasattr(group_input_2.outputs[15], 'show_expanded'):
                    group_input_2.outputs[15].show_expanded = False

                node_tree3 = bpy.data.node_groups.get('Norm Normalize')
                if not node_tree3:
                    node_tree3 = bpy.data.node_groups.new('Norm Normalize', 'ShaderNodeTree')
                    for node in node_tree3.nodes:
                        node_tree3.nodes.remove(node)
                    # INPUTS
                    input = node_tree3.inputs.new('NodeSocketVector', 'Normal')
                    if hasattr(input, 'attribute_domain'):
                        input.attribute_domain = 'POINT'
                    if hasattr(input, 'default_value'):
                        input.default_value = (0.5, 0.5, 1.0)
                    if hasattr(input, 'hide_value'):
                        input.hide_value = True
                    if hasattr(input, 'max_value'):
                        input.max_value = 1.0
                    if hasattr(input, 'min_value'):
                        input.min_value = 0.0
                    if hasattr(input, 'name'):
                        input.name = 'Normal'
                    # OUTPUTS
                    output = node_tree3.outputs.new('NodeSocketColor', 'Normal Normalized')
                    if hasattr(output, 'attribute_domain'):
                        output.attribute_domain = 'POINT'
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.5, 0.5, 1.0, 1.0)
                    if hasattr(output, 'hide_value'):
                        output.hide_value = True
                    if hasattr(output, 'name'):
                        output.name = 'Normal Normalized'
                    # NODES
                    frame_3 = node_tree3.nodes.new('NodeFrame')
                    if hasattr(frame_3, 'color'):
                        frame_3.color = (0.5, 0.5, 1.0)
                    if hasattr(frame_3, 'hide'):
                        frame_3.hide = False
                    if hasattr(frame_3, 'label'):
                        frame_3.label = 'Normalizer'
                    if hasattr(frame_3, 'label_size'):
                        frame_3.label_size = 64
                    if hasattr(frame_3, 'location'):
                        frame_3.location = (-814.832275390625, 125.10931396484375)
                    if hasattr(frame_3, 'mute'):
                        frame_3.mute = False
                    if hasattr(frame_3, 'name'):
                        frame_3.name = 'Frame'
                    if hasattr(frame_3, 'shrink'):
                        frame_3.shrink = True
                    if hasattr(frame_3, 'use_custom_color'):
                        frame_3.use_custom_color = True
                    if hasattr(frame_3, 'width'):
                        frame_3.width = 1940.0

                    math_107_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_107_3, 'parent'):
                        math_107_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_107_3, 'color'):
                        math_107_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_107_3, 'hide'):
                        math_107_3.hide = False
                    if hasattr(math_107_3, 'location'):
                        math_107_3.location = (220.0, 0.0)
                    if hasattr(math_107_3, 'mute'):
                        math_107_3.mute = False
                    if hasattr(math_107_3, 'name'):
                        math_107_3.name = 'Math.107'
                    if hasattr(math_107_3, 'operation'):
                        math_107_3.operation = 'MULTIPLY_ADD'
                    if hasattr(math_107_3, 'use_clamp'):
                        math_107_3.use_clamp = False
                    if hasattr(math_107_3, 'use_custom_color'):
                        math_107_3.use_custom_color = False
                    if hasattr(math_107_3, 'width'):
                        math_107_3.width = 140.0
                    input_ = next((input_ for input_ in math_107_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_107_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 2.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_107_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = -1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_107_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_108_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_108_3, 'parent'):
                        math_108_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_108_3, 'color'):
                        math_108_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_108_3, 'hide'):
                        math_108_3.hide = False
                    if hasattr(math_108_3, 'location'):
                        math_108_3.location = (220.0, -180.0)
                    if hasattr(math_108_3, 'mute'):
                        math_108_3.mute = False
                    if hasattr(math_108_3, 'name'):
                        math_108_3.name = 'Math.108'
                    if hasattr(math_108_3, 'operation'):
                        math_108_3.operation = 'MULTIPLY_ADD'
                    if hasattr(math_108_3, 'use_clamp'):
                        math_108_3.use_clamp = False
                    if hasattr(math_108_3, 'use_custom_color'):
                        math_108_3.use_custom_color = False
                    if hasattr(math_108_3, 'width'):
                        math_108_3.width = 140.0
                    input_ = next((input_ for input_ in math_108_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_108_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 2.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_108_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = -1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_108_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_106_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_106_3, 'parent'):
                        math_106_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_106_3, 'color'):
                        math_106_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_106_3, 'hide'):
                        math_106_3.hide = False
                    if hasattr(math_106_3, 'location'):
                        math_106_3.location = (960.0, -100.0001220703125)
                    if hasattr(math_106_3, 'mute'):
                        math_106_3.mute = False
                    if hasattr(math_106_3, 'name'):
                        math_106_3.name = 'Math.106'
                    if hasattr(math_106_3, 'operation'):
                        math_106_3.operation = 'SQRT'
                    if hasattr(math_106_3, 'use_clamp'):
                        math_106_3.use_clamp = False
                    if hasattr(math_106_3, 'use_custom_color'):
                        math_106_3.use_custom_color = False
                    if hasattr(math_106_3, 'width'):
                        math_106_3.width = 140.0
                    input_ = next((input_ for input_ in math_106_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_106_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_106_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_106_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    combine_xyz_004_3 = node_tree3.nodes.new('ShaderNodeCombineXYZ')
                    if hasattr(combine_xyz_004_3, 'parent'):
                        combine_xyz_004_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(combine_xyz_004_3, 'color'):
                        combine_xyz_004_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(combine_xyz_004_3, 'hide'):
                        combine_xyz_004_3.hide = False
                    if hasattr(combine_xyz_004_3, 'location'):
                        combine_xyz_004_3.location = (1180.0, -140.0)
                    if hasattr(combine_xyz_004_3, 'mute'):
                        combine_xyz_004_3.mute = False
                    if hasattr(combine_xyz_004_3, 'name'):
                        combine_xyz_004_3.name = 'Combine XYZ.004'
                    if hasattr(combine_xyz_004_3, 'use_custom_color'):
                        combine_xyz_004_3.use_custom_color = False
                    if hasattr(combine_xyz_004_3, 'width'):
                        combine_xyz_004_3.width = 140.0
                    input_ = next((input_ for input_ in combine_xyz_004_3.inputs if input_.identifier=='X'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'X'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in combine_xyz_004_3.inputs if input_.identifier=='Y'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Y'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in combine_xyz_004_3.inputs if input_.identifier=='Z'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Z'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in combine_xyz_004_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_3, 'parent'):
                        vector_math_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(vector_math_3, 'color'):
                        vector_math_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_3, 'hide'):
                        vector_math_3.hide = False
                    if hasattr(vector_math_3, 'location'):
                        vector_math_3.location = (1340.0, -140.0)
                    if hasattr(vector_math_3, 'mute'):
                        vector_math_3.mute = False
                    if hasattr(vector_math_3, 'name'):
                        vector_math_3.name = 'Vector Math'
                    if hasattr(vector_math_3, 'operation'):
                        vector_math_3.operation = 'NORMALIZE'
                    if hasattr(vector_math_3, 'use_custom_color'):
                        vector_math_3.use_custom_color = False
                    if hasattr(vector_math_3, 'width'):
                        vector_math_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    mix_028_3 = node_tree3.nodes.new('ShaderNodeMix')
                    if hasattr(mix_028_3, 'parent'):
                        mix_028_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(mix_028_3, 'blend_type'):
                        mix_028_3.blend_type = 'ADD'
                    if hasattr(mix_028_3, 'clamp_factor'):
                        mix_028_3.clamp_factor = True
                    if hasattr(mix_028_3, 'clamp_result'):
                        mix_028_3.clamp_result = False
                    if hasattr(mix_028_3, 'color'):
                        mix_028_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(mix_028_3, 'data_type'):
                        mix_028_3.data_type = 'RGBA'
                    if hasattr(mix_028_3, 'factor_mode'):
                        mix_028_3.factor_mode = 'UNIFORM'
                    if hasattr(mix_028_3, 'hide'):
                        mix_028_3.hide = False
                    if hasattr(mix_028_3, 'location'):
                        mix_028_3.location = (1520.0, -140.0)
                    if hasattr(mix_028_3, 'mute'):
                        mix_028_3.mute = False
                    if hasattr(mix_028_3, 'name'):
                        mix_028_3.name = 'Mix.028'
                    if hasattr(mix_028_3, 'use_custom_color'):
                        mix_028_3.use_custom_color = False
                    if hasattr(mix_028_3, 'width'):
                        mix_028_3.width = 140.0
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='Factor_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='Factor_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='A_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='B_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='A_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='B_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='A_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_028_3.inputs if input_.identifier=='B_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, 1.0, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in mix_028_3.outputs if output.identifier=='Result_Float'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_028_3.outputs if output.identifier=='Result_Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_028_3.outputs if output.identifier=='Result_Color'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    separate_xyz_001_3 = node_tree3.nodes.new('ShaderNodeSeparateXYZ')
                    if hasattr(separate_xyz_001_3, 'parent'):
                        separate_xyz_001_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(separate_xyz_001_3, 'color'):
                        separate_xyz_001_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(separate_xyz_001_3, 'hide'):
                        separate_xyz_001_3.hide = False
                    if hasattr(separate_xyz_001_3, 'location'):
                        separate_xyz_001_3.location = (-40.0, -100.0001220703125)
                    if hasattr(separate_xyz_001_3, 'mute'):
                        separate_xyz_001_3.mute = False
                    if hasattr(separate_xyz_001_3, 'name'):
                        separate_xyz_001_3.name = 'Separate XYZ.001'
                    if hasattr(separate_xyz_001_3, 'use_custom_color'):
                        separate_xyz_001_3.use_custom_color = False
                    if hasattr(separate_xyz_001_3, 'width'):
                        separate_xyz_001_3.width = 140.0
                    input_ = next((input_ for input_ in separate_xyz_001_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in separate_xyz_001_3.outputs if output.identifier=='X'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'X'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in separate_xyz_001_3.outputs if output.identifier=='Y'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Y'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in separate_xyz_001_3.outputs if output.identifier=='Z'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Z'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_111_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_111_3, 'parent'):
                        math_111_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_111_3, 'color'):
                        math_111_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_111_3, 'hide'):
                        math_111_3.hide = False
                    if hasattr(math_111_3, 'location'):
                        math_111_3.location = (780.0, -280.0)
                    if hasattr(math_111_3, 'mute'):
                        math_111_3.mute = False
                    if hasattr(math_111_3, 'name'):
                        math_111_3.name = 'Math.111'
                    if hasattr(math_111_3, 'operation'):
                        math_111_3.operation = 'MULTIPLY'
                    if hasattr(math_111_3, 'use_clamp'):
                        math_111_3.use_clamp = False
                    if hasattr(math_111_3, 'use_custom_color'):
                        math_111_3.use_custom_color = False
                    if hasattr(math_111_3, 'width'):
                        math_111_3.width = 140.0
                    input_ = next((input_ for input_ in math_111_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_111_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_111_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_111_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_035_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_035_3, 'parent'):
                        math_035_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_035_3, 'color'):
                        math_035_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_035_3, 'hide'):
                        math_035_3.hide = False
                    if hasattr(math_035_3, 'location'):
                        math_035_3.location = (780.0, -80.0)
                    if hasattr(math_035_3, 'mute'):
                        math_035_3.mute = False
                    if hasattr(math_035_3, 'name'):
                        math_035_3.name = 'Math.035'
                    if hasattr(math_035_3, 'operation'):
                        math_035_3.operation = 'SUBTRACT'
                    if hasattr(math_035_3, 'use_clamp'):
                        math_035_3.use_clamp = False
                    if hasattr(math_035_3, 'use_custom_color'):
                        math_035_3.use_custom_color = False
                    if hasattr(math_035_3, 'width'):
                        math_035_3.width = 140.0
                    input_ = next((input_ for input_ in math_035_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_035_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_035_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_035_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_110_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_110_3, 'parent'):
                        math_110_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_110_3, 'color'):
                        math_110_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_110_3, 'hide'):
                        math_110_3.hide = False
                    if hasattr(math_110_3, 'location'):
                        math_110_3.location = (600.0, -80.0)
                    if hasattr(math_110_3, 'mute'):
                        math_110_3.mute = False
                    if hasattr(math_110_3, 'name'):
                        math_110_3.name = 'Math.110'
                    if hasattr(math_110_3, 'operation'):
                        math_110_3.operation = 'MULTIPLY_ADD'
                    if hasattr(math_110_3, 'use_clamp'):
                        math_110_3.use_clamp = True
                    if hasattr(math_110_3, 'use_custom_color'):
                        math_110_3.use_custom_color = False
                    if hasattr(math_110_3, 'width'):
                        math_110_3.width = 140.0
                    input_ = next((input_ for input_ in math_110_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_110_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_110_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_110_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    math_109_3 = node_tree3.nodes.new('ShaderNodeMath')
                    if hasattr(math_109_3, 'parent'):
                        math_109_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(math_109_3, 'color'):
                        math_109_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(math_109_3, 'hide'):
                        math_109_3.hide = False
                    if hasattr(math_109_3, 'location'):
                        math_109_3.location = (400.0, -180.0)
                    if hasattr(math_109_3, 'mute'):
                        math_109_3.mute = False
                    if hasattr(math_109_3, 'name'):
                        math_109_3.name = 'Math.109'
                    if hasattr(math_109_3, 'operation'):
                        math_109_3.operation = 'MULTIPLY'
                    if hasattr(math_109_3, 'use_clamp'):
                        math_109_3.use_clamp = False
                    if hasattr(math_109_3, 'use_custom_color'):
                        math_109_3.use_custom_color = False
                    if hasattr(math_109_3, 'width'):
                        math_109_3.width = 140.0
                    input_ = next((input_ for input_ in math_109_3.inputs if input_.identifier=='Value'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_109_3.inputs if input_.identifier=='Value_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in math_109_3.inputs if input_.identifier=='Value_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Value'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in math_109_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    mix_024_3 = node_tree3.nodes.new('ShaderNodeMix')
                    if hasattr(mix_024_3, 'parent'):
                        mix_024_3.parent = node_tree3.nodes.get('Frame')
                    if hasattr(mix_024_3, 'blend_type'):
                        mix_024_3.blend_type = 'DIVIDE'
                    if hasattr(mix_024_3, 'clamp_factor'):
                        mix_024_3.clamp_factor = True
                    if hasattr(mix_024_3, 'clamp_result'):
                        mix_024_3.clamp_result = False
                    if hasattr(mix_024_3, 'color'):
                        mix_024_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(mix_024_3, 'data_type'):
                        mix_024_3.data_type = 'RGBA'
                    if hasattr(mix_024_3, 'factor_mode'):
                        mix_024_3.factor_mode = 'UNIFORM'
                    if hasattr(mix_024_3, 'hide'):
                        mix_024_3.hide = False
                    if hasattr(mix_024_3, 'location'):
                        mix_024_3.location = (1700.0, -140.0)
                    if hasattr(mix_024_3, 'mute'):
                        mix_024_3.mute = False
                    if hasattr(mix_024_3, 'name'):
                        mix_024_3.name = 'Mix.024'
                    if hasattr(mix_024_3, 'use_custom_color'):
                        mix_024_3.use_custom_color = False
                    if hasattr(mix_024_3, 'width'):
                        mix_024_3.width = 140.0
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='Factor_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='Factor_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='A_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='B_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='A_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='B_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='A_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_024_3.inputs if input_.identifier=='B_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (2.0, 2.0, 2.0, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in mix_024_3.outputs if output.identifier=='Result_Float'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_024_3.outputs if output.identifier=='Result_Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_024_3.outputs if output.identifier=='Result_Color'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    group_input_3 = node_tree3.nodes.new('NodeGroupInput')
                    if hasattr(group_input_3, 'color'):
                        group_input_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(group_input_3, 'hide'):
                        group_input_3.hide = False
                    if hasattr(group_input_3, 'location'):
                        group_input_3.location = (-1085.167724609375, -0.0)
                    if hasattr(group_input_3, 'mute'):
                        group_input_3.mute = False
                    if hasattr(group_input_3, 'name'):
                        group_input_3.name = 'Group Input'
                    if hasattr(group_input_3, 'use_custom_color'):
                        group_input_3.use_custom_color = False
                    if hasattr(group_input_3, 'width'):
                        group_input_3.width = 140.0
                    if hasattr(group_input_3.outputs[0], 'default_value'):
                        group_input_3.outputs[0].default_value = (0.0, 0.0, 0.0)
                    if hasattr(group_input_3.outputs[0], 'display_shape'):
                        group_input_3.outputs[0].display_shape = 'CIRCLE'
                    if hasattr(group_input_3.outputs[0], 'enabled'):
                        group_input_3.outputs[0].enabled = True
                    if hasattr(group_input_3.outputs[0], 'hide'):
                        group_input_3.outputs[0].hide = False
                    if hasattr(group_input_3.outputs[0], 'hide_value'):
                        group_input_3.outputs[0].hide_value = True
                    if hasattr(group_input_3.outputs[0], 'name'):
                        group_input_3.outputs[0].name = 'Normal'
                    if hasattr(group_input_3.outputs[0], 'show_expanded'):
                        group_input_3.outputs[0].show_expanded = False

                    group_output_3 = node_tree3.nodes.new('NodeGroupOutput')
                    if hasattr(group_output_3, 'color'):
                        group_output_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(group_output_3, 'hide'):
                        group_output_3.hide = False
                    if hasattr(group_output_3, 'is_active_output'):
                        group_output_3.is_active_output = True
                    if hasattr(group_output_3, 'location'):
                        group_output_3.location = (1104.832275390625, -0.0)
                    if hasattr(group_output_3, 'mute'):
                        group_output_3.mute = False
                    if hasattr(group_output_3, 'name'):
                        group_output_3.name = 'Group Output'
                    if hasattr(group_output_3, 'use_custom_color'):
                        group_output_3.use_custom_color = False
                    if hasattr(group_output_3, 'width'):
                        group_output_3.width = 140.0
                    if hasattr(group_output_3.inputs[0], 'default_value'):
                        group_output_3.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(group_output_3.inputs[0], 'display_shape'):
                        group_output_3.inputs[0].display_shape = 'CIRCLE'
                    if hasattr(group_output_3.inputs[0], 'enabled'):
                        group_output_3.inputs[0].enabled = True
                    if hasattr(group_output_3.inputs[0], 'hide'):
                        group_output_3.inputs[0].hide = False
                    if hasattr(group_output_3.inputs[0], 'hide_value'):
                        group_output_3.inputs[0].hide_value = True
                    if hasattr(group_output_3.inputs[0], 'name'):
                        group_output_3.inputs[0].name = 'Normal Normalized'
                    if hasattr(group_output_3.inputs[0], 'show_expanded'):
                        group_output_3.inputs[0].show_expanded = False

                    # LINKS
                    node_tree3.links.new(group_input_3.outputs[0], separate_xyz_001_3.inputs[0])
                    node_tree3.links.new(mix_024_3.outputs[2], group_output_3.inputs[0])
                    node_tree3.links.new(combine_xyz_004_3.outputs[0], vector_math_3.inputs[0])
                    node_tree3.links.new(math_110_3.outputs[0], math_035_3.inputs[1])
                    node_tree3.links.new(math_111_3.outputs[0], combine_xyz_004_3.inputs[1])
                    node_tree3.links.new(math_035_3.outputs[0], math_106_3.inputs[0])
                    node_tree3.links.new(math_106_3.outputs[0], combine_xyz_004_3.inputs[2])
                    node_tree3.links.new(mix_028_3.outputs[2], mix_024_3.inputs[6])
                    node_tree3.links.new(vector_math_3.outputs[0], mix_028_3.inputs[6])
                    node_tree3.links.new(math_109_3.outputs[0], math_110_3.inputs[2])
                    node_tree3.links.new(math_107_3.outputs[0], math_110_3.inputs[0])
                    node_tree3.links.new(math_107_3.outputs[0], math_110_3.inputs[1])
                    node_tree3.links.new(math_108_3.outputs[0], math_109_3.inputs[1])
                    node_tree3.links.new(math_108_3.outputs[0], math_109_3.inputs[0])
                    node_tree3.links.new(math_108_3.outputs[0], math_111_3.inputs[0])
                    node_tree3.links.new(math_107_3.outputs[0], combine_xyz_004_3.inputs[0])
                    node_tree3.links.new(separate_xyz_001_3.outputs[0], math_107_3.inputs[0])
                    node_tree3.links.new(separate_xyz_001_3.outputs[1], math_108_3.inputs[0])

                group_2 = node_tree2.nodes.new('ShaderNodeGroup')
                if hasattr(group_2, 'node_tree'):
                    group_2.node_tree = bpy.data.node_groups.get('Norm Normalize')
                if hasattr(group_2, 'color'):
                    group_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_2, 'hide'):
                    group_2.hide = False
                if hasattr(group_2, 'location'):
                    group_2.location = (611.7042846679688, 328.9756164550781)
                if hasattr(group_2, 'mute'):
                    group_2.mute = False
                if hasattr(group_2, 'name'):
                    group_2.name = 'Group'
                if hasattr(group_2, 'use_custom_color'):
                    group_2.use_custom_color = False
                if hasattr(group_2, 'width'):
                    group_2.width = 140.0
                if hasattr(group_2.inputs[0], 'default_value'):
                    group_2.inputs[0].default_value = (0.0, 0.0, 0.0)
                if hasattr(group_2.inputs[0], 'display_shape'):
                    group_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_2.inputs[0], 'enabled'):
                    group_2.inputs[0].enabled = True
                if hasattr(group_2.inputs[0], 'hide'):
                    group_2.inputs[0].hide = False
                if hasattr(group_2.inputs[0], 'hide_value'):
                    group_2.inputs[0].hide_value = True
                if hasattr(group_2.inputs[0], 'name'):
                    group_2.inputs[0].name = 'Normal'
                if hasattr(group_2.inputs[0], 'show_expanded'):
                    group_2.inputs[0].show_expanded = False
                if hasattr(group_2.outputs[0], 'default_value'):
                    group_2.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_2.outputs[0], 'display_shape'):
                    group_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_2.outputs[0], 'enabled'):
                    group_2.outputs[0].enabled = True
                if hasattr(group_2.outputs[0], 'hide'):
                    group_2.outputs[0].hide = False
                if hasattr(group_2.outputs[0], 'hide_value'):
                    group_2.outputs[0].hide_value = True
                if hasattr(group_2.outputs[0], 'name'):
                    group_2.outputs[0].name = 'Normal Normalized'
                if hasattr(group_2.outputs[0], 'show_expanded'):
                    group_2.outputs[0].show_expanded = False

                node_tree3 = bpy.data.node_groups.get('NormalMap_Combine-Orientation')
                if not node_tree3:
                    node_tree3 = bpy.data.node_groups.new('NormalMap_Combine-Orientation', 'ShaderNodeTree')
                    for node in node_tree3.nodes:
                        node_tree3.nodes.remove(node)
                    # INPUTS
                    input = node_tree3.inputs.new('NodeSocketFloatFactor', 'Factor')
                    if hasattr(input, 'attribute_domain'):
                        input.attribute_domain = 'POINT'
                    if hasattr(input, 'default_value'):
                        input.default_value = 0.5
                    if hasattr(input, 'hide_value'):
                        input.hide_value = False
                    if hasattr(input, 'max_value'):
                        input.max_value = 1.0
                    if hasattr(input, 'min_value'):
                        input.min_value = 0.0
                    if hasattr(input, 'name'):
                        input.name = 'Factor'
                    input = node_tree3.inputs.new('NodeSocketColor', 'Base')
                    if hasattr(input, 'attribute_domain'):
                        input.attribute_domain = 'POINT'
                    if hasattr(input, 'default_value'):
                        input.default_value = (0.5, 0.5, 1.0, 1.0)
                    if hasattr(input, 'hide_value'):
                        input.hide_value = False
                    if hasattr(input, 'name'):
                        input.name = 'Base'
                    input = node_tree3.inputs.new('NodeSocketColor', 'Detail')
                    if hasattr(input, 'attribute_domain'):
                        input.attribute_domain = 'POINT'
                    if hasattr(input, 'default_value'):
                        input.default_value = (0.5, 0.5, 1.0, 1.0)
                    if hasattr(input, 'hide_value'):
                        input.hide_value = False
                    if hasattr(input, 'name'):
                        input.name = 'Detail'
                    # OUTPUTS
                    output = node_tree3.outputs.new('NodeSocketColor', 'Combined Normal Map')
                    if hasattr(output, 'attribute_domain'):
                        output.attribute_domain = 'POINT'
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.5, 0.5, 1.0, 1.0)
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Combined Normal Map'
                    # NODES
                    group_input_3 = node_tree3.nodes.new('NodeGroupInput')
                    if hasattr(group_input_3, 'color'):
                        group_input_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(group_input_3, 'hide'):
                        group_input_3.hide = False
                    if hasattr(group_input_3, 'location'):
                        group_input_3.location = (-680.1478271484375, -1.7763557434082031)
                    if hasattr(group_input_3, 'mute'):
                        group_input_3.mute = False
                    if hasattr(group_input_3, 'name'):
                        group_input_3.name = 'Group Input'
                    if hasattr(group_input_3, 'use_custom_color'):
                        group_input_3.use_custom_color = False
                    if hasattr(group_input_3, 'width'):
                        group_input_3.width = 140.0
                    if hasattr(group_input_3.outputs[0], 'default_value'):
                        group_input_3.outputs[0].default_value = 0.5
                    if hasattr(group_input_3.outputs[0], 'display_shape'):
                        group_input_3.outputs[0].display_shape = 'CIRCLE'
                    if hasattr(group_input_3.outputs[0], 'enabled'):
                        group_input_3.outputs[0].enabled = True
                    if hasattr(group_input_3.outputs[0], 'hide'):
                        group_input_3.outputs[0].hide = False
                    if hasattr(group_input_3.outputs[0], 'hide_value'):
                        group_input_3.outputs[0].hide_value = False
                    if hasattr(group_input_3.outputs[0], 'name'):
                        group_input_3.outputs[0].name = 'Factor'
                    if hasattr(group_input_3.outputs[0], 'show_expanded'):
                        group_input_3.outputs[0].show_expanded = False
                    if hasattr(group_input_3.outputs[1], 'default_value'):
                        group_input_3.outputs[1].default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(group_input_3.outputs[1], 'display_shape'):
                        group_input_3.outputs[1].display_shape = 'CIRCLE'
                    if hasattr(group_input_3.outputs[1], 'enabled'):
                        group_input_3.outputs[1].enabled = True
                    if hasattr(group_input_3.outputs[1], 'hide'):
                        group_input_3.outputs[1].hide = False
                    if hasattr(group_input_3.outputs[1], 'hide_value'):
                        group_input_3.outputs[1].hide_value = False
                    if hasattr(group_input_3.outputs[1], 'name'):
                        group_input_3.outputs[1].name = 'Base'
                    if hasattr(group_input_3.outputs[1], 'show_expanded'):
                        group_input_3.outputs[1].show_expanded = False
                    if hasattr(group_input_3.outputs[2], 'default_value'):
                        group_input_3.outputs[2].default_value = (0.5, 0.5, 0.5, 1.0)
                    if hasattr(group_input_3.outputs[2], 'display_shape'):
                        group_input_3.outputs[2].display_shape = 'CIRCLE'
                    if hasattr(group_input_3.outputs[2], 'enabled'):
                        group_input_3.outputs[2].enabled = True
                    if hasattr(group_input_3.outputs[2], 'hide'):
                        group_input_3.outputs[2].hide = False
                    if hasattr(group_input_3.outputs[2], 'hide_value'):
                        group_input_3.outputs[2].hide_value = False
                    if hasattr(group_input_3.outputs[2], 'name'):
                        group_input_3.outputs[2].name = 'Detail'
                    if hasattr(group_input_3.outputs[2], 'show_expanded'):
                        group_input_3.outputs[2].show_expanded = False

                    reroute_003_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_003_3, 'color'):
                        reroute_003_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_003_3, 'hide'):
                        reroute_003_3.hide = False
                    if hasattr(reroute_003_3, 'location'):
                        reroute_003_3.location = (-473.7449645996094, -55.63496780395508)
                    if hasattr(reroute_003_3, 'mute'):
                        reroute_003_3.mute = False
                    if hasattr(reroute_003_3, 'name'):
                        reroute_003_3.name = 'Reroute.003'
                    if hasattr(reroute_003_3, 'use_custom_color'):
                        reroute_003_3.use_custom_color = False
                    if hasattr(reroute_003_3, 'width'):
                        reroute_003_3.width = 16.0

                    reroute_002_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_002_3, 'color'):
                        reroute_002_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_002_3, 'hide'):
                        reroute_002_3.hide = False
                    if hasattr(reroute_002_3, 'location'):
                        reroute_002_3.location = (-472.5776062011719, 236.6663818359375)
                    if hasattr(reroute_002_3, 'mute'):
                        reroute_002_3.mute = False
                    if hasattr(reroute_002_3, 'name'):
                        reroute_002_3.name = 'Reroute.002'
                    if hasattr(reroute_002_3, 'use_custom_color'):
                        reroute_002_3.use_custom_color = False
                    if hasattr(reroute_002_3, 'width'):
                        reroute_002_3.width = 16.0

                    reroute_001_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_001_3, 'color'):
                        reroute_001_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_001_3, 'hide'):
                        reroute_001_3.hide = False
                    if hasattr(reroute_001_3, 'location'):
                        reroute_001_3.location = (-442.8094177246094, -76.09606170654297)
                    if hasattr(reroute_001_3, 'mute'):
                        reroute_001_3.mute = False
                    if hasattr(reroute_001_3, 'name'):
                        reroute_001_3.name = 'Reroute.001'
                    if hasattr(reroute_001_3, 'use_custom_color'):
                        reroute_001_3.use_custom_color = False
                    if hasattr(reroute_001_3, 'width'):
                        reroute_001_3.width = 16.0

                    reroute_004_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_004_3, 'color'):
                        reroute_004_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_004_3, 'hide'):
                        reroute_004_3.hide = False
                    if hasattr(reroute_004_3, 'location'):
                        reroute_004_3.location = (-436.8861389160156, 164.55894470214844)
                    if hasattr(reroute_004_3, 'mute'):
                        reroute_004_3.mute = False
                    if hasattr(reroute_004_3, 'name'):
                        reroute_004_3.name = 'Reroute.004'
                    if hasattr(reroute_004_3, 'use_custom_color'):
                        reroute_004_3.use_custom_color = False
                    if hasattr(reroute_004_3, 'width'):
                        reroute_004_3.width = 16.0

                    vector_math_002_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_002_3, 'color'):
                        vector_math_002_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_002_3, 'hide'):
                        vector_math_002_3.hide = True
                    if hasattr(vector_math_002_3, 'location'):
                        vector_math_002_3.location = (-361.7262268066406, 166.41342163085938)
                    if hasattr(vector_math_002_3, 'mute'):
                        vector_math_002_3.mute = False
                    if hasattr(vector_math_002_3, 'name'):
                        vector_math_002_3.name = 'Vector Math.002'
                    if hasattr(vector_math_002_3, 'operation'):
                        vector_math_002_3.operation = 'MULTIPLY'
                    if hasattr(vector_math_002_3, 'use_custom_color'):
                        vector_math_002_3.use_custom_color = False
                    if hasattr(vector_math_002_3, 'width'):
                        vector_math_002_3.width = 141.36419677734375
                    input_ = next((input_ for input_ in vector_math_002_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_002_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (-2.0, -2.0, 2.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_002_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_002_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_002_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_002_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_3, 'color'):
                        vector_math_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_3, 'hide'):
                        vector_math_3.hide = True
                    if hasattr(vector_math_3, 'location'):
                        vector_math_3.location = (-352.0022277832031, 240.16766357421875)
                    if hasattr(vector_math_3, 'mute'):
                        vector_math_3.mute = False
                    if hasattr(vector_math_3, 'name'):
                        vector_math_3.name = 'Vector Math'
                    if hasattr(vector_math_3, 'operation'):
                        vector_math_3.operation = 'SCALE'
                    if hasattr(vector_math_3, 'use_custom_color'):
                        vector_math_3.use_custom_color = False
                    if hasattr(vector_math_3, 'width'):
                        vector_math_3.width = 141.36419677734375
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (2.0, 2.0, 2.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 2.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_001_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_001_3, 'color'):
                        vector_math_001_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_001_3, 'hide'):
                        vector_math_001_3.hide = True
                    if hasattr(vector_math_001_3, 'location'):
                        vector_math_001_3.location = (-357.1380615234375, 205.62777709960938)
                    if hasattr(vector_math_001_3, 'mute'):
                        vector_math_001_3.mute = False
                    if hasattr(vector_math_001_3, 'name'):
                        vector_math_001_3.name = 'Vector Math.001'
                    if hasattr(vector_math_001_3, 'operation'):
                        vector_math_001_3.operation = 'ADD'
                    if hasattr(vector_math_001_3, 'use_custom_color'):
                        vector_math_001_3.use_custom_color = False
                    if hasattr(vector_math_001_3, 'width'):
                        vector_math_001_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_001_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_001_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (-1.0, -1.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_001_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_001_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_001_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_001_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_003_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_003_3, 'color'):
                        vector_math_003_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_003_3, 'hide'):
                        vector_math_003_3.hide = True
                    if hasattr(vector_math_003_3, 'location'):
                        vector_math_003_3.location = (-366.862060546875, 131.87353515625)
                    if hasattr(vector_math_003_3, 'mute'):
                        vector_math_003_3.mute = False
                    if hasattr(vector_math_003_3, 'name'):
                        vector_math_003_3.name = 'Vector Math.003'
                    if hasattr(vector_math_003_3, 'operation'):
                        vector_math_003_3.operation = 'ADD'
                    if hasattr(vector_math_003_3, 'use_custom_color'):
                        vector_math_003_3.use_custom_color = False
                    if hasattr(vector_math_003_3, 'width'):
                        vector_math_003_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_003_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_003_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, -1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_003_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_003_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_003_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_003_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_008_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_008_3, 'color'):
                        vector_math_008_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_008_3, 'hide'):
                        vector_math_008_3.hide = True
                    if hasattr(vector_math_008_3, 'location'):
                        vector_math_008_3.location = (-115.93279266357422, 165.04258728027344)
                    if hasattr(vector_math_008_3, 'mute'):
                        vector_math_008_3.mute = False
                    if hasattr(vector_math_008_3, 'name'):
                        vector_math_008_3.name = 'Vector Math.008'
                    if hasattr(vector_math_008_3, 'operation'):
                        vector_math_008_3.operation = 'SCALE'
                    if hasattr(vector_math_008_3, 'use_custom_color'):
                        vector_math_008_3.use_custom_color = False
                    if hasattr(vector_math_008_3, 'width'):
                        vector_math_008_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_008_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_008_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, -1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_008_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_008_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_008_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_008_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_007_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_007_3, 'color'):
                        vector_math_007_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_007_3, 'hide'):
                        vector_math_007_3.hide = True
                    if hasattr(vector_math_007_3, 'location'):
                        vector_math_007_3.location = (-113.82295227050781, 200.9220733642578)
                    if hasattr(vector_math_007_3, 'mute'):
                        vector_math_007_3.mute = False
                    if hasattr(vector_math_007_3, 'name'):
                        vector_math_007_3.name = 'Vector Math.007'
                    if hasattr(vector_math_007_3, 'operation'):
                        vector_math_007_3.operation = 'DOT_PRODUCT'
                    if hasattr(vector_math_007_3, 'use_custom_color'):
                        vector_math_007_3.use_custom_color = False
                    if hasattr(vector_math_007_3, 'width'):
                        vector_math_007_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_007_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_007_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, -1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_007_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_007_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_007_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_007_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    separate_xyz_3 = node_tree3.nodes.new('ShaderNodeSeparateXYZ')
                    if hasattr(separate_xyz_3, 'color'):
                        separate_xyz_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(separate_xyz_3, 'hide'):
                        separate_xyz_3.hide = True
                    if hasattr(separate_xyz_3, 'location'):
                        separate_xyz_3.location = (-109.48788452148438, 241.37655639648438)
                    if hasattr(separate_xyz_3, 'mute'):
                        separate_xyz_3.mute = False
                    if hasattr(separate_xyz_3, 'name'):
                        separate_xyz_3.name = 'Separate XYZ'
                    if hasattr(separate_xyz_3, 'use_custom_color'):
                        separate_xyz_3.use_custom_color = False
                    if hasattr(separate_xyz_3, 'width'):
                        separate_xyz_3.width = 140.0
                    input_ = next((input_ for input_ in separate_xyz_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in separate_xyz_3.outputs if output.identifier=='X'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = True
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'X'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in separate_xyz_3.outputs if output.identifier=='Y'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = True
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Y'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in separate_xyz_3.outputs if output.identifier=='Z'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Z'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    combine_xyz_3 = node_tree3.nodes.new('ShaderNodeCombineXYZ')
                    if hasattr(combine_xyz_3, 'color'):
                        combine_xyz_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(combine_xyz_3, 'hide'):
                        combine_xyz_3.hide = True
                    if hasattr(combine_xyz_3, 'location'):
                        combine_xyz_3.location = (57.07867431640625, 209.7696075439453)
                    if hasattr(combine_xyz_3, 'mute'):
                        combine_xyz_3.mute = False
                    if hasattr(combine_xyz_3, 'name'):
                        combine_xyz_3.name = 'Combine XYZ'
                    if hasattr(combine_xyz_3, 'use_custom_color'):
                        combine_xyz_3.use_custom_color = False
                    if hasattr(combine_xyz_3, 'width'):
                        combine_xyz_3.width = 140.0
                    input_ = next((input_ for input_ in combine_xyz_3.inputs if input_.identifier=='X'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'X'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in combine_xyz_3.inputs if input_.identifier=='Y'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Y'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in combine_xyz_3.inputs if input_.identifier=='Z'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Z'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in combine_xyz_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_010_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_010_3, 'color'):
                        vector_math_010_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_010_3, 'hide'):
                        vector_math_010_3.hide = True
                    if hasattr(vector_math_010_3, 'location'):
                        vector_math_010_3.location = (55.63336181640625, 175.2928924560547)
                    if hasattr(vector_math_010_3, 'mute'):
                        vector_math_010_3.mute = False
                    if hasattr(vector_math_010_3, 'name'):
                        vector_math_010_3.name = 'Vector Math.010'
                    if hasattr(vector_math_010_3, 'operation'):
                        vector_math_010_3.operation = 'DIVIDE'
                    if hasattr(vector_math_010_3, 'use_custom_color'):
                        vector_math_010_3.use_custom_color = False
                    if hasattr(vector_math_010_3, 'width'):
                        vector_math_010_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_010_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_010_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, -1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_010_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_010_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_010_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_010_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_009_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_009_3, 'color'):
                        vector_math_009_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_009_3, 'hide'):
                        vector_math_009_3.hide = True
                    if hasattr(vector_math_009_3, 'location'):
                        vector_math_009_3.location = (212.1328887939453, 148.53402709960938)
                    if hasattr(vector_math_009_3, 'mute'):
                        vector_math_009_3.mute = False
                    if hasattr(vector_math_009_3, 'name'):
                        vector_math_009_3.name = 'Vector Math.009'
                    if hasattr(vector_math_009_3, 'operation'):
                        vector_math_009_3.operation = 'SUBTRACT'
                    if hasattr(vector_math_009_3, 'use_custom_color'):
                        vector_math_009_3.use_custom_color = False
                    if hasattr(vector_math_009_3, 'width'):
                        vector_math_009_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_009_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_009_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (1.0, 1.0, -1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_009_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_009_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_009_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_009_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_005_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_005_3, 'color'):
                        vector_math_005_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_005_3, 'hide'):
                        vector_math_005_3.hide = True
                    if hasattr(vector_math_005_3, 'location'):
                        vector_math_005_3.location = (214.83480834960938, 77.948974609375)
                    if hasattr(vector_math_005_3, 'mute'):
                        vector_math_005_3.mute = False
                    if hasattr(vector_math_005_3, 'name'):
                        vector_math_005_3.name = 'Vector Math.005'
                    if hasattr(vector_math_005_3, 'operation'):
                        vector_math_005_3.operation = 'SCALE'
                    if hasattr(vector_math_005_3, 'use_custom_color'):
                        vector_math_005_3.use_custom_color = False
                    if hasattr(vector_math_005_3, 'width'):
                        vector_math_005_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_005_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_005_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_005_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_005_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_005_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_005_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_004_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_004_3, 'color'):
                        vector_math_004_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_004_3, 'hide'):
                        vector_math_004_3.hide = True
                    if hasattr(vector_math_004_3, 'location'):
                        vector_math_004_3.location = (213.77255249023438, 112.6468505859375)
                    if hasattr(vector_math_004_3, 'mute'):
                        vector_math_004_3.mute = False
                    if hasattr(vector_math_004_3, 'name'):
                        vector_math_004_3.name = 'Vector Math.004'
                    if hasattr(vector_math_004_3, 'operation'):
                        vector_math_004_3.operation = 'NORMALIZE'
                    if hasattr(vector_math_004_3, 'use_custom_color'):
                        vector_math_004_3.use_custom_color = False
                    if hasattr(vector_math_004_3, 'width'):
                        vector_math_004_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_004_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_004_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_004_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_004_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_004_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_004_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    vector_math_006_3 = node_tree3.nodes.new('ShaderNodeVectorMath')
                    if hasattr(vector_math_006_3, 'color'):
                        vector_math_006_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(vector_math_006_3, 'hide'):
                        vector_math_006_3.hide = True
                    if hasattr(vector_math_006_3, 'location'):
                        vector_math_006_3.location = (216.1195068359375, 43.219696044921875)
                    if hasattr(vector_math_006_3, 'mute'):
                        vector_math_006_3.mute = False
                    if hasattr(vector_math_006_3, 'name'):
                        vector_math_006_3.name = 'Vector Math.006'
                    if hasattr(vector_math_006_3, 'operation'):
                        vector_math_006_3.operation = 'ADD'
                    if hasattr(vector_math_006_3, 'use_custom_color'):
                        vector_math_006_3.use_custom_color = False
                    if hasattr(vector_math_006_3, 'width'):
                        vector_math_006_3.width = 140.0
                    input_ = next((input_ for input_ in vector_math_006_3.inputs if input_.identifier=='Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_006_3.inputs if input_.identifier=='Vector_001'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_006_3.inputs if input_.identifier=='Vector_002'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Vector'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in vector_math_006_3.inputs if input_.identifier=='Scale'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 1.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Scale'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in vector_math_006_3.outputs if output.identifier=='Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Vector'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in vector_math_006_3.outputs if output.identifier=='Value'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Value'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    reroute_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_3, 'color'):
                        reroute_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_3, 'hide'):
                        reroute_3.hide = False
                    if hasattr(reroute_3, 'location'):
                        reroute_3.location = (383.51739501953125, -64.48645782470703)
                    if hasattr(reroute_3, 'mute'):
                        reroute_3.mute = False
                    if hasattr(reroute_3, 'name'):
                        reroute_3.name = 'Reroute'
                    if hasattr(reroute_3, 'use_custom_color'):
                        reroute_3.use_custom_color = False
                    if hasattr(reroute_3, 'width'):
                        reroute_3.width = 16.0

                    mix_3 = node_tree3.nodes.new('ShaderNodeMix')
                    if hasattr(mix_3, 'blend_type'):
                        mix_3.blend_type = 'MIX'
                    if hasattr(mix_3, 'clamp_factor'):
                        mix_3.clamp_factor = True
                    if hasattr(mix_3, 'clamp_result'):
                        mix_3.clamp_result = False
                    if hasattr(mix_3, 'color'):
                        mix_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(mix_3, 'data_type'):
                        mix_3.data_type = 'RGBA'
                    if hasattr(mix_3, 'factor_mode'):
                        mix_3.factor_mode = 'UNIFORM'
                    if hasattr(mix_3, 'hide'):
                        mix_3.hide = False
                    if hasattr(mix_3, 'location'):
                        mix_3.location = (415.302734375, 89.13896942138672)
                    if hasattr(mix_3, 'mute'):
                        mix_3.mute = False
                    if hasattr(mix_3, 'name'):
                        mix_3.name = 'Mix'
                    if hasattr(mix_3, 'use_custom_color'):
                        mix_3.use_custom_color = False
                    if hasattr(mix_3, 'width'):
                        mix_3.width = 140.0
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='Factor_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.5
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='Factor_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'Factor'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='A_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='B_Float'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = 0.0
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='A_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='B_Vector'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.0, 0.0, 0.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = False
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='A_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'A'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    input_ = next((input_ for input_ in mix_3.inputs if input_.identifier=='B_Color'), None)
                    if input_:
                        if hasattr(input_, 'default_value'):
                            input_.default_value = (0.5, 0.5, 0.5, 1.0)
                        if hasattr(input_, 'display_shape'):
                            input_.display_shape = 'CIRCLE'
                        if hasattr(input_, 'enabled'):
                            input_.enabled = True
                        if hasattr(input_, 'hide'):
                            input_.hide = False
                        if hasattr(input_, 'hide_value'):
                            input_.hide_value = False
                        if hasattr(input_, 'name'):
                            input_.name = 'B'
                        if hasattr(input_, 'show_expanded'):
                            input_.show_expanded = False
                    output = next((output for output in mix_3.outputs if output.identifier=='Result_Float'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = 0.0
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_3.outputs if output.identifier=='Result_Vector'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = False
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False
                    output = next((output for output in mix_3.outputs if output.identifier=='Result_Color'), None)
                    if output:
                        if hasattr(output, 'default_value'):
                            output.default_value = (0.0, 0.0, 0.0, 0.0)
                        if hasattr(output, 'display_shape'):
                            output.display_shape = 'CIRCLE'
                        if hasattr(output, 'enabled'):
                            output.enabled = True
                        if hasattr(output, 'hide'):
                            output.hide = False
                        if hasattr(output, 'hide_value'):
                            output.hide_value = False
                        if hasattr(output, 'name'):
                            output.name = 'Result'
                        if hasattr(output, 'show_expanded'):
                            output.show_expanded = False

                    reroute_005_3 = node_tree3.nodes.new('NodeReroute')
                    if hasattr(reroute_005_3, 'color'):
                        reroute_005_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(reroute_005_3, 'hide'):
                        reroute_005_3.hide = False
                    if hasattr(reroute_005_3, 'location'):
                        reroute_005_3.location = (383.51739501953125, 31.338207244873047)
                    if hasattr(reroute_005_3, 'mute'):
                        reroute_005_3.mute = False
                    if hasattr(reroute_005_3, 'name'):
                        reroute_005_3.name = 'Reroute.005'
                    if hasattr(reroute_005_3, 'use_custom_color'):
                        reroute_005_3.use_custom_color = False
                    if hasattr(reroute_005_3, 'width'):
                        reroute_005_3.width = 16.0

                    group_output_3 = node_tree3.nodes.new('NodeGroupOutput')
                    if hasattr(group_output_3, 'color'):
                        group_output_3.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                    if hasattr(group_output_3, 'hide'):
                        group_output_3.hide = False
                    if hasattr(group_output_3, 'is_active_output'):
                        group_output_3.is_active_output = True
                    if hasattr(group_output_3, 'location'):
                        group_output_3.location = (613.7005615234375, 81.01988983154297)
                    if hasattr(group_output_3, 'mute'):
                        group_output_3.mute = False
                    if hasattr(group_output_3, 'name'):
                        group_output_3.name = 'Group Output'
                    if hasattr(group_output_3, 'use_custom_color'):
                        group_output_3.use_custom_color = False
                    if hasattr(group_output_3, 'width'):
                        group_output_3.width = 140.0
                    if hasattr(group_output_3.inputs[0], 'default_value'):
                        group_output_3.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(group_output_3.inputs[0], 'display_shape'):
                        group_output_3.inputs[0].display_shape = 'CIRCLE'
                    if hasattr(group_output_3.inputs[0], 'enabled'):
                        group_output_3.inputs[0].enabled = True
                    if hasattr(group_output_3.inputs[0], 'hide'):
                        group_output_3.inputs[0].hide = False
                    if hasattr(group_output_3.inputs[0], 'hide_value'):
                        group_output_3.inputs[0].hide_value = False
                    if hasattr(group_output_3.inputs[0], 'name'):
                        group_output_3.inputs[0].name = 'Combined Normal Map'
                    if hasattr(group_output_3.inputs[0], 'show_expanded'):
                        group_output_3.inputs[0].show_expanded = False

                    # LINKS
                    node_tree3.links.new(reroute_002_3.outputs[0], vector_math_3.inputs[0])
                    node_tree3.links.new(vector_math_3.outputs[0], vector_math_001_3.inputs[0])
                    node_tree3.links.new(vector_math_001_3.outputs[0], separate_xyz_3.inputs[0])
                    node_tree3.links.new(vector_math_005_3.outputs[0], vector_math_006_3.inputs[0])
                    node_tree3.links.new(vector_math_004_3.outputs[0], vector_math_005_3.inputs[0])
                    node_tree3.links.new(mix_3.outputs[2], group_output_3.inputs[0])
                    node_tree3.links.new(group_input_3.outputs[0], mix_3.inputs[0])
                    node_tree3.links.new(reroute_003_3.outputs[0], mix_3.inputs[6])
                    node_tree3.links.new(vector_math_002_3.outputs[0], vector_math_003_3.inputs[0])
                    node_tree3.links.new(reroute_004_3.outputs[0], vector_math_002_3.inputs[0])
                    node_tree3.links.new(vector_math_001_3.outputs[0], vector_math_007_3.inputs[0])
                    node_tree3.links.new(vector_math_003_3.outputs[0], vector_math_007_3.inputs[1])
                    node_tree3.links.new(vector_math_007_3.outputs[1], vector_math_008_3.inputs[3])
                    node_tree3.links.new(vector_math_001_3.outputs[0], vector_math_008_3.inputs[0])
                    node_tree3.links.new(vector_math_003_3.outputs[0], vector_math_009_3.inputs[1])
                    node_tree3.links.new(vector_math_008_3.outputs[0], vector_math_010_3.inputs[0])
                    node_tree3.links.new(vector_math_010_3.outputs[0], vector_math_009_3.inputs[0])
                    node_tree3.links.new(separate_xyz_3.outputs[2], combine_xyz_3.inputs[0])
                    node_tree3.links.new(separate_xyz_3.outputs[2], combine_xyz_3.inputs[1])
                    node_tree3.links.new(separate_xyz_3.outputs[2], combine_xyz_3.inputs[2])
                    node_tree3.links.new(combine_xyz_3.outputs[0], vector_math_010_3.inputs[1])
                    node_tree3.links.new(vector_math_009_3.outputs[0], vector_math_004_3.inputs[0])
                    node_tree3.links.new(reroute_3.outputs[0], mix_3.inputs[7])
                    node_tree3.links.new(group_input_3.outputs[2], reroute_001_3.inputs[0])
                    node_tree3.links.new(group_input_3.outputs[1], reroute_003_3.inputs[0])
                    node_tree3.links.new(reroute_003_3.outputs[0], reroute_002_3.inputs[0])
                    node_tree3.links.new(reroute_001_3.outputs[0], reroute_004_3.inputs[0])
                    node_tree3.links.new(reroute_005_3.outputs[0], reroute_3.inputs[0])
                    node_tree3.links.new(vector_math_006_3.outputs[0], reroute_005_3.inputs[0])

                group_002_2 = node_tree2.nodes.new('ShaderNodeGroup')
                if hasattr(group_002_2, 'node_tree'):
                    group_002_2.node_tree = bpy.data.node_groups.get('NormalMap_Combine-Orientation')
                if hasattr(group_002_2, 'color'):
                    group_002_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_002_2, 'hide'):
                    group_002_2.hide = False
                if hasattr(group_002_2, 'location'):
                    group_002_2.location = (888.6771850585938, 477.678955078125)
                if hasattr(group_002_2, 'mute'):
                    group_002_2.mute = False
                if hasattr(group_002_2, 'name'):
                    group_002_2.name = 'Group.002'
                if hasattr(group_002_2, 'use_custom_color'):
                    group_002_2.use_custom_color = False
                if hasattr(group_002_2, 'width'):
                    group_002_2.width = 140.0
                if hasattr(group_002_2.inputs[0], 'default_value'):
                    group_002_2.inputs[0].default_value = 1.0
                if hasattr(group_002_2.inputs[0], 'display_shape'):
                    group_002_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_002_2.inputs[0], 'enabled'):
                    group_002_2.inputs[0].enabled = True
                if hasattr(group_002_2.inputs[0], 'hide'):
                    group_002_2.inputs[0].hide = False
                if hasattr(group_002_2.inputs[0], 'hide_value'):
                    group_002_2.inputs[0].hide_value = False
                if hasattr(group_002_2.inputs[0], 'name'):
                    group_002_2.inputs[0].name = 'Factor'
                if hasattr(group_002_2.inputs[0], 'show_expanded'):
                    group_002_2.inputs[0].show_expanded = False
                if hasattr(group_002_2.inputs[1], 'default_value'):
                    group_002_2.inputs[1].default_value = (0.5, 0.5, 1.0, 1.0)
                if hasattr(group_002_2.inputs[1], 'display_shape'):
                    group_002_2.inputs[1].display_shape = 'CIRCLE'
                if hasattr(group_002_2.inputs[1], 'enabled'):
                    group_002_2.inputs[1].enabled = True
                if hasattr(group_002_2.inputs[1], 'hide'):
                    group_002_2.inputs[1].hide = False
                if hasattr(group_002_2.inputs[1], 'hide_value'):
                    group_002_2.inputs[1].hide_value = False
                if hasattr(group_002_2.inputs[1], 'name'):
                    group_002_2.inputs[1].name = 'Base'
                if hasattr(group_002_2.inputs[1], 'show_expanded'):
                    group_002_2.inputs[1].show_expanded = False
                if hasattr(group_002_2.inputs[2], 'default_value'):
                    group_002_2.inputs[2].default_value = (0.5, 0.5, 1.0, 1.0)
                if hasattr(group_002_2.inputs[2], 'display_shape'):
                    group_002_2.inputs[2].display_shape = 'CIRCLE'
                if hasattr(group_002_2.inputs[2], 'enabled'):
                    group_002_2.inputs[2].enabled = True
                if hasattr(group_002_2.inputs[2], 'hide'):
                    group_002_2.inputs[2].hide = False
                if hasattr(group_002_2.inputs[2], 'hide_value'):
                    group_002_2.inputs[2].hide_value = False
                if hasattr(group_002_2.inputs[2], 'name'):
                    group_002_2.inputs[2].name = 'Detail'
                if hasattr(group_002_2.inputs[2], 'show_expanded'):
                    group_002_2.inputs[2].show_expanded = False
                if hasattr(group_002_2.outputs[0], 'default_value'):
                    group_002_2.outputs[0].default_value = (0.5, 0.5, 1.0, 1.0)
                if hasattr(group_002_2.outputs[0], 'display_shape'):
                    group_002_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_002_2.outputs[0], 'enabled'):
                    group_002_2.outputs[0].enabled = True
                if hasattr(group_002_2.outputs[0], 'hide'):
                    group_002_2.outputs[0].hide = False
                if hasattr(group_002_2.outputs[0], 'hide_value'):
                    group_002_2.outputs[0].hide_value = False
                if hasattr(group_002_2.outputs[0], 'name'):
                    group_002_2.outputs[0].name = 'Combined Normal Map'
                if hasattr(group_002_2.outputs[0], 'show_expanded'):
                    group_002_2.outputs[0].show_expanded = False

                group_001_2 = node_tree2.nodes.new('ShaderNodeGroup')
                if hasattr(group_001_2, 'node_tree'):
                    group_001_2.node_tree = bpy.data.node_groups.get('Norm Normalize')
                if hasattr(group_001_2, 'color'):
                    group_001_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_001_2, 'hide'):
                    group_001_2.hide = False
                if hasattr(group_001_2, 'location'):
                    group_001_2.location = (607.6754150390625, 479.01580810546875)
                if hasattr(group_001_2, 'mute'):
                    group_001_2.mute = False
                if hasattr(group_001_2, 'name'):
                    group_001_2.name = 'Group.001'
                if hasattr(group_001_2, 'use_custom_color'):
                    group_001_2.use_custom_color = False
                if hasattr(group_001_2, 'width'):
                    group_001_2.width = 140.0
                if hasattr(group_001_2.inputs[0], 'default_value'):
                    group_001_2.inputs[0].default_value = (0.0, 0.0, 0.0)
                if hasattr(group_001_2.inputs[0], 'display_shape'):
                    group_001_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_001_2.inputs[0], 'enabled'):
                    group_001_2.inputs[0].enabled = True
                if hasattr(group_001_2.inputs[0], 'hide'):
                    group_001_2.inputs[0].hide = False
                if hasattr(group_001_2.inputs[0], 'hide_value'):
                    group_001_2.inputs[0].hide_value = True
                if hasattr(group_001_2.inputs[0], 'name'):
                    group_001_2.inputs[0].name = 'Normal'
                if hasattr(group_001_2.inputs[0], 'show_expanded'):
                    group_001_2.inputs[0].show_expanded = False
                if hasattr(group_001_2.outputs[0], 'default_value'):
                    group_001_2.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_001_2.outputs[0], 'display_shape'):
                    group_001_2.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_001_2.outputs[0], 'enabled'):
                    group_001_2.outputs[0].enabled = True
                if hasattr(group_001_2.outputs[0], 'hide'):
                    group_001_2.outputs[0].hide = False
                if hasattr(group_001_2.outputs[0], 'hide_value'):
                    group_001_2.outputs[0].hide_value = True
                if hasattr(group_001_2.outputs[0], 'name'):
                    group_001_2.outputs[0].name = 'Normal Normalized'
                if hasattr(group_001_2.outputs[0], 'show_expanded'):
                    group_001_2.outputs[0].show_expanded = False

                group_output_2 = node_tree2.nodes.new('NodeGroupOutput')
                if hasattr(group_output_2, 'color'):
                    group_output_2.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_output_2, 'hide'):
                    group_output_2.hide = False
                if hasattr(group_output_2, 'is_active_output'):
                    group_output_2.is_active_output = True
                if hasattr(group_output_2, 'location'):
                    group_output_2.location = (1145.656005859375, 347.71014404296875)
                if hasattr(group_output_2, 'mute'):
                    group_output_2.mute = False
                if hasattr(group_output_2, 'name'):
                    group_output_2.name = 'Group Output'
                if hasattr(group_output_2, 'use_custom_color'):
                    group_output_2.use_custom_color = False
                if hasattr(group_output_2, 'width'):
                    group_output_2.width = 140.0
                if hasattr(group_output_2.inputs[0], 'default_value'):
                    group_output_2.inputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
                if hasattr(group_output_2.inputs[0], 'display_shape'):
                    group_output_2.inputs[0].display_shape = 'CIRCLE'
                if hasattr(group_output_2.inputs[0], 'enabled'):
                    group_output_2.inputs[0].enabled = True
                if hasattr(group_output_2.inputs[0], 'hide'):
                    group_output_2.inputs[0].hide = False
                if hasattr(group_output_2.inputs[0], 'hide_value'):
                    group_output_2.inputs[0].hide_value = False
                if hasattr(group_output_2.inputs[0], 'name'):
                    group_output_2.inputs[0].name = 'Normal'
                if hasattr(group_output_2.inputs[0], 'show_expanded'):
                    group_output_2.inputs[0].show_expanded = False

                # LINKS
                node_tree2.links.new(group_input_2.outputs[1], separate_rgb_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[2], separate_rgb_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[0], separate_rgb_002_2.inputs[0])
                node_tree2.links.new(separate_rgb_002_2.outputs[2], math_008_2.inputs[0])
                node_tree2.links.new(math_012_2.outputs[0], math_008_2.inputs[1])
                node_tree2.links.new(math_010_2.outputs[0], math_007_2.inputs[1])
                node_tree2.links.new(separate_rgb_001_2.outputs[2], math_007_2.inputs[0])
                node_tree2.links.new(separate_rgb_002_2.outputs[1], math_009_2.inputs[0])
                node_tree2.links.new(math_011_2.outputs[0], math_009_2.inputs[1])
                node_tree2.links.new(group_input_2.outputs[12], math_011_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[14], math_010_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[13], math_012_2.inputs[0])
                node_tree2.links.new(mix_2.outputs[2], mix_001_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[6], mix_001_2.inputs[7])
                node_tree2.links.new(mix_001_2.outputs[2], mix_002_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[7], mix_002_2.inputs[7])
                node_tree2.links.new(mix_002_2.outputs[2], mix_003_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[8], mix_003_2.inputs[7])
                node_tree2.links.new(mix_003_2.outputs[2], mix_004_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[9], mix_004_2.inputs[7])
                node_tree2.links.new(mix_004_2.outputs[2], mix_005_2.inputs[6])
                node_tree2.links.new(math_007_2.outputs[0], mix_005_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[11], mix_005_2.inputs[7])
                node_tree2.links.new(mix_005_2.outputs[2], mix_006_2.inputs[6])
                node_tree2.links.new(math_009_2.outputs[0], mix_006_2.inputs[0])
                node_tree2.links.new(mix_006_2.outputs[2], mix_007_2.inputs[6])
                node_tree2.links.new(math_008_2.outputs[0], mix_007_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[10], mix_007_2.inputs[7])
                node_tree2.links.new(separate_rgb_2.outputs[0], mix_2.inputs[0])
                node_tree2.links.new(separate_rgb_2.outputs[1], mix_001_2.inputs[0])
                node_tree2.links.new(separate_rgb_2.outputs[2], mix_002_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[0], mix_003_2.inputs[0])
                node_tree2.links.new(separate_rgb_001_2.outputs[1], mix_004_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[4], mix_2.inputs[6])
                node_tree2.links.new(group_input_2.outputs[5], mix_2.inputs[7])
                node_tree2.links.new(mix_007_2.outputs[2], group_2.inputs[0])
                node_tree2.links.new(group_001_2.outputs[0], group_002_2.inputs[1])
                node_tree2.links.new(group_2.outputs[0], group_002_2.inputs[2])
                node_tree2.links.new(group_002_2.outputs[0], group_output_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[3], group_001_2.inputs[0])
                node_tree2.links.new(group_input_2.outputs[15], group_002_2.inputs[0])

            group_003_1 = node_tree4.nodes.new('ShaderNodeGroup')
            if hasattr(group_003_1, 'node_tree'):
                group_003_1.node_tree = bpy.data.node_groups.get('Detail Normals (Chroma Mod)')
            if hasattr(group_003_1, 'color'):
                group_003_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
            if hasattr(group_003_1, 'hide'):
                group_003_1.hide = False
            if hasattr(group_003_1, 'location'):
                group_003_1.location = (-49.79426956176758, -193.24951171875)
            if hasattr(group_003_1, 'mute'):
                group_003_1.mute = False
            if hasattr(group_003_1, 'name'):
                group_003_1.name = 'Group.003'
            if hasattr(group_003_1, 'use_custom_color'):
                group_003_1.use_custom_color = False
            if hasattr(group_003_1, 'width'):
                group_003_1.width = 216.826904296875
            if hasattr(group_003_1.inputs[0], 'default_value'):
                group_003_1.inputs[0].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_003_1.inputs[0], 'display_shape'):
                group_003_1.inputs[0].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[0], 'enabled'):
                group_003_1.inputs[0].enabled = True
            if hasattr(group_003_1.inputs[0], 'hide'):
                group_003_1.inputs[0].hide = False
            if hasattr(group_003_1.inputs[0], 'hide_value'):
                group_003_1.inputs[0].hide_value = False
            if hasattr(group_003_1.inputs[0], 'name'):
                group_003_1.inputs[0].name = 'ASG'
            if hasattr(group_003_1.inputs[0], 'show_expanded'):
                group_003_1.inputs[0].show_expanded = False
            if hasattr(group_003_1.inputs[1], 'default_value'):
                group_003_1.inputs[1].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_003_1.inputs[1], 'display_shape'):
                group_003_1.inputs[1].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[1], 'enabled'):
                group_003_1.inputs[1].enabled = True
            if hasattr(group_003_1.inputs[1], 'hide'):
                group_003_1.inputs[1].hide = False
            if hasattr(group_003_1.inputs[1], 'hide_value'):
                group_003_1.inputs[1].hide_value = False
            if hasattr(group_003_1.inputs[1], 'name'):
                group_003_1.inputs[1].name = 'Mask_0'
            if hasattr(group_003_1.inputs[1], 'show_expanded'):
                group_003_1.inputs[1].show_expanded = False
            if hasattr(group_003_1.inputs[2], 'default_value'):
                group_003_1.inputs[2].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)
            if hasattr(group_003_1.inputs[2], 'display_shape'):
                group_003_1.inputs[2].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[2], 'enabled'):
                group_003_1.inputs[2].enabled = True
            if hasattr(group_003_1.inputs[2], 'hide'):
                group_003_1.inputs[2].hide = False
            if hasattr(group_003_1.inputs[2], 'hide_value'):
                group_003_1.inputs[2].hide_value = False
            if hasattr(group_003_1.inputs[2], 'name'):
                group_003_1.inputs[2].name = 'Mask_1'
            if hasattr(group_003_1.inputs[2], 'show_expanded'):
                group_003_1.inputs[2].show_expanded = False
            if hasattr(group_003_1.inputs[3], 'default_value'):
                group_003_1.inputs[3].default_value = (0.5, 0.5, 0.5, 1.0)
            if hasattr(group_003_1.inputs[3], 'display_shape'):
                group_003_1.inputs[3].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[3], 'enabled'):
                group_003_1.inputs[3].enabled = True
            if hasattr(group_003_1.inputs[3], 'hide'):
                group_003_1.inputs[3].hide = False
            if hasattr(group_003_1.inputs[3], 'hide_value'):
                group_003_1.inputs[3].hide_value = False
            if hasattr(group_003_1.inputs[3], 'name'):
                group_003_1.inputs[3].name = 'MainNormal'
            if hasattr(group_003_1.inputs[3], 'show_expanded'):
                group_003_1.inputs[3].show_expanded = False
            if hasattr(group_003_1.inputs[4], 'default_value'):
                group_003_1.inputs[4].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[4], 'display_shape'):
                group_003_1.inputs[4].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[4], 'enabled'):
                group_003_1.inputs[4].enabled = True
            if hasattr(group_003_1.inputs[4], 'hide'):
                group_003_1.inputs[4].hide = False
            if hasattr(group_003_1.inputs[4], 'hide_value'):
                group_003_1.inputs[4].hide_value = False
            if hasattr(group_003_1.inputs[4], 'name'):
                group_003_1.inputs[4].name = 'Color-A'
            if hasattr(group_003_1.inputs[4], 'show_expanded'):
                group_003_1.inputs[4].show_expanded = False
            if hasattr(group_003_1.inputs[5], 'default_value'):
                group_003_1.inputs[5].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[5], 'display_shape'):
                group_003_1.inputs[5].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[5], 'enabled'):
                group_003_1.inputs[5].enabled = True
            if hasattr(group_003_1.inputs[5], 'hide'):
                group_003_1.inputs[5].hide = False
            if hasattr(group_003_1.inputs[5], 'hide_value'):
                group_003_1.inputs[5].hide_value = False
            if hasattr(group_003_1.inputs[5], 'name'):
                group_003_1.inputs[5].name = 'Color-B'
            if hasattr(group_003_1.inputs[5], 'show_expanded'):
                group_003_1.inputs[5].show_expanded = False
            if hasattr(group_003_1.inputs[6], 'default_value'):
                group_003_1.inputs[6].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[6], 'display_shape'):
                group_003_1.inputs[6].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[6], 'enabled'):
                group_003_1.inputs[6].enabled = True
            if hasattr(group_003_1.inputs[6], 'hide'):
                group_003_1.inputs[6].hide = False
            if hasattr(group_003_1.inputs[6], 'hide_value'):
                group_003_1.inputs[6].hide_value = False
            if hasattr(group_003_1.inputs[6], 'name'):
                group_003_1.inputs[6].name = 'Color-C'
            if hasattr(group_003_1.inputs[6], 'show_expanded'):
                group_003_1.inputs[6].show_expanded = False
            if hasattr(group_003_1.inputs[7], 'default_value'):
                group_003_1.inputs[7].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_003_1.inputs[7], 'display_shape'):
                group_003_1.inputs[7].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[7], 'enabled'):
                group_003_1.inputs[7].enabled = True
            if hasattr(group_003_1.inputs[7], 'hide'):
                group_003_1.inputs[7].hide = False
            if hasattr(group_003_1.inputs[7], 'hide_value'):
                group_003_1.inputs[7].hide_value = False
            if hasattr(group_003_1.inputs[7], 'name'):
                group_003_1.inputs[7].name = 'Color-D'
            if hasattr(group_003_1.inputs[7], 'show_expanded'):
                group_003_1.inputs[7].show_expanded = False
            if hasattr(group_003_1.inputs[8], 'default_value'):
                group_003_1.inputs[8].default_value = (0.0, 0.0, 0.0, 1.0)
            if hasattr(group_003_1.inputs[8], 'display_shape'):
                group_003_1.inputs[8].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[8], 'enabled'):
                group_003_1.inputs[8].enabled = True
            if hasattr(group_003_1.inputs[8], 'hide'):
                group_003_1.inputs[8].hide = False
            if hasattr(group_003_1.inputs[8], 'hide_value'):
                group_003_1.inputs[8].hide_value = False
            if hasattr(group_003_1.inputs[8], 'name'):
                group_003_1.inputs[8].name = 'Color-E'
            if hasattr(group_003_1.inputs[8], 'show_expanded'):
                group_003_1.inputs[8].show_expanded = False
            if hasattr(group_003_1.inputs[9], 'default_value'):
                group_003_1.inputs[9].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[9], 'display_shape'):
                group_003_1.inputs[9].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[9], 'enabled'):
                group_003_1.inputs[9].enabled = True
            if hasattr(group_003_1.inputs[9], 'hide'):
                group_003_1.inputs[9].hide = False
            if hasattr(group_003_1.inputs[9], 'hide_value'):
                group_003_1.inputs[9].hide_value = False
            if hasattr(group_003_1.inputs[9], 'name'):
                group_003_1.inputs[9].name = 'Color-F'
            if hasattr(group_003_1.inputs[9], 'show_expanded'):
                group_003_1.inputs[9].show_expanded = False
            if hasattr(group_003_1.inputs[10], 'default_value'):
                group_003_1.inputs[10].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[10], 'display_shape'):
                group_003_1.inputs[10].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[10], 'enabled'):
                group_003_1.inputs[10].enabled = True
            if hasattr(group_003_1.inputs[10], 'hide'):
                group_003_1.inputs[10].hide = False
            if hasattr(group_003_1.inputs[10], 'hide_value'):
                group_003_1.inputs[10].hide_value = False
            if hasattr(group_003_1.inputs[10], 'name'):
                group_003_1.inputs[10].name = 'Grime'
            if hasattr(group_003_1.inputs[10], 'show_expanded'):
                group_003_1.inputs[10].show_expanded = False
            if hasattr(group_003_1.inputs[11], 'default_value'):
                group_003_1.inputs[11].default_value = (1.0, 1.0, 1.0, 1.0)
            if hasattr(group_003_1.inputs[11], 'display_shape'):
                group_003_1.inputs[11].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[11], 'enabled'):
                group_003_1.inputs[11].enabled = True
            if hasattr(group_003_1.inputs[11], 'hide'):
                group_003_1.inputs[11].hide = False
            if hasattr(group_003_1.inputs[11], 'hide_value'):
                group_003_1.inputs[11].hide_value = False
            if hasattr(group_003_1.inputs[11], 'name'):
                group_003_1.inputs[11].name = 'Dust'
            if hasattr(group_003_1.inputs[11], 'show_expanded'):
                group_003_1.inputs[11].show_expanded = False
            if hasattr(group_003_1.inputs[12], 'default_value'):
                group_003_1.inputs[12].default_value = 1.0
            if hasattr(group_003_1.inputs[12], 'display_shape'):
                group_003_1.inputs[12].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[12], 'enabled'):
                group_003_1.inputs[12].enabled = True
            if hasattr(group_003_1.inputs[12], 'hide'):
                group_003_1.inputs[12].hide = False
            if hasattr(group_003_1.inputs[12], 'hide_value'):
                group_003_1.inputs[12].hide_value = False
            if hasattr(group_003_1.inputs[12], 'name'):
                group_003_1.inputs[12].name = 'Scratch Amount'
            if hasattr(group_003_1.inputs[12], 'show_expanded'):
                group_003_1.inputs[12].show_expanded = False
            if hasattr(group_003_1.inputs[13], 'default_value'):
                group_003_1.inputs[13].default_value = 1.0
            if hasattr(group_003_1.inputs[13], 'display_shape'):
                group_003_1.inputs[13].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[13], 'enabled'):
                group_003_1.inputs[13].enabled = True
            if hasattr(group_003_1.inputs[13], 'hide'):
                group_003_1.inputs[13].hide = False
            if hasattr(group_003_1.inputs[13], 'hide_value'):
                group_003_1.inputs[13].hide_value = False
            if hasattr(group_003_1.inputs[13], 'name'):
                group_003_1.inputs[13].name = 'Grime Amount'
            if hasattr(group_003_1.inputs[13], 'show_expanded'):
                group_003_1.inputs[13].show_expanded = False
            if hasattr(group_003_1.inputs[14], 'default_value'):
                group_003_1.inputs[14].default_value = 1.0
            if hasattr(group_003_1.inputs[14], 'display_shape'):
                group_003_1.inputs[14].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[14], 'enabled'):
                group_003_1.inputs[14].enabled = True
            if hasattr(group_003_1.inputs[14], 'hide'):
                group_003_1.inputs[14].hide = False
            if hasattr(group_003_1.inputs[14], 'hide_value'):
                group_003_1.inputs[14].hide_value = False
            if hasattr(group_003_1.inputs[14], 'name'):
                group_003_1.inputs[14].name = 'Dust Amount'
            if hasattr(group_003_1.inputs[14], 'show_expanded'):
                group_003_1.inputs[14].show_expanded = False
            if hasattr(group_003_1.inputs[15], 'default_value'):
                group_003_1.inputs[15].default_value = 1.0
            if hasattr(group_003_1.inputs[15], 'display_shape'):
                group_003_1.inputs[15].display_shape = 'CIRCLE'
            if hasattr(group_003_1.inputs[15], 'enabled'):
                group_003_1.inputs[15].enabled = True
            if hasattr(group_003_1.inputs[15], 'hide'):
                group_003_1.inputs[15].hide = False
            if hasattr(group_003_1.inputs[15], 'hide_value'):
                group_003_1.inputs[15].hide_value = False
            if hasattr(group_003_1.inputs[15], 'name'):
                group_003_1.inputs[15].name = 'Detail Normal Toggle'
            if hasattr(group_003_1.inputs[15], 'show_expanded'):
                group_003_1.inputs[15].show_expanded = False
            if hasattr(group_003_1.outputs[0], 'default_value'):
                group_003_1.outputs[0].default_value = (0.0, 0.0, 0.0, 0.0)
            if hasattr(group_003_1.outputs[0], 'display_shape'):
                group_003_1.outputs[0].display_shape = 'CIRCLE'
            if hasattr(group_003_1.outputs[0], 'enabled'):
                group_003_1.outputs[0].enabled = True
            if hasattr(group_003_1.outputs[0], 'hide'):
                group_003_1.outputs[0].hide = False
            if hasattr(group_003_1.outputs[0], 'hide_value'):
                group_003_1.outputs[0].hide_value = False
            if hasattr(group_003_1.outputs[0], 'name'):
                group_003_1.outputs[0].name = 'Normal'
            if hasattr(group_003_1.outputs[0], 'show_expanded'):
                group_003_1.outputs[0].show_expanded = False

                group_input_001_1 = node_tree4.nodes.new('NodeGroupInput')
                if hasattr(group_input_001_1, 'color'):
                    group_input_001_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(group_input_001_1, 'hide'):
                    group_input_001_1.hide = False
                if hasattr(group_input_001_1, 'location'):
                    group_input_001_1.location = (-3793.19091796875, 2497.38134765625)
                if hasattr(group_input_001_1, 'mute'):
                    group_input_001_1.mute = False
                if hasattr(group_input_001_1, 'name'):
                    group_input_001_1.name = 'Group Input.001'
                if hasattr(group_input_001_1, 'use_custom_color'):
                    group_input_001_1.use_custom_color = False
                if hasattr(group_input_001_1, 'width'):
                    group_input_001_1.width = 140.0
                if hasattr(group_input_001_1.outputs[0], 'default_value'):
                    group_input_001_1.outputs[0].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[0], 'display_shape'):
                    group_input_001_1.outputs[0].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[0], 'enabled'):
                    group_input_001_1.outputs[0].enabled = True
                if hasattr(group_input_001_1.outputs[0], 'hide'):
                    group_input_001_1.outputs[0].hide = False
                if hasattr(group_input_001_1.outputs[0], 'hide_value'):
                    group_input_001_1.outputs[0].hide_value = False
                if hasattr(group_input_001_1.outputs[0], 'name'):
                    group_input_001_1.outputs[0].name = 'ASG'
                if hasattr(group_input_001_1.outputs[0], 'show_expanded'):
                    group_input_001_1.outputs[0].show_expanded = False
                if hasattr(group_input_001_1.outputs[1], 'default_value'):
                    group_input_001_1.outputs[1].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[1], 'display_shape'):
                    group_input_001_1.outputs[1].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[1], 'enabled'):
                    group_input_001_1.outputs[1].enabled = True
                if hasattr(group_input_001_1.outputs[1], 'hide'):
                    group_input_001_1.outputs[1].hide = False
                if hasattr(group_input_001_1.outputs[1], 'hide_value'):
                    group_input_001_1.outputs[1].hide_value = False
                if hasattr(group_input_001_1.outputs[1], 'name'):
                    group_input_001_1.outputs[1].name = 'Mask_0'
                if hasattr(group_input_001_1.outputs[1], 'show_expanded'):
                    group_input_001_1.outputs[1].show_expanded = False
                if hasattr(group_input_001_1.outputs[2], 'default_value'):
                    group_input_001_1.outputs[2].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[2], 'display_shape'):
                    group_input_001_1.outputs[2].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[2], 'enabled'):
                    group_input_001_1.outputs[2].enabled = True
                if hasattr(group_input_001_1.outputs[2], 'hide'):
                    group_input_001_1.outputs[2].hide = False
                if hasattr(group_input_001_1.outputs[2], 'hide_value'):
                    group_input_001_1.outputs[2].hide_value = False
                if hasattr(group_input_001_1.outputs[2], 'name'):
                    group_input_001_1.outputs[2].name = 'Mask_1'
                if hasattr(group_input_001_1.outputs[2], 'show_expanded'):
                    group_input_001_1.outputs[2].show_expanded = False
                if hasattr(group_input_001_1.outputs[3], 'default_value'):
                    group_input_001_1.outputs[3].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[3], 'display_shape'):
                    group_input_001_1.outputs[3].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[3], 'enabled'):
                    group_input_001_1.outputs[3].enabled = True
                if hasattr(group_input_001_1.outputs[3], 'hide'):
                    group_input_001_1.outputs[3].hide = False
                if hasattr(group_input_001_1.outputs[3], 'hide_value'):
                    group_input_001_1.outputs[3].hide_value = False
                if hasattr(group_input_001_1.outputs[3], 'name'):
                    group_input_001_1.outputs[3].name = 'Normal'
                if hasattr(group_input_001_1.outputs[3], 'show_expanded'):
                    group_input_001_1.outputs[3].show_expanded = False
                if hasattr(group_input_001_1.outputs[4], 'default_value'):
                    group_input_001_1.outputs[4].default_value = 0.0
                if hasattr(group_input_001_1.outputs[4], 'display_shape'):
                    group_input_001_1.outputs[4].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[4], 'enabled'):
                    group_input_001_1.outputs[4].enabled = True
                if hasattr(group_input_001_1.outputs[4], 'hide'):
                    group_input_001_1.outputs[4].hide = False
                if hasattr(group_input_001_1.outputs[4], 'hide_value'):
                    group_input_001_1.outputs[4].hide_value = False
                if hasattr(group_input_001_1.outputs[4], 'name'):
                    group_input_001_1.outputs[4].name = 'Grime Amount'
                if hasattr(group_input_001_1.outputs[4], 'show_expanded'):
                    group_input_001_1.outputs[4].show_expanded = False
                if hasattr(group_input_001_1.outputs[5], 'default_value'):
                    group_input_001_1.outputs[5].default_value = 0.0
                if hasattr(group_input_001_1.outputs[5], 'display_shape'):
                    group_input_001_1.outputs[5].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[5], 'enabled'):
                    group_input_001_1.outputs[5].enabled = True
                if hasattr(group_input_001_1.outputs[5], 'hide'):
                    group_input_001_1.outputs[5].hide = False
                if hasattr(group_input_001_1.outputs[5], 'hide_value'):
                    group_input_001_1.outputs[5].hide_value = False
                if hasattr(group_input_001_1.outputs[5], 'name'):
                    group_input_001_1.outputs[5].name = 'Grime Height Scale'
                if hasattr(group_input_001_1.outputs[5], 'show_expanded'):
                    group_input_001_1.outputs[5].show_expanded = False
                if hasattr(group_input_001_1.outputs[6], 'default_value'):
                    group_input_001_1.outputs[6].default_value = 0.0
                if hasattr(group_input_001_1.outputs[6], 'display_shape'):
                    group_input_001_1.outputs[6].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[6], 'enabled'):
                    group_input_001_1.outputs[6].enabled = True
                if hasattr(group_input_001_1.outputs[6], 'hide'):
                    group_input_001_1.outputs[6].hide = False
                if hasattr(group_input_001_1.outputs[6], 'hide_value'):
                    group_input_001_1.outputs[6].hide_value = False
                if hasattr(group_input_001_1.outputs[6], 'name'):
                    group_input_001_1.outputs[6].name = 'Grime Height'
                if hasattr(group_input_001_1.outputs[6], 'show_expanded'):
                    group_input_001_1.outputs[6].show_expanded = False
                if hasattr(group_input_001_1.outputs[7], 'default_value'):
                    group_input_001_1.outputs[7].default_value = 0.0
                if hasattr(group_input_001_1.outputs[7], 'display_shape'):
                    group_input_001_1.outputs[7].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[7], 'enabled'):
                    group_input_001_1.outputs[7].enabled = True
                if hasattr(group_input_001_1.outputs[7], 'hide'):
                    group_input_001_1.outputs[7].hide = False
                if hasattr(group_input_001_1.outputs[7], 'hide_value'):
                    group_input_001_1.outputs[7].hide_value = False
                if hasattr(group_input_001_1.outputs[7], 'name'):
                    group_input_001_1.outputs[7].name = 'Ambient Occlusion'
                if hasattr(group_input_001_1.outputs[7], 'show_expanded'):
                    group_input_001_1.outputs[7].show_expanded = False
                if hasattr(group_input_001_1.outputs[8], 'default_value'):
                    group_input_001_1.outputs[8].default_value = 0.0
                if hasattr(group_input_001_1.outputs[8], 'display_shape'):
                    group_input_001_1.outputs[8].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[8], 'enabled'):
                    group_input_001_1.outputs[8].enabled = True
                if hasattr(group_input_001_1.outputs[8], 'hide'):
                    group_input_001_1.outputs[8].hide = False
                if hasattr(group_input_001_1.outputs[8], 'hide_value'):
                    group_input_001_1.outputs[8].hide_value = False
                if hasattr(group_input_001_1.outputs[8], 'name'):
                    group_input_001_1.outputs[8].name = 'Scratch Height Amount'
                if hasattr(group_input_001_1.outputs[8], 'show_expanded'):
                    group_input_001_1.outputs[8].show_expanded = False
                if hasattr(group_input_001_1.outputs[9], 'default_value'):
                    group_input_001_1.outputs[9].default_value = 0.0
                if hasattr(group_input_001_1.outputs[9], 'display_shape'):
                    group_input_001_1.outputs[9].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[9], 'enabled'):
                    group_input_001_1.outputs[9].enabled = True
                if hasattr(group_input_001_1.outputs[9], 'hide'):
                    group_input_001_1.outputs[9].hide = False
                if hasattr(group_input_001_1.outputs[9], 'hide_value'):
                    group_input_001_1.outputs[9].hide_value = False
                if hasattr(group_input_001_1.outputs[9], 'name'):
                    group_input_001_1.outputs[9].name = 'Zone 1 Gradient Out'
                if hasattr(group_input_001_1.outputs[9], 'show_expanded'):
                    group_input_001_1.outputs[9].show_expanded = False
                if hasattr(group_input_001_1.outputs[10], 'default_value'):
                    group_input_001_1.outputs[10].default_value = 0.0
                if hasattr(group_input_001_1.outputs[10], 'display_shape'):
                    group_input_001_1.outputs[10].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[10], 'enabled'):
                    group_input_001_1.outputs[10].enabled = True
                if hasattr(group_input_001_1.outputs[10], 'hide'):
                    group_input_001_1.outputs[10].hide = False
                if hasattr(group_input_001_1.outputs[10], 'hide_value'):
                    group_input_001_1.outputs[10].hide_value = False
                if hasattr(group_input_001_1.outputs[10], 'name'):
                    group_input_001_1.outputs[10].name = 'Zone 1 Rough Out'
                if hasattr(group_input_001_1.outputs[10], 'show_expanded'):
                    group_input_001_1.outputs[10].show_expanded = False
                if hasattr(group_input_001_1.outputs[11], 'default_value'):
                    group_input_001_1.outputs[11].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[11], 'display_shape'):
                    group_input_001_1.outputs[11].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[11], 'enabled'):
                    group_input_001_1.outputs[11].enabled = True
                if hasattr(group_input_001_1.outputs[11], 'hide'):
                    group_input_001_1.outputs[11].hide = False
                if hasattr(group_input_001_1.outputs[11], 'hide_value'):
                    group_input_001_1.outputs[11].hide_value = False
                if hasattr(group_input_001_1.outputs[11], 'name'):
                    group_input_001_1.outputs[11].name = 'Zone 1 Norm Out'
                if hasattr(group_input_001_1.outputs[11], 'show_expanded'):
                    group_input_001_1.outputs[11].show_expanded = False
                if hasattr(group_input_001_1.outputs[12], 'default_value'):
                    group_input_001_1.outputs[12].default_value = 0.0
                if hasattr(group_input_001_1.outputs[12], 'display_shape'):
                    group_input_001_1.outputs[12].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[12], 'enabled'):
                    group_input_001_1.outputs[12].enabled = True
                if hasattr(group_input_001_1.outputs[12], 'hide'):
                    group_input_001_1.outputs[12].hide = False
                if hasattr(group_input_001_1.outputs[12], 'hide_value'):
                    group_input_001_1.outputs[12].hide_value = False
                if hasattr(group_input_001_1.outputs[12], 'name'):
                    group_input_001_1.outputs[12].name = 'Zone 1 Scratch Amount'
                if hasattr(group_input_001_1.outputs[12], 'show_expanded'):
                    group_input_001_1.outputs[12].show_expanded = False
                if hasattr(group_input_001_1.outputs[13], 'default_value'):
                    group_input_001_1.outputs[13].default_value = 0.0
                if hasattr(group_input_001_1.outputs[13], 'display_shape'):
                    group_input_001_1.outputs[13].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[13], 'enabled'):
                    group_input_001_1.outputs[13].enabled = True
                if hasattr(group_input_001_1.outputs[13], 'hide'):
                    group_input_001_1.outputs[13].hide = False
                if hasattr(group_input_001_1.outputs[13], 'hide_value'):
                    group_input_001_1.outputs[13].hide_value = False
                if hasattr(group_input_001_1.outputs[13], 'name'):
                    group_input_001_1.outputs[13].name = 'Zone 1 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[13], 'show_expanded'):
                    group_input_001_1.outputs[13].show_expanded = False
                if hasattr(group_input_001_1.outputs[14], 'default_value'):
                    group_input_001_1.outputs[14].default_value = 0.0
                if hasattr(group_input_001_1.outputs[14], 'display_shape'):
                    group_input_001_1.outputs[14].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[14], 'enabled'):
                    group_input_001_1.outputs[14].enabled = True
                if hasattr(group_input_001_1.outputs[14], 'hide'):
                    group_input_001_1.outputs[14].hide = False
                if hasattr(group_input_001_1.outputs[14], 'hide_value'):
                    group_input_001_1.outputs[14].hide_value = False
                if hasattr(group_input_001_1.outputs[14], 'name'):
                    group_input_001_1.outputs[14].name = 'Zone 1 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[14], 'show_expanded'):
                    group_input_001_1.outputs[14].show_expanded = False
                if hasattr(group_input_001_1.outputs[15], 'default_value'):
                    group_input_001_1.outputs[15].default_value = 0.0
                if hasattr(group_input_001_1.outputs[15], 'display_shape'):
                    group_input_001_1.outputs[15].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[15], 'enabled'):
                    group_input_001_1.outputs[15].enabled = True
                if hasattr(group_input_001_1.outputs[15], 'hide'):
                    group_input_001_1.outputs[15].hide = False
                if hasattr(group_input_001_1.outputs[15], 'hide_value'):
                    group_input_001_1.outputs[15].hide_value = False
                if hasattr(group_input_001_1.outputs[15], 'name'):
                    group_input_001_1.outputs[15].name = 'Zone 1 Metallic'
                if hasattr(group_input_001_1.outputs[15], 'show_expanded'):
                    group_input_001_1.outputs[15].show_expanded = False
                if hasattr(group_input_001_1.outputs[16], 'default_value'):
                    group_input_001_1.outputs[16].default_value = 0.0
                if hasattr(group_input_001_1.outputs[16], 'display_shape'):
                    group_input_001_1.outputs[16].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[16], 'enabled'):
                    group_input_001_1.outputs[16].enabled = True
                if hasattr(group_input_001_1.outputs[16], 'hide'):
                    group_input_001_1.outputs[16].hide = False
                if hasattr(group_input_001_1.outputs[16], 'hide_value'):
                    group_input_001_1.outputs[16].hide_value = False
                if hasattr(group_input_001_1.outputs[16], 'name'):
                    group_input_001_1.outputs[16].name = 'Zone 1 SSS Amount'
                if hasattr(group_input_001_1.outputs[16], 'show_expanded'):
                    group_input_001_1.outputs[16].show_expanded = False
                if hasattr(group_input_001_1.outputs[17], 'default_value'):
                    group_input_001_1.outputs[17].default_value = 0.0
                if hasattr(group_input_001_1.outputs[17], 'display_shape'):
                    group_input_001_1.outputs[17].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[17], 'enabled'):
                    group_input_001_1.outputs[17].enabled = True
                if hasattr(group_input_001_1.outputs[17], 'hide'):
                    group_input_001_1.outputs[17].hide = False
                if hasattr(group_input_001_1.outputs[17], 'hide_value'):
                    group_input_001_1.outputs[17].hide_value = False
                if hasattr(group_input_001_1.outputs[17], 'name'):
                    group_input_001_1.outputs[17].name = 'Zone 1 Transparency Amount'
                if hasattr(group_input_001_1.outputs[17], 'show_expanded'):
                    group_input_001_1.outputs[17].show_expanded = False
                if hasattr(group_input_001_1.outputs[18], 'default_value'):
                    group_input_001_1.outputs[18].default_value = 0.0
                if hasattr(group_input_001_1.outputs[18], 'display_shape'):
                    group_input_001_1.outputs[18].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[18], 'enabled'):
                    group_input_001_1.outputs[18].enabled = True
                if hasattr(group_input_001_1.outputs[18], 'hide'):
                    group_input_001_1.outputs[18].hide = False
                if hasattr(group_input_001_1.outputs[18], 'hide_value'):
                    group_input_001_1.outputs[18].hide_value = False
                if hasattr(group_input_001_1.outputs[18], 'name'):
                    group_input_001_1.outputs[18].name = 'Zone 1 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[18], 'show_expanded'):
                    group_input_001_1.outputs[18].show_expanded = False
                if hasattr(group_input_001_1.outputs[19], 'default_value'):
                    group_input_001_1.outputs[19].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[19], 'display_shape'):
                    group_input_001_1.outputs[19].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[19], 'enabled'):
                    group_input_001_1.outputs[19].enabled = True
                if hasattr(group_input_001_1.outputs[19], 'hide'):
                    group_input_001_1.outputs[19].hide = False
                if hasattr(group_input_001_1.outputs[19], 'hide_value'):
                    group_input_001_1.outputs[19].hide_value = False
                if hasattr(group_input_001_1.outputs[19], 'name'):
                    group_input_001_1.outputs[19].name = 'Zone 1 Top Color'
                if hasattr(group_input_001_1.outputs[19], 'show_expanded'):
                    group_input_001_1.outputs[19].show_expanded = False
                if hasattr(group_input_001_1.outputs[20], 'default_value'):
                    group_input_001_1.outputs[20].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[20], 'display_shape'):
                    group_input_001_1.outputs[20].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[20], 'enabled'):
                    group_input_001_1.outputs[20].enabled = True
                if hasattr(group_input_001_1.outputs[20], 'hide'):
                    group_input_001_1.outputs[20].hide = False
                if hasattr(group_input_001_1.outputs[20], 'hide_value'):
                    group_input_001_1.outputs[20].hide_value = False
                if hasattr(group_input_001_1.outputs[20], 'name'):
                    group_input_001_1.outputs[20].name = 'Zone 1 Mid Color'
                if hasattr(group_input_001_1.outputs[20], 'show_expanded'):
                    group_input_001_1.outputs[20].show_expanded = False
                if hasattr(group_input_001_1.outputs[21], 'default_value'):
                    group_input_001_1.outputs[21].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[21], 'display_shape'):
                    group_input_001_1.outputs[21].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[21], 'enabled'):
                    group_input_001_1.outputs[21].enabled = True
                if hasattr(group_input_001_1.outputs[21], 'hide'):
                    group_input_001_1.outputs[21].hide = False
                if hasattr(group_input_001_1.outputs[21], 'hide_value'):
                    group_input_001_1.outputs[21].hide_value = False
                if hasattr(group_input_001_1.outputs[21], 'name'):
                    group_input_001_1.outputs[21].name = 'Zone 1 Bot Color'
                if hasattr(group_input_001_1.outputs[21], 'show_expanded'):
                    group_input_001_1.outputs[21].show_expanded = False
                if hasattr(group_input_001_1.outputs[22], 'default_value'):
                    group_input_001_1.outputs[22].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[22], 'display_shape'):
                    group_input_001_1.outputs[22].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[22], 'enabled'):
                    group_input_001_1.outputs[22].enabled = True
                if hasattr(group_input_001_1.outputs[22], 'hide'):
                    group_input_001_1.outputs[22].hide = False
                if hasattr(group_input_001_1.outputs[22], 'hide_value'):
                    group_input_001_1.outputs[22].hide_value = False
                if hasattr(group_input_001_1.outputs[22], 'name'):
                    group_input_001_1.outputs[22].name = 'Zone 1 ScratchColor'
                if hasattr(group_input_001_1.outputs[22], 'show_expanded'):
                    group_input_001_1.outputs[22].show_expanded = False
                if hasattr(group_input_001_1.outputs[23], 'default_value'):
                    group_input_001_1.outputs[23].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[23], 'display_shape'):
                    group_input_001_1.outputs[23].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[23], 'enabled'):
                    group_input_001_1.outputs[23].enabled = True
                if hasattr(group_input_001_1.outputs[23], 'hide'):
                    group_input_001_1.outputs[23].hide = False
                if hasattr(group_input_001_1.outputs[23], 'hide_value'):
                    group_input_001_1.outputs[23].hide_value = False
                if hasattr(group_input_001_1.outputs[23], 'name'):
                    group_input_001_1.outputs[23].name = 'Zone 1 SSS Color'
                if hasattr(group_input_001_1.outputs[23], 'show_expanded'):
                    group_input_001_1.outputs[23].show_expanded = False
                if hasattr(group_input_001_1.outputs[24], 'default_value'):
                    group_input_001_1.outputs[24].default_value = 0.0
                if hasattr(group_input_001_1.outputs[24], 'display_shape'):
                    group_input_001_1.outputs[24].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[24], 'enabled'):
                    group_input_001_1.outputs[24].enabled = True
                if hasattr(group_input_001_1.outputs[24], 'hide'):
                    group_input_001_1.outputs[24].hide = False
                if hasattr(group_input_001_1.outputs[24], 'hide_value'):
                    group_input_001_1.outputs[24].hide_value = False
                if hasattr(group_input_001_1.outputs[24], 'name'):
                    group_input_001_1.outputs[24].name = 'Zone 2 Toggle'
                if hasattr(group_input_001_1.outputs[24], 'show_expanded'):
                    group_input_001_1.outputs[24].show_expanded = False
                if hasattr(group_input_001_1.outputs[25], 'default_value'):
                    group_input_001_1.outputs[25].default_value = 0.0
                if hasattr(group_input_001_1.outputs[25], 'display_shape'):
                    group_input_001_1.outputs[25].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[25], 'enabled'):
                    group_input_001_1.outputs[25].enabled = True
                if hasattr(group_input_001_1.outputs[25], 'hide'):
                    group_input_001_1.outputs[25].hide = False
                if hasattr(group_input_001_1.outputs[25], 'hide_value'):
                    group_input_001_1.outputs[25].hide_value = False
                if hasattr(group_input_001_1.outputs[25], 'name'):
                    group_input_001_1.outputs[25].name = 'Zone 2 Gradient Out'
                if hasattr(group_input_001_1.outputs[25], 'show_expanded'):
                    group_input_001_1.outputs[25].show_expanded = False
                if hasattr(group_input_001_1.outputs[26], 'default_value'):
                    group_input_001_1.outputs[26].default_value = 0.0
                if hasattr(group_input_001_1.outputs[26], 'display_shape'):
                    group_input_001_1.outputs[26].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[26], 'enabled'):
                    group_input_001_1.outputs[26].enabled = True
                if hasattr(group_input_001_1.outputs[26], 'hide'):
                    group_input_001_1.outputs[26].hide = False
                if hasattr(group_input_001_1.outputs[26], 'hide_value'):
                    group_input_001_1.outputs[26].hide_value = False
                if hasattr(group_input_001_1.outputs[26], 'name'):
                    group_input_001_1.outputs[26].name = 'Zone 2 Rough Out'
                if hasattr(group_input_001_1.outputs[26], 'show_expanded'):
                    group_input_001_1.outputs[26].show_expanded = False
                if hasattr(group_input_001_1.outputs[27], 'default_value'):
                    group_input_001_1.outputs[27].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[27], 'display_shape'):
                    group_input_001_1.outputs[27].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[27], 'enabled'):
                    group_input_001_1.outputs[27].enabled = True
                if hasattr(group_input_001_1.outputs[27], 'hide'):
                    group_input_001_1.outputs[27].hide = False
                if hasattr(group_input_001_1.outputs[27], 'hide_value'):
                    group_input_001_1.outputs[27].hide_value = False
                if hasattr(group_input_001_1.outputs[27], 'name'):
                    group_input_001_1.outputs[27].name = 'Zone 2 Norm Out'
                if hasattr(group_input_001_1.outputs[27], 'show_expanded'):
                    group_input_001_1.outputs[27].show_expanded = False
                if hasattr(group_input_001_1.outputs[28], 'default_value'):
                    group_input_001_1.outputs[28].default_value = 0.0
                if hasattr(group_input_001_1.outputs[28], 'display_shape'):
                    group_input_001_1.outputs[28].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[28], 'enabled'):
                    group_input_001_1.outputs[28].enabled = True
                if hasattr(group_input_001_1.outputs[28], 'hide'):
                    group_input_001_1.outputs[28].hide = False
                if hasattr(group_input_001_1.outputs[28], 'hide_value'):
                    group_input_001_1.outputs[28].hide_value = False
                if hasattr(group_input_001_1.outputs[28], 'name'):
                    group_input_001_1.outputs[28].name = 'Zone 2 Scratch Amount'
                if hasattr(group_input_001_1.outputs[28], 'show_expanded'):
                    group_input_001_1.outputs[28].show_expanded = False
                if hasattr(group_input_001_1.outputs[29], 'default_value'):
                    group_input_001_1.outputs[29].default_value = 0.0
                if hasattr(group_input_001_1.outputs[29], 'display_shape'):
                    group_input_001_1.outputs[29].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[29], 'enabled'):
                    group_input_001_1.outputs[29].enabled = True
                if hasattr(group_input_001_1.outputs[29], 'hide'):
                    group_input_001_1.outputs[29].hide = False
                if hasattr(group_input_001_1.outputs[29], 'hide_value'):
                    group_input_001_1.outputs[29].hide_value = False
                if hasattr(group_input_001_1.outputs[29], 'name'):
                    group_input_001_1.outputs[29].name = 'Zone 2 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[29], 'show_expanded'):
                    group_input_001_1.outputs[29].show_expanded = False
                if hasattr(group_input_001_1.outputs[30], 'default_value'):
                    group_input_001_1.outputs[30].default_value = 0.0
                if hasattr(group_input_001_1.outputs[30], 'display_shape'):
                    group_input_001_1.outputs[30].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[30], 'enabled'):
                    group_input_001_1.outputs[30].enabled = True
                if hasattr(group_input_001_1.outputs[30], 'hide'):
                    group_input_001_1.outputs[30].hide = False
                if hasattr(group_input_001_1.outputs[30], 'hide_value'):
                    group_input_001_1.outputs[30].hide_value = False
                if hasattr(group_input_001_1.outputs[30], 'name'):
                    group_input_001_1.outputs[30].name = 'Zone 2 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[30], 'show_expanded'):
                    group_input_001_1.outputs[30].show_expanded = False
                if hasattr(group_input_001_1.outputs[31], 'default_value'):
                    group_input_001_1.outputs[31].default_value = 0.0
                if hasattr(group_input_001_1.outputs[31], 'display_shape'):
                    group_input_001_1.outputs[31].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[31], 'enabled'):
                    group_input_001_1.outputs[31].enabled = True
                if hasattr(group_input_001_1.outputs[31], 'hide'):
                    group_input_001_1.outputs[31].hide = False
                if hasattr(group_input_001_1.outputs[31], 'hide_value'):
                    group_input_001_1.outputs[31].hide_value = False
                if hasattr(group_input_001_1.outputs[31], 'name'):
                    group_input_001_1.outputs[31].name = 'Zone 2 Metallic'
                if hasattr(group_input_001_1.outputs[31], 'show_expanded'):
                    group_input_001_1.outputs[31].show_expanded = False
                if hasattr(group_input_001_1.outputs[32], 'default_value'):
                    group_input_001_1.outputs[32].default_value = 0.0
                if hasattr(group_input_001_1.outputs[32], 'display_shape'):
                    group_input_001_1.outputs[32].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[32], 'enabled'):
                    group_input_001_1.outputs[32].enabled = True
                if hasattr(group_input_001_1.outputs[32], 'hide'):
                    group_input_001_1.outputs[32].hide = False
                if hasattr(group_input_001_1.outputs[32], 'hide_value'):
                    group_input_001_1.outputs[32].hide_value = False
                if hasattr(group_input_001_1.outputs[32], 'name'):
                    group_input_001_1.outputs[32].name = 'Zone 2 SSS Amount'
                if hasattr(group_input_001_1.outputs[32], 'show_expanded'):
                    group_input_001_1.outputs[32].show_expanded = False
                if hasattr(group_input_001_1.outputs[33], 'default_value'):
                    group_input_001_1.outputs[33].default_value = 0.0
                if hasattr(group_input_001_1.outputs[33], 'display_shape'):
                    group_input_001_1.outputs[33].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[33], 'enabled'):
                    group_input_001_1.outputs[33].enabled = True
                if hasattr(group_input_001_1.outputs[33], 'hide'):
                    group_input_001_1.outputs[33].hide = False
                if hasattr(group_input_001_1.outputs[33], 'hide_value'):
                    group_input_001_1.outputs[33].hide_value = False
                if hasattr(group_input_001_1.outputs[33], 'name'):
                    group_input_001_1.outputs[33].name = 'Zone 2 Transparency Amount'
                if hasattr(group_input_001_1.outputs[33], 'show_expanded'):
                    group_input_001_1.outputs[33].show_expanded = False
                if hasattr(group_input_001_1.outputs[34], 'default_value'):
                    group_input_001_1.outputs[34].default_value = 0.0
                if hasattr(group_input_001_1.outputs[34], 'display_shape'):
                    group_input_001_1.outputs[34].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[34], 'enabled'):
                    group_input_001_1.outputs[34].enabled = True
                if hasattr(group_input_001_1.outputs[34], 'hide'):
                    group_input_001_1.outputs[34].hide = False
                if hasattr(group_input_001_1.outputs[34], 'hide_value'):
                    group_input_001_1.outputs[34].hide_value = False
                if hasattr(group_input_001_1.outputs[34], 'name'):
                    group_input_001_1.outputs[34].name = 'Zone 2 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[34], 'show_expanded'):
                    group_input_001_1.outputs[34].show_expanded = False
                if hasattr(group_input_001_1.outputs[35], 'default_value'):
                    group_input_001_1.outputs[35].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[35], 'display_shape'):
                    group_input_001_1.outputs[35].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[35], 'enabled'):
                    group_input_001_1.outputs[35].enabled = True
                if hasattr(group_input_001_1.outputs[35], 'hide'):
                    group_input_001_1.outputs[35].hide = False
                if hasattr(group_input_001_1.outputs[35], 'hide_value'):
                    group_input_001_1.outputs[35].hide_value = False
                if hasattr(group_input_001_1.outputs[35], 'name'):
                    group_input_001_1.outputs[35].name = 'Zone 2 Top Color'
                if hasattr(group_input_001_1.outputs[35], 'show_expanded'):
                    group_input_001_1.outputs[35].show_expanded = False
                if hasattr(group_input_001_1.outputs[36], 'default_value'):
                    group_input_001_1.outputs[36].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[36], 'display_shape'):
                    group_input_001_1.outputs[36].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[36], 'enabled'):
                    group_input_001_1.outputs[36].enabled = True
                if hasattr(group_input_001_1.outputs[36], 'hide'):
                    group_input_001_1.outputs[36].hide = False
                if hasattr(group_input_001_1.outputs[36], 'hide_value'):
                    group_input_001_1.outputs[36].hide_value = False
                if hasattr(group_input_001_1.outputs[36], 'name'):
                    group_input_001_1.outputs[36].name = 'Zone 2 Mid Color'
                if hasattr(group_input_001_1.outputs[36], 'show_expanded'):
                    group_input_001_1.outputs[36].show_expanded = False
                if hasattr(group_input_001_1.outputs[37], 'default_value'):
                    group_input_001_1.outputs[37].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[37], 'display_shape'):
                    group_input_001_1.outputs[37].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[37], 'enabled'):
                    group_input_001_1.outputs[37].enabled = True
                if hasattr(group_input_001_1.outputs[37], 'hide'):
                    group_input_001_1.outputs[37].hide = False
                if hasattr(group_input_001_1.outputs[37], 'hide_value'):
                    group_input_001_1.outputs[37].hide_value = False
                if hasattr(group_input_001_1.outputs[37], 'name'):
                    group_input_001_1.outputs[37].name = 'Zone 2 Bot Color'
                if hasattr(group_input_001_1.outputs[37], 'show_expanded'):
                    group_input_001_1.outputs[37].show_expanded = False
                if hasattr(group_input_001_1.outputs[38], 'default_value'):
                    group_input_001_1.outputs[38].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[38], 'display_shape'):
                    group_input_001_1.outputs[38].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[38], 'enabled'):
                    group_input_001_1.outputs[38].enabled = True
                if hasattr(group_input_001_1.outputs[38], 'hide'):
                    group_input_001_1.outputs[38].hide = False
                if hasattr(group_input_001_1.outputs[38], 'hide_value'):
                    group_input_001_1.outputs[38].hide_value = False
                if hasattr(group_input_001_1.outputs[38], 'name'):
                    group_input_001_1.outputs[38].name = 'Zone 2 ScratchColor'
                if hasattr(group_input_001_1.outputs[38], 'show_expanded'):
                    group_input_001_1.outputs[38].show_expanded = False
                if hasattr(group_input_001_1.outputs[39], 'default_value'):
                    group_input_001_1.outputs[39].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[39], 'display_shape'):
                    group_input_001_1.outputs[39].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[39], 'enabled'):
                    group_input_001_1.outputs[39].enabled = True
                if hasattr(group_input_001_1.outputs[39], 'hide'):
                    group_input_001_1.outputs[39].hide = False
                if hasattr(group_input_001_1.outputs[39], 'hide_value'):
                    group_input_001_1.outputs[39].hide_value = False
                if hasattr(group_input_001_1.outputs[39], 'name'):
                    group_input_001_1.outputs[39].name = 'Zone 2 SSS Color'
                if hasattr(group_input_001_1.outputs[39], 'show_expanded'):
                    group_input_001_1.outputs[39].show_expanded = False
                if hasattr(group_input_001_1.outputs[40], 'default_value'):
                    group_input_001_1.outputs[40].default_value = 0.0
                if hasattr(group_input_001_1.outputs[40], 'display_shape'):
                    group_input_001_1.outputs[40].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[40], 'enabled'):
                    group_input_001_1.outputs[40].enabled = True
                if hasattr(group_input_001_1.outputs[40], 'hide'):
                    group_input_001_1.outputs[40].hide = False
                if hasattr(group_input_001_1.outputs[40], 'hide_value'):
                    group_input_001_1.outputs[40].hide_value = False
                if hasattr(group_input_001_1.outputs[40], 'name'):
                    group_input_001_1.outputs[40].name = 'Zone 3 Toggle'
                if hasattr(group_input_001_1.outputs[40], 'show_expanded'):
                    group_input_001_1.outputs[40].show_expanded = False
                if hasattr(group_input_001_1.outputs[41], 'default_value'):
                    group_input_001_1.outputs[41].default_value = 0.0
                if hasattr(group_input_001_1.outputs[41], 'display_shape'):
                    group_input_001_1.outputs[41].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[41], 'enabled'):
                    group_input_001_1.outputs[41].enabled = True
                if hasattr(group_input_001_1.outputs[41], 'hide'):
                    group_input_001_1.outputs[41].hide = False
                if hasattr(group_input_001_1.outputs[41], 'hide_value'):
                    group_input_001_1.outputs[41].hide_value = False
                if hasattr(group_input_001_1.outputs[41], 'name'):
                    group_input_001_1.outputs[41].name = 'Zone 3 Gradient Out'
                if hasattr(group_input_001_1.outputs[41], 'show_expanded'):
                    group_input_001_1.outputs[41].show_expanded = False
                if hasattr(group_input_001_1.outputs[42], 'default_value'):
                    group_input_001_1.outputs[42].default_value = 0.0
                if hasattr(group_input_001_1.outputs[42], 'display_shape'):
                    group_input_001_1.outputs[42].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[42], 'enabled'):
                    group_input_001_1.outputs[42].enabled = True
                if hasattr(group_input_001_1.outputs[42], 'hide'):
                    group_input_001_1.outputs[42].hide = False
                if hasattr(group_input_001_1.outputs[42], 'hide_value'):
                    group_input_001_1.outputs[42].hide_value = False
                if hasattr(group_input_001_1.outputs[42], 'name'):
                    group_input_001_1.outputs[42].name = 'Zone 3 Rough Out'
                if hasattr(group_input_001_1.outputs[42], 'show_expanded'):
                    group_input_001_1.outputs[42].show_expanded = False
                if hasattr(group_input_001_1.outputs[43], 'default_value'):
                    group_input_001_1.outputs[43].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[43], 'display_shape'):
                    group_input_001_1.outputs[43].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[43], 'enabled'):
                    group_input_001_1.outputs[43].enabled = True
                if hasattr(group_input_001_1.outputs[43], 'hide'):
                    group_input_001_1.outputs[43].hide = False
                if hasattr(group_input_001_1.outputs[43], 'hide_value'):
                    group_input_001_1.outputs[43].hide_value = False
                if hasattr(group_input_001_1.outputs[43], 'name'):
                    group_input_001_1.outputs[43].name = 'Zone 3 Norm Out'
                if hasattr(group_input_001_1.outputs[43], 'show_expanded'):
                    group_input_001_1.outputs[43].show_expanded = False
                if hasattr(group_input_001_1.outputs[44], 'default_value'):
                    group_input_001_1.outputs[44].default_value = 0.0
                if hasattr(group_input_001_1.outputs[44], 'display_shape'):
                    group_input_001_1.outputs[44].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[44], 'enabled'):
                    group_input_001_1.outputs[44].enabled = True
                if hasattr(group_input_001_1.outputs[44], 'hide'):
                    group_input_001_1.outputs[44].hide = False
                if hasattr(group_input_001_1.outputs[44], 'hide_value'):
                    group_input_001_1.outputs[44].hide_value = False
                if hasattr(group_input_001_1.outputs[44], 'name'):
                    group_input_001_1.outputs[44].name = 'Zone 3 Scratch Amount'
                if hasattr(group_input_001_1.outputs[44], 'show_expanded'):
                    group_input_001_1.outputs[44].show_expanded = False
                if hasattr(group_input_001_1.outputs[45], 'default_value'):
                    group_input_001_1.outputs[45].default_value = 0.0
                if hasattr(group_input_001_1.outputs[45], 'display_shape'):
                    group_input_001_1.outputs[45].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[45], 'enabled'):
                    group_input_001_1.outputs[45].enabled = True
                if hasattr(group_input_001_1.outputs[45], 'hide'):
                    group_input_001_1.outputs[45].hide = False
                if hasattr(group_input_001_1.outputs[45], 'hide_value'):
                    group_input_001_1.outputs[45].hide_value = False
                if hasattr(group_input_001_1.outputs[45], 'name'):
                    group_input_001_1.outputs[45].name = 'Zone 3 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[45], 'show_expanded'):
                    group_input_001_1.outputs[45].show_expanded = False
                if hasattr(group_input_001_1.outputs[46], 'default_value'):
                    group_input_001_1.outputs[46].default_value = 0.0
                if hasattr(group_input_001_1.outputs[46], 'display_shape'):
                    group_input_001_1.outputs[46].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[46], 'enabled'):
                    group_input_001_1.outputs[46].enabled = True
                if hasattr(group_input_001_1.outputs[46], 'hide'):
                    group_input_001_1.outputs[46].hide = False
                if hasattr(group_input_001_1.outputs[46], 'hide_value'):
                    group_input_001_1.outputs[46].hide_value = False
                if hasattr(group_input_001_1.outputs[46], 'name'):
                    group_input_001_1.outputs[46].name = 'Zone 3 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[46], 'show_expanded'):
                    group_input_001_1.outputs[46].show_expanded = False
                if hasattr(group_input_001_1.outputs[47], 'default_value'):
                    group_input_001_1.outputs[47].default_value = 0.0
                if hasattr(group_input_001_1.outputs[47], 'display_shape'):
                    group_input_001_1.outputs[47].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[47], 'enabled'):
                    group_input_001_1.outputs[47].enabled = True
                if hasattr(group_input_001_1.outputs[47], 'hide'):
                    group_input_001_1.outputs[47].hide = False
                if hasattr(group_input_001_1.outputs[47], 'hide_value'):
                    group_input_001_1.outputs[47].hide_value = False
                if hasattr(group_input_001_1.outputs[47], 'name'):
                    group_input_001_1.outputs[47].name = 'Zone 3 Metallic'
                if hasattr(group_input_001_1.outputs[47], 'show_expanded'):
                    group_input_001_1.outputs[47].show_expanded = False
                if hasattr(group_input_001_1.outputs[48], 'default_value'):
                    group_input_001_1.outputs[48].default_value = 0.0
                if hasattr(group_input_001_1.outputs[48], 'display_shape'):
                    group_input_001_1.outputs[48].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[48], 'enabled'):
                    group_input_001_1.outputs[48].enabled = True
                if hasattr(group_input_001_1.outputs[48], 'hide'):
                    group_input_001_1.outputs[48].hide = False
                if hasattr(group_input_001_1.outputs[48], 'hide_value'):
                    group_input_001_1.outputs[48].hide_value = False
                if hasattr(group_input_001_1.outputs[48], 'name'):
                    group_input_001_1.outputs[48].name = 'Zone 3 SSS Amount'
                if hasattr(group_input_001_1.outputs[48], 'show_expanded'):
                    group_input_001_1.outputs[48].show_expanded = False
                if hasattr(group_input_001_1.outputs[49], 'default_value'):
                    group_input_001_1.outputs[49].default_value = 0.0
                if hasattr(group_input_001_1.outputs[49], 'display_shape'):
                    group_input_001_1.outputs[49].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[49], 'enabled'):
                    group_input_001_1.outputs[49].enabled = True
                if hasattr(group_input_001_1.outputs[49], 'hide'):
                    group_input_001_1.outputs[49].hide = False
                if hasattr(group_input_001_1.outputs[49], 'hide_value'):
                    group_input_001_1.outputs[49].hide_value = False
                if hasattr(group_input_001_1.outputs[49], 'name'):
                    group_input_001_1.outputs[49].name = 'Zone 3 Transparency Amount'
                if hasattr(group_input_001_1.outputs[49], 'show_expanded'):
                    group_input_001_1.outputs[49].show_expanded = False
                if hasattr(group_input_001_1.outputs[50], 'default_value'):
                    group_input_001_1.outputs[50].default_value = 0.0
                if hasattr(group_input_001_1.outputs[50], 'display_shape'):
                    group_input_001_1.outputs[50].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[50], 'enabled'):
                    group_input_001_1.outputs[50].enabled = True
                if hasattr(group_input_001_1.outputs[50], 'hide'):
                    group_input_001_1.outputs[50].hide = False
                if hasattr(group_input_001_1.outputs[50], 'hide_value'):
                    group_input_001_1.outputs[50].hide_value = False
                if hasattr(group_input_001_1.outputs[50], 'name'):
                    group_input_001_1.outputs[50].name = 'Zone 3 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[50], 'show_expanded'):
                    group_input_001_1.outputs[50].show_expanded = False
                if hasattr(group_input_001_1.outputs[51], 'default_value'):
                    group_input_001_1.outputs[51].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[51], 'display_shape'):
                    group_input_001_1.outputs[51].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[51], 'enabled'):
                    group_input_001_1.outputs[51].enabled = True
                if hasattr(group_input_001_1.outputs[51], 'hide'):
                    group_input_001_1.outputs[51].hide = False
                if hasattr(group_input_001_1.outputs[51], 'hide_value'):
                    group_input_001_1.outputs[51].hide_value = False
                if hasattr(group_input_001_1.outputs[51], 'name'):
                    group_input_001_1.outputs[51].name = 'Zone 3 Top Color'
                if hasattr(group_input_001_1.outputs[51], 'show_expanded'):
                    group_input_001_1.outputs[51].show_expanded = False
                if hasattr(group_input_001_1.outputs[52], 'default_value'):
                    group_input_001_1.outputs[52].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[52], 'display_shape'):
                    group_input_001_1.outputs[52].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[52], 'enabled'):
                    group_input_001_1.outputs[52].enabled = True
                if hasattr(group_input_001_1.outputs[52], 'hide'):
                    group_input_001_1.outputs[52].hide = False
                if hasattr(group_input_001_1.outputs[52], 'hide_value'):
                    group_input_001_1.outputs[52].hide_value = False
                if hasattr(group_input_001_1.outputs[52], 'name'):
                    group_input_001_1.outputs[52].name = 'Zone 3 Mid Color'
                if hasattr(group_input_001_1.outputs[52], 'show_expanded'):
                    group_input_001_1.outputs[52].show_expanded = False
                if hasattr(group_input_001_1.outputs[53], 'default_value'):
                    group_input_001_1.outputs[53].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[53], 'display_shape'):
                    group_input_001_1.outputs[53].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[53], 'enabled'):
                    group_input_001_1.outputs[53].enabled = True
                if hasattr(group_input_001_1.outputs[53], 'hide'):
                    group_input_001_1.outputs[53].hide = False
                if hasattr(group_input_001_1.outputs[53], 'hide_value'):
                    group_input_001_1.outputs[53].hide_value = False
                if hasattr(group_input_001_1.outputs[53], 'name'):
                    group_input_001_1.outputs[53].name = 'Zone 3 Bot Color'
                if hasattr(group_input_001_1.outputs[53], 'show_expanded'):
                    group_input_001_1.outputs[53].show_expanded = False
                if hasattr(group_input_001_1.outputs[54], 'default_value'):
                    group_input_001_1.outputs[54].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[54], 'display_shape'):
                    group_input_001_1.outputs[54].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[54], 'enabled'):
                    group_input_001_1.outputs[54].enabled = True
                if hasattr(group_input_001_1.outputs[54], 'hide'):
                    group_input_001_1.outputs[54].hide = False
                if hasattr(group_input_001_1.outputs[54], 'hide_value'):
                    group_input_001_1.outputs[54].hide_value = False
                if hasattr(group_input_001_1.outputs[54], 'name'):
                    group_input_001_1.outputs[54].name = 'Zone 3 ScratchColor'
                if hasattr(group_input_001_1.outputs[54], 'show_expanded'):
                    group_input_001_1.outputs[54].show_expanded = False
                if hasattr(group_input_001_1.outputs[55], 'default_value'):
                    group_input_001_1.outputs[55].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[55], 'display_shape'):
                    group_input_001_1.outputs[55].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[55], 'enabled'):
                    group_input_001_1.outputs[55].enabled = True
                if hasattr(group_input_001_1.outputs[55], 'hide'):
                    group_input_001_1.outputs[55].hide = False
                if hasattr(group_input_001_1.outputs[55], 'hide_value'):
                    group_input_001_1.outputs[55].hide_value = False
                if hasattr(group_input_001_1.outputs[55], 'name'):
                    group_input_001_1.outputs[55].name = 'Zone 3 SSS Color'
                if hasattr(group_input_001_1.outputs[55], 'show_expanded'):
                    group_input_001_1.outputs[55].show_expanded = False
                if hasattr(group_input_001_1.outputs[56], 'default_value'):
                    group_input_001_1.outputs[56].default_value = 0.0
                if hasattr(group_input_001_1.outputs[56], 'display_shape'):
                    group_input_001_1.outputs[56].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[56], 'enabled'):
                    group_input_001_1.outputs[56].enabled = True
                if hasattr(group_input_001_1.outputs[56], 'hide'):
                    group_input_001_1.outputs[56].hide = False
                if hasattr(group_input_001_1.outputs[56], 'hide_value'):
                    group_input_001_1.outputs[56].hide_value = False
                if hasattr(group_input_001_1.outputs[56], 'name'):
                    group_input_001_1.outputs[56].name = 'Zone 4 Toggle'
                if hasattr(group_input_001_1.outputs[56], 'show_expanded'):
                    group_input_001_1.outputs[56].show_expanded = False
                if hasattr(group_input_001_1.outputs[57], 'default_value'):
                    group_input_001_1.outputs[57].default_value = 0.0
                if hasattr(group_input_001_1.outputs[57], 'display_shape'):
                    group_input_001_1.outputs[57].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[57], 'enabled'):
                    group_input_001_1.outputs[57].enabled = True
                if hasattr(group_input_001_1.outputs[57], 'hide'):
                    group_input_001_1.outputs[57].hide = False
                if hasattr(group_input_001_1.outputs[57], 'hide_value'):
                    group_input_001_1.outputs[57].hide_value = False
                if hasattr(group_input_001_1.outputs[57], 'name'):
                    group_input_001_1.outputs[57].name = 'Zone 4 Gradient Out'
                if hasattr(group_input_001_1.outputs[57], 'show_expanded'):
                    group_input_001_1.outputs[57].show_expanded = False
                if hasattr(group_input_001_1.outputs[58], 'default_value'):
                    group_input_001_1.outputs[58].default_value = 0.0
                if hasattr(group_input_001_1.outputs[58], 'display_shape'):
                    group_input_001_1.outputs[58].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[58], 'enabled'):
                    group_input_001_1.outputs[58].enabled = True
                if hasattr(group_input_001_1.outputs[58], 'hide'):
                    group_input_001_1.outputs[58].hide = False
                if hasattr(group_input_001_1.outputs[58], 'hide_value'):
                    group_input_001_1.outputs[58].hide_value = False
                if hasattr(group_input_001_1.outputs[58], 'name'):
                    group_input_001_1.outputs[58].name = 'Zone 4 Rough Out'
                if hasattr(group_input_001_1.outputs[58], 'show_expanded'):
                    group_input_001_1.outputs[58].show_expanded = False
                if hasattr(group_input_001_1.outputs[59], 'default_value'):
                    group_input_001_1.outputs[59].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[59], 'display_shape'):
                    group_input_001_1.outputs[59].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[59], 'enabled'):
                    group_input_001_1.outputs[59].enabled = True
                if hasattr(group_input_001_1.outputs[59], 'hide'):
                    group_input_001_1.outputs[59].hide = False
                if hasattr(group_input_001_1.outputs[59], 'hide_value'):
                    group_input_001_1.outputs[59].hide_value = False
                if hasattr(group_input_001_1.outputs[59], 'name'):
                    group_input_001_1.outputs[59].name = 'Zone 4 Norm Out'
                if hasattr(group_input_001_1.outputs[59], 'show_expanded'):
                    group_input_001_1.outputs[59].show_expanded = False
                if hasattr(group_input_001_1.outputs[60], 'default_value'):
                    group_input_001_1.outputs[60].default_value = 0.0
                if hasattr(group_input_001_1.outputs[60], 'display_shape'):
                    group_input_001_1.outputs[60].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[60], 'enabled'):
                    group_input_001_1.outputs[60].enabled = True
                if hasattr(group_input_001_1.outputs[60], 'hide'):
                    group_input_001_1.outputs[60].hide = False
                if hasattr(group_input_001_1.outputs[60], 'hide_value'):
                    group_input_001_1.outputs[60].hide_value = False
                if hasattr(group_input_001_1.outputs[60], 'name'):
                    group_input_001_1.outputs[60].name = 'Zone 4 Scratch Amount'
                if hasattr(group_input_001_1.outputs[60], 'show_expanded'):
                    group_input_001_1.outputs[60].show_expanded = False
                if hasattr(group_input_001_1.outputs[61], 'default_value'):
                    group_input_001_1.outputs[61].default_value = 0.0
                if hasattr(group_input_001_1.outputs[61], 'display_shape'):
                    group_input_001_1.outputs[61].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[61], 'enabled'):
                    group_input_001_1.outputs[61].enabled = True
                if hasattr(group_input_001_1.outputs[61], 'hide'):
                    group_input_001_1.outputs[61].hide = False
                if hasattr(group_input_001_1.outputs[61], 'hide_value'):
                    group_input_001_1.outputs[61].hide_value = False
                if hasattr(group_input_001_1.outputs[61], 'name'):
                    group_input_001_1.outputs[61].name = 'Zone 4 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[61], 'show_expanded'):
                    group_input_001_1.outputs[61].show_expanded = False
                if hasattr(group_input_001_1.outputs[62], 'default_value'):
                    group_input_001_1.outputs[62].default_value = 0.0
                if hasattr(group_input_001_1.outputs[62], 'display_shape'):
                    group_input_001_1.outputs[62].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[62], 'enabled'):
                    group_input_001_1.outputs[62].enabled = True
                if hasattr(group_input_001_1.outputs[62], 'hide'):
                    group_input_001_1.outputs[62].hide = False
                if hasattr(group_input_001_1.outputs[62], 'hide_value'):
                    group_input_001_1.outputs[62].hide_value = False
                if hasattr(group_input_001_1.outputs[62], 'name'):
                    group_input_001_1.outputs[62].name = 'Zone 4 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[62], 'show_expanded'):
                    group_input_001_1.outputs[62].show_expanded = False
                if hasattr(group_input_001_1.outputs[63], 'default_value'):
                    group_input_001_1.outputs[63].default_value = 0.0
                if hasattr(group_input_001_1.outputs[63], 'display_shape'):
                    group_input_001_1.outputs[63].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[63], 'enabled'):
                    group_input_001_1.outputs[63].enabled = True
                if hasattr(group_input_001_1.outputs[63], 'hide'):
                    group_input_001_1.outputs[63].hide = False
                if hasattr(group_input_001_1.outputs[63], 'hide_value'):
                    group_input_001_1.outputs[63].hide_value = False
                if hasattr(group_input_001_1.outputs[63], 'name'):
                    group_input_001_1.outputs[63].name = 'Zone 4 Metallic'
                if hasattr(group_input_001_1.outputs[63], 'show_expanded'):
                    group_input_001_1.outputs[63].show_expanded = False
                if hasattr(group_input_001_1.outputs[64], 'default_value'):
                    group_input_001_1.outputs[64].default_value = 0.0
                if hasattr(group_input_001_1.outputs[64], 'display_shape'):
                    group_input_001_1.outputs[64].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[64], 'enabled'):
                    group_input_001_1.outputs[64].enabled = True
                if hasattr(group_input_001_1.outputs[64], 'hide'):
                    group_input_001_1.outputs[64].hide = False
                if hasattr(group_input_001_1.outputs[64], 'hide_value'):
                    group_input_001_1.outputs[64].hide_value = False
                if hasattr(group_input_001_1.outputs[64], 'name'):
                    group_input_001_1.outputs[64].name = 'Zone 4 SSS Amount'
                if hasattr(group_input_001_1.outputs[64], 'show_expanded'):
                    group_input_001_1.outputs[64].show_expanded = False
                if hasattr(group_input_001_1.outputs[65], 'default_value'):
                    group_input_001_1.outputs[65].default_value = 0.0
                if hasattr(group_input_001_1.outputs[65], 'display_shape'):
                    group_input_001_1.outputs[65].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[65], 'enabled'):
                    group_input_001_1.outputs[65].enabled = True
                if hasattr(group_input_001_1.outputs[65], 'hide'):
                    group_input_001_1.outputs[65].hide = False
                if hasattr(group_input_001_1.outputs[65], 'hide_value'):
                    group_input_001_1.outputs[65].hide_value = False
                if hasattr(group_input_001_1.outputs[65], 'name'):
                    group_input_001_1.outputs[65].name = 'Zone 4 Transparency Amount'
                if hasattr(group_input_001_1.outputs[65], 'show_expanded'):
                    group_input_001_1.outputs[65].show_expanded = False
                if hasattr(group_input_001_1.outputs[66], 'default_value'):
                    group_input_001_1.outputs[66].default_value = 0.0
                if hasattr(group_input_001_1.outputs[66], 'display_shape'):
                    group_input_001_1.outputs[66].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[66], 'enabled'):
                    group_input_001_1.outputs[66].enabled = True
                if hasattr(group_input_001_1.outputs[66], 'hide'):
                    group_input_001_1.outputs[66].hide = False
                if hasattr(group_input_001_1.outputs[66], 'hide_value'):
                    group_input_001_1.outputs[66].hide_value = False
                if hasattr(group_input_001_1.outputs[66], 'name'):
                    group_input_001_1.outputs[66].name = 'Zone 4 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[66], 'show_expanded'):
                    group_input_001_1.outputs[66].show_expanded = False
                if hasattr(group_input_001_1.outputs[67], 'default_value'):
                    group_input_001_1.outputs[67].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[67], 'display_shape'):
                    group_input_001_1.outputs[67].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[67], 'enabled'):
                    group_input_001_1.outputs[67].enabled = True
                if hasattr(group_input_001_1.outputs[67], 'hide'):
                    group_input_001_1.outputs[67].hide = False
                if hasattr(group_input_001_1.outputs[67], 'hide_value'):
                    group_input_001_1.outputs[67].hide_value = False
                if hasattr(group_input_001_1.outputs[67], 'name'):
                    group_input_001_1.outputs[67].name = 'Zone 4 Top Color'
                if hasattr(group_input_001_1.outputs[67], 'show_expanded'):
                    group_input_001_1.outputs[67].show_expanded = False
                if hasattr(group_input_001_1.outputs[68], 'default_value'):
                    group_input_001_1.outputs[68].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[68], 'display_shape'):
                    group_input_001_1.outputs[68].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[68], 'enabled'):
                    group_input_001_1.outputs[68].enabled = True
                if hasattr(group_input_001_1.outputs[68], 'hide'):
                    group_input_001_1.outputs[68].hide = False
                if hasattr(group_input_001_1.outputs[68], 'hide_value'):
                    group_input_001_1.outputs[68].hide_value = False
                if hasattr(group_input_001_1.outputs[68], 'name'):
                    group_input_001_1.outputs[68].name = 'Zone 4 Mid Color'
                if hasattr(group_input_001_1.outputs[68], 'show_expanded'):
                    group_input_001_1.outputs[68].show_expanded = False
                if hasattr(group_input_001_1.outputs[69], 'default_value'):
                    group_input_001_1.outputs[69].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[69], 'display_shape'):
                    group_input_001_1.outputs[69].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[69], 'enabled'):
                    group_input_001_1.outputs[69].enabled = True
                if hasattr(group_input_001_1.outputs[69], 'hide'):
                    group_input_001_1.outputs[69].hide = False
                if hasattr(group_input_001_1.outputs[69], 'hide_value'):
                    group_input_001_1.outputs[69].hide_value = False
                if hasattr(group_input_001_1.outputs[69], 'name'):
                    group_input_001_1.outputs[69].name = 'Zone 4 Bot Color'
                if hasattr(group_input_001_1.outputs[69], 'show_expanded'):
                    group_input_001_1.outputs[69].show_expanded = False
                if hasattr(group_input_001_1.outputs[70], 'default_value'):
                    group_input_001_1.outputs[70].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[70], 'display_shape'):
                    group_input_001_1.outputs[70].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[70], 'enabled'):
                    group_input_001_1.outputs[70].enabled = True
                if hasattr(group_input_001_1.outputs[70], 'hide'):
                    group_input_001_1.outputs[70].hide = False
                if hasattr(group_input_001_1.outputs[70], 'hide_value'):
                    group_input_001_1.outputs[70].hide_value = False
                if hasattr(group_input_001_1.outputs[70], 'name'):
                    group_input_001_1.outputs[70].name = 'Zone 4 ScratchColor'
                if hasattr(group_input_001_1.outputs[70], 'show_expanded'):
                    group_input_001_1.outputs[70].show_expanded = False
                if hasattr(group_input_001_1.outputs[71], 'default_value'):
                    group_input_001_1.outputs[71].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[71], 'display_shape'):
                    group_input_001_1.outputs[71].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[71], 'enabled'):
                    group_input_001_1.outputs[71].enabled = True
                if hasattr(group_input_001_1.outputs[71], 'hide'):
                    group_input_001_1.outputs[71].hide = False
                if hasattr(group_input_001_1.outputs[71], 'hide_value'):
                    group_input_001_1.outputs[71].hide_value = False
                if hasattr(group_input_001_1.outputs[71], 'name'):
                    group_input_001_1.outputs[71].name = 'Zone 4 SSS Color'
                if hasattr(group_input_001_1.outputs[71], 'show_expanded'):
                    group_input_001_1.outputs[71].show_expanded = False
                if hasattr(group_input_001_1.outputs[72], 'default_value'):
                    group_input_001_1.outputs[72].default_value = 0.0
                if hasattr(group_input_001_1.outputs[72], 'display_shape'):
                    group_input_001_1.outputs[72].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[72], 'enabled'):
                    group_input_001_1.outputs[72].enabled = True
                if hasattr(group_input_001_1.outputs[72], 'hide'):
                    group_input_001_1.outputs[72].hide = False
                if hasattr(group_input_001_1.outputs[72], 'hide_value'):
                    group_input_001_1.outputs[72].hide_value = False
                if hasattr(group_input_001_1.outputs[72], 'name'):
                    group_input_001_1.outputs[72].name = 'Zone 5 Toggle'
                if hasattr(group_input_001_1.outputs[72], 'show_expanded'):
                    group_input_001_1.outputs[72].show_expanded = False
                if hasattr(group_input_001_1.outputs[73], 'default_value'):
                    group_input_001_1.outputs[73].default_value = 0.0
                if hasattr(group_input_001_1.outputs[73], 'display_shape'):
                    group_input_001_1.outputs[73].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[73], 'enabled'):
                    group_input_001_1.outputs[73].enabled = True
                if hasattr(group_input_001_1.outputs[73], 'hide'):
                    group_input_001_1.outputs[73].hide = False
                if hasattr(group_input_001_1.outputs[73], 'hide_value'):
                    group_input_001_1.outputs[73].hide_value = False
                if hasattr(group_input_001_1.outputs[73], 'name'):
                    group_input_001_1.outputs[73].name = 'Zone 5 Gradient Out'
                if hasattr(group_input_001_1.outputs[73], 'show_expanded'):
                    group_input_001_1.outputs[73].show_expanded = False
                if hasattr(group_input_001_1.outputs[74], 'default_value'):
                    group_input_001_1.outputs[74].default_value = 0.0
                if hasattr(group_input_001_1.outputs[74], 'display_shape'):
                    group_input_001_1.outputs[74].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[74], 'enabled'):
                    group_input_001_1.outputs[74].enabled = True
                if hasattr(group_input_001_1.outputs[74], 'hide'):
                    group_input_001_1.outputs[74].hide = False
                if hasattr(group_input_001_1.outputs[74], 'hide_value'):
                    group_input_001_1.outputs[74].hide_value = False
                if hasattr(group_input_001_1.outputs[74], 'name'):
                    group_input_001_1.outputs[74].name = 'Zone 5 Rough Out'
                if hasattr(group_input_001_1.outputs[74], 'show_expanded'):
                    group_input_001_1.outputs[74].show_expanded = False
                if hasattr(group_input_001_1.outputs[75], 'default_value'):
                    group_input_001_1.outputs[75].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[75], 'display_shape'):
                    group_input_001_1.outputs[75].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[75], 'enabled'):
                    group_input_001_1.outputs[75].enabled = True
                if hasattr(group_input_001_1.outputs[75], 'hide'):
                    group_input_001_1.outputs[75].hide = False
                if hasattr(group_input_001_1.outputs[75], 'hide_value'):
                    group_input_001_1.outputs[75].hide_value = False
                if hasattr(group_input_001_1.outputs[75], 'name'):
                    group_input_001_1.outputs[75].name = 'Zone 5 Norm Out'
                if hasattr(group_input_001_1.outputs[75], 'show_expanded'):
                    group_input_001_1.outputs[75].show_expanded = False
                if hasattr(group_input_001_1.outputs[76], 'default_value'):
                    group_input_001_1.outputs[76].default_value = 0.0
                if hasattr(group_input_001_1.outputs[76], 'display_shape'):
                    group_input_001_1.outputs[76].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[76], 'enabled'):
                    group_input_001_1.outputs[76].enabled = True
                if hasattr(group_input_001_1.outputs[76], 'hide'):
                    group_input_001_1.outputs[76].hide = False
                if hasattr(group_input_001_1.outputs[76], 'hide_value'):
                    group_input_001_1.outputs[76].hide_value = False
                if hasattr(group_input_001_1.outputs[76], 'name'):
                    group_input_001_1.outputs[76].name = 'Zone 5 Scratch Amount'
                if hasattr(group_input_001_1.outputs[76], 'show_expanded'):
                    group_input_001_1.outputs[76].show_expanded = False
                if hasattr(group_input_001_1.outputs[77], 'default_value'):
                    group_input_001_1.outputs[77].default_value = 0.0
                if hasattr(group_input_001_1.outputs[77], 'display_shape'):
                    group_input_001_1.outputs[77].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[77], 'enabled'):
                    group_input_001_1.outputs[77].enabled = True
                if hasattr(group_input_001_1.outputs[77], 'hide'):
                    group_input_001_1.outputs[77].hide = False
                if hasattr(group_input_001_1.outputs[77], 'hide_value'):
                    group_input_001_1.outputs[77].hide_value = False
                if hasattr(group_input_001_1.outputs[77], 'name'):
                    group_input_001_1.outputs[77].name = 'Zone 5 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[77], 'show_expanded'):
                    group_input_001_1.outputs[77].show_expanded = False
                if hasattr(group_input_001_1.outputs[78], 'default_value'):
                    group_input_001_1.outputs[78].default_value = 0.0
                if hasattr(group_input_001_1.outputs[78], 'display_shape'):
                    group_input_001_1.outputs[78].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[78], 'enabled'):
                    group_input_001_1.outputs[78].enabled = True
                if hasattr(group_input_001_1.outputs[78], 'hide'):
                    group_input_001_1.outputs[78].hide = False
                if hasattr(group_input_001_1.outputs[78], 'hide_value'):
                    group_input_001_1.outputs[78].hide_value = False
                if hasattr(group_input_001_1.outputs[78], 'name'):
                    group_input_001_1.outputs[78].name = 'Zone 5 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[78], 'show_expanded'):
                    group_input_001_1.outputs[78].show_expanded = False
                if hasattr(group_input_001_1.outputs[79], 'default_value'):
                    group_input_001_1.outputs[79].default_value = 0.0
                if hasattr(group_input_001_1.outputs[79], 'display_shape'):
                    group_input_001_1.outputs[79].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[79], 'enabled'):
                    group_input_001_1.outputs[79].enabled = True
                if hasattr(group_input_001_1.outputs[79], 'hide'):
                    group_input_001_1.outputs[79].hide = False
                if hasattr(group_input_001_1.outputs[79], 'hide_value'):
                    group_input_001_1.outputs[79].hide_value = False
                if hasattr(group_input_001_1.outputs[79], 'name'):
                    group_input_001_1.outputs[79].name = 'Zone 5 Metallic'
                if hasattr(group_input_001_1.outputs[79], 'show_expanded'):
                    group_input_001_1.outputs[79].show_expanded = False
                if hasattr(group_input_001_1.outputs[80], 'default_value'):
                    group_input_001_1.outputs[80].default_value = 0.0
                if hasattr(group_input_001_1.outputs[80], 'display_shape'):
                    group_input_001_1.outputs[80].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[80], 'enabled'):
                    group_input_001_1.outputs[80].enabled = True
                if hasattr(group_input_001_1.outputs[80], 'hide'):
                    group_input_001_1.outputs[80].hide = False
                if hasattr(group_input_001_1.outputs[80], 'hide_value'):
                    group_input_001_1.outputs[80].hide_value = False
                if hasattr(group_input_001_1.outputs[80], 'name'):
                    group_input_001_1.outputs[80].name = 'Zone 5 SSS Amount'
                if hasattr(group_input_001_1.outputs[80], 'show_expanded'):
                    group_input_001_1.outputs[80].show_expanded = False
                if hasattr(group_input_001_1.outputs[81], 'default_value'):
                    group_input_001_1.outputs[81].default_value = 0.0
                if hasattr(group_input_001_1.outputs[81], 'display_shape'):
                    group_input_001_1.outputs[81].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[81], 'enabled'):
                    group_input_001_1.outputs[81].enabled = True
                if hasattr(group_input_001_1.outputs[81], 'hide'):
                    group_input_001_1.outputs[81].hide = False
                if hasattr(group_input_001_1.outputs[81], 'hide_value'):
                    group_input_001_1.outputs[81].hide_value = False
                if hasattr(group_input_001_1.outputs[81], 'name'):
                    group_input_001_1.outputs[81].name = 'Zone 5 Transparency Amount'
                if hasattr(group_input_001_1.outputs[81], 'show_expanded'):
                    group_input_001_1.outputs[81].show_expanded = False
                if hasattr(group_input_001_1.outputs[82], 'default_value'):
                    group_input_001_1.outputs[82].default_value = 0.0
                if hasattr(group_input_001_1.outputs[82], 'display_shape'):
                    group_input_001_1.outputs[82].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[82], 'enabled'):
                    group_input_001_1.outputs[82].enabled = True
                if hasattr(group_input_001_1.outputs[82], 'hide'):
                    group_input_001_1.outputs[82].hide = False
                if hasattr(group_input_001_1.outputs[82], 'hide_value'):
                    group_input_001_1.outputs[82].hide_value = False
                if hasattr(group_input_001_1.outputs[82], 'name'):
                    group_input_001_1.outputs[82].name = 'Zone 5 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[82], 'show_expanded'):
                    group_input_001_1.outputs[82].show_expanded = False
                if hasattr(group_input_001_1.outputs[83], 'default_value'):
                    group_input_001_1.outputs[83].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[83], 'display_shape'):
                    group_input_001_1.outputs[83].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[83], 'enabled'):
                    group_input_001_1.outputs[83].enabled = True
                if hasattr(group_input_001_1.outputs[83], 'hide'):
                    group_input_001_1.outputs[83].hide = False
                if hasattr(group_input_001_1.outputs[83], 'hide_value'):
                    group_input_001_1.outputs[83].hide_value = False
                if hasattr(group_input_001_1.outputs[83], 'name'):
                    group_input_001_1.outputs[83].name = 'Zone 5 Top Color'
                if hasattr(group_input_001_1.outputs[83], 'show_expanded'):
                    group_input_001_1.outputs[83].show_expanded = False
                if hasattr(group_input_001_1.outputs[84], 'default_value'):
                    group_input_001_1.outputs[84].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[84], 'display_shape'):
                    group_input_001_1.outputs[84].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[84], 'enabled'):
                    group_input_001_1.outputs[84].enabled = True
                if hasattr(group_input_001_1.outputs[84], 'hide'):
                    group_input_001_1.outputs[84].hide = False
                if hasattr(group_input_001_1.outputs[84], 'hide_value'):
                    group_input_001_1.outputs[84].hide_value = False
                if hasattr(group_input_001_1.outputs[84], 'name'):
                    group_input_001_1.outputs[84].name = 'Zone 5 Mid Color'
                if hasattr(group_input_001_1.outputs[84], 'show_expanded'):
                    group_input_001_1.outputs[84].show_expanded = False
                if hasattr(group_input_001_1.outputs[85], 'default_value'):
                    group_input_001_1.outputs[85].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[85], 'display_shape'):
                    group_input_001_1.outputs[85].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[85], 'enabled'):
                    group_input_001_1.outputs[85].enabled = True
                if hasattr(group_input_001_1.outputs[85], 'hide'):
                    group_input_001_1.outputs[85].hide = False
                if hasattr(group_input_001_1.outputs[85], 'hide_value'):
                    group_input_001_1.outputs[85].hide_value = False
                if hasattr(group_input_001_1.outputs[85], 'name'):
                    group_input_001_1.outputs[85].name = 'Zone 5 Bot Color'
                if hasattr(group_input_001_1.outputs[85], 'show_expanded'):
                    group_input_001_1.outputs[85].show_expanded = False
                if hasattr(group_input_001_1.outputs[86], 'default_value'):
                    group_input_001_1.outputs[86].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[86], 'display_shape'):
                    group_input_001_1.outputs[86].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[86], 'enabled'):
                    group_input_001_1.outputs[86].enabled = True
                if hasattr(group_input_001_1.outputs[86], 'hide'):
                    group_input_001_1.outputs[86].hide = False
                if hasattr(group_input_001_1.outputs[86], 'hide_value'):
                    group_input_001_1.outputs[86].hide_value = False
                if hasattr(group_input_001_1.outputs[86], 'name'):
                    group_input_001_1.outputs[86].name = 'Zone 5 ScratchColor'
                if hasattr(group_input_001_1.outputs[86], 'show_expanded'):
                    group_input_001_1.outputs[86].show_expanded = False
                if hasattr(group_input_001_1.outputs[87], 'default_value'):
                    group_input_001_1.outputs[87].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[87], 'display_shape'):
                    group_input_001_1.outputs[87].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[87], 'enabled'):
                    group_input_001_1.outputs[87].enabled = True
                if hasattr(group_input_001_1.outputs[87], 'hide'):
                    group_input_001_1.outputs[87].hide = False
                if hasattr(group_input_001_1.outputs[87], 'hide_value'):
                    group_input_001_1.outputs[87].hide_value = False
                if hasattr(group_input_001_1.outputs[87], 'name'):
                    group_input_001_1.outputs[87].name = 'Zone 5 SSS Color'
                if hasattr(group_input_001_1.outputs[87], 'show_expanded'):
                    group_input_001_1.outputs[87].show_expanded = False
                if hasattr(group_input_001_1.outputs[88], 'default_value'):
                    group_input_001_1.outputs[88].default_value = 0.0
                if hasattr(group_input_001_1.outputs[88], 'display_shape'):
                    group_input_001_1.outputs[88].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[88], 'enabled'):
                    group_input_001_1.outputs[88].enabled = True
                if hasattr(group_input_001_1.outputs[88], 'hide'):
                    group_input_001_1.outputs[88].hide = False
                if hasattr(group_input_001_1.outputs[88], 'hide_value'):
                    group_input_001_1.outputs[88].hide_value = False
                if hasattr(group_input_001_1.outputs[88], 'name'):
                    group_input_001_1.outputs[88].name = 'Zone 6 Toggle'
                if hasattr(group_input_001_1.outputs[88], 'show_expanded'):
                    group_input_001_1.outputs[88].show_expanded = False
                if hasattr(group_input_001_1.outputs[89], 'default_value'):
                    group_input_001_1.outputs[89].default_value = 0.0
                if hasattr(group_input_001_1.outputs[89], 'display_shape'):
                    group_input_001_1.outputs[89].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[89], 'enabled'):
                    group_input_001_1.outputs[89].enabled = True
                if hasattr(group_input_001_1.outputs[89], 'hide'):
                    group_input_001_1.outputs[89].hide = False
                if hasattr(group_input_001_1.outputs[89], 'hide_value'):
                    group_input_001_1.outputs[89].hide_value = False
                if hasattr(group_input_001_1.outputs[89], 'name'):
                    group_input_001_1.outputs[89].name = 'Zone 6 Gradient Out'
                if hasattr(group_input_001_1.outputs[89], 'show_expanded'):
                    group_input_001_1.outputs[89].show_expanded = False
                if hasattr(group_input_001_1.outputs[90], 'default_value'):
                    group_input_001_1.outputs[90].default_value = 0.0
                if hasattr(group_input_001_1.outputs[90], 'display_shape'):
                    group_input_001_1.outputs[90].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[90], 'enabled'):
                    group_input_001_1.outputs[90].enabled = True
                if hasattr(group_input_001_1.outputs[90], 'hide'):
                    group_input_001_1.outputs[90].hide = False
                if hasattr(group_input_001_1.outputs[90], 'hide_value'):
                    group_input_001_1.outputs[90].hide_value = False
                if hasattr(group_input_001_1.outputs[90], 'name'):
                    group_input_001_1.outputs[90].name = 'Zone 6 Rough Out'
                if hasattr(group_input_001_1.outputs[90], 'show_expanded'):
                    group_input_001_1.outputs[90].show_expanded = False
                if hasattr(group_input_001_1.outputs[91], 'default_value'):
                    group_input_001_1.outputs[91].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[91], 'display_shape'):
                    group_input_001_1.outputs[91].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[91], 'enabled'):
                    group_input_001_1.outputs[91].enabled = True
                if hasattr(group_input_001_1.outputs[91], 'hide'):
                    group_input_001_1.outputs[91].hide = False
                if hasattr(group_input_001_1.outputs[91], 'hide_value'):
                    group_input_001_1.outputs[91].hide_value = False
                if hasattr(group_input_001_1.outputs[91], 'name'):
                    group_input_001_1.outputs[91].name = 'Zone 6 Norm Out'
                if hasattr(group_input_001_1.outputs[91], 'show_expanded'):
                    group_input_001_1.outputs[91].show_expanded = False
                if hasattr(group_input_001_1.outputs[92], 'default_value'):
                    group_input_001_1.outputs[92].default_value = 0.0
                if hasattr(group_input_001_1.outputs[92], 'display_shape'):
                    group_input_001_1.outputs[92].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[92], 'enabled'):
                    group_input_001_1.outputs[92].enabled = True
                if hasattr(group_input_001_1.outputs[92], 'hide'):
                    group_input_001_1.outputs[92].hide = False
                if hasattr(group_input_001_1.outputs[92], 'hide_value'):
                    group_input_001_1.outputs[92].hide_value = False
                if hasattr(group_input_001_1.outputs[92], 'name'):
                    group_input_001_1.outputs[92].name = 'Zone 6 Scratch Amount'
                if hasattr(group_input_001_1.outputs[92], 'show_expanded'):
                    group_input_001_1.outputs[92].show_expanded = False
                if hasattr(group_input_001_1.outputs[93], 'default_value'):
                    group_input_001_1.outputs[93].default_value = 0.0
                if hasattr(group_input_001_1.outputs[93], 'display_shape'):
                    group_input_001_1.outputs[93].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[93], 'enabled'):
                    group_input_001_1.outputs[93].enabled = True
                if hasattr(group_input_001_1.outputs[93], 'hide'):
                    group_input_001_1.outputs[93].hide = False
                if hasattr(group_input_001_1.outputs[93], 'hide_value'):
                    group_input_001_1.outputs[93].hide_value = False
                if hasattr(group_input_001_1.outputs[93], 'name'):
                    group_input_001_1.outputs[93].name = 'Zone 6 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[93], 'show_expanded'):
                    group_input_001_1.outputs[93].show_expanded = False
                if hasattr(group_input_001_1.outputs[94], 'default_value'):
                    group_input_001_1.outputs[94].default_value = 0.0
                if hasattr(group_input_001_1.outputs[94], 'display_shape'):
                    group_input_001_1.outputs[94].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[94], 'enabled'):
                    group_input_001_1.outputs[94].enabled = True
                if hasattr(group_input_001_1.outputs[94], 'hide'):
                    group_input_001_1.outputs[94].hide = False
                if hasattr(group_input_001_1.outputs[94], 'hide_value'):
                    group_input_001_1.outputs[94].hide_value = False
                if hasattr(group_input_001_1.outputs[94], 'name'):
                    group_input_001_1.outputs[94].name = 'Zone 6 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[94], 'show_expanded'):
                    group_input_001_1.outputs[94].show_expanded = False
                if hasattr(group_input_001_1.outputs[95], 'default_value'):
                    group_input_001_1.outputs[95].default_value = 0.0
                if hasattr(group_input_001_1.outputs[95], 'display_shape'):
                    group_input_001_1.outputs[95].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[95], 'enabled'):
                    group_input_001_1.outputs[95].enabled = True
                if hasattr(group_input_001_1.outputs[95], 'hide'):
                    group_input_001_1.outputs[95].hide = False
                if hasattr(group_input_001_1.outputs[95], 'hide_value'):
                    group_input_001_1.outputs[95].hide_value = False
                if hasattr(group_input_001_1.outputs[95], 'name'):
                    group_input_001_1.outputs[95].name = 'Zone 6 Metallic'
                if hasattr(group_input_001_1.outputs[95], 'show_expanded'):
                    group_input_001_1.outputs[95].show_expanded = False
                if hasattr(group_input_001_1.outputs[96], 'default_value'):
                    group_input_001_1.outputs[96].default_value = 0.0
                if hasattr(group_input_001_1.outputs[96], 'display_shape'):
                    group_input_001_1.outputs[96].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[96], 'enabled'):
                    group_input_001_1.outputs[96].enabled = True
                if hasattr(group_input_001_1.outputs[96], 'hide'):
                    group_input_001_1.outputs[96].hide = False
                if hasattr(group_input_001_1.outputs[96], 'hide_value'):
                    group_input_001_1.outputs[96].hide_value = False
                if hasattr(group_input_001_1.outputs[96], 'name'):
                    group_input_001_1.outputs[96].name = 'Zone 6 SSS Amount'
                if hasattr(group_input_001_1.outputs[96], 'show_expanded'):
                    group_input_001_1.outputs[96].show_expanded = False
                if hasattr(group_input_001_1.outputs[97], 'default_value'):
                    group_input_001_1.outputs[97].default_value = 0.0
                if hasattr(group_input_001_1.outputs[97], 'display_shape'):
                    group_input_001_1.outputs[97].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[97], 'enabled'):
                    group_input_001_1.outputs[97].enabled = True
                if hasattr(group_input_001_1.outputs[97], 'hide'):
                    group_input_001_1.outputs[97].hide = False
                if hasattr(group_input_001_1.outputs[97], 'hide_value'):
                    group_input_001_1.outputs[97].hide_value = False
                if hasattr(group_input_001_1.outputs[97], 'name'):
                    group_input_001_1.outputs[97].name = 'Zone 6 Transparency Amount'
                if hasattr(group_input_001_1.outputs[97], 'show_expanded'):
                    group_input_001_1.outputs[97].show_expanded = False
                if hasattr(group_input_001_1.outputs[98], 'default_value'):
                    group_input_001_1.outputs[98].default_value = 0.0
                if hasattr(group_input_001_1.outputs[98], 'display_shape'):
                    group_input_001_1.outputs[98].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[98], 'enabled'):
                    group_input_001_1.outputs[98].enabled = True
                if hasattr(group_input_001_1.outputs[98], 'hide'):
                    group_input_001_1.outputs[98].hide = False
                if hasattr(group_input_001_1.outputs[98], 'hide_value'):
                    group_input_001_1.outputs[98].hide_value = False
                if hasattr(group_input_001_1.outputs[98], 'name'):
                    group_input_001_1.outputs[98].name = 'Zone 6 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[98], 'show_expanded'):
                    group_input_001_1.outputs[98].show_expanded = False
                if hasattr(group_input_001_1.outputs[99], 'default_value'):
                    group_input_001_1.outputs[99].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[99], 'display_shape'):
                    group_input_001_1.outputs[99].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[99], 'enabled'):
                    group_input_001_1.outputs[99].enabled = True
                if hasattr(group_input_001_1.outputs[99], 'hide'):
                    group_input_001_1.outputs[99].hide = False
                if hasattr(group_input_001_1.outputs[99], 'hide_value'):
                    group_input_001_1.outputs[99].hide_value = False
                if hasattr(group_input_001_1.outputs[99], 'name'):
                    group_input_001_1.outputs[99].name = 'Zone 6 Top Color'
                if hasattr(group_input_001_1.outputs[99], 'show_expanded'):
                    group_input_001_1.outputs[99].show_expanded = False
                if hasattr(group_input_001_1.outputs[100], 'default_value'):
                    group_input_001_1.outputs[100].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[100], 'display_shape'):
                    group_input_001_1.outputs[100].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[100], 'enabled'):
                    group_input_001_1.outputs[100].enabled = True
                if hasattr(group_input_001_1.outputs[100], 'hide'):
                    group_input_001_1.outputs[100].hide = False
                if hasattr(group_input_001_1.outputs[100], 'hide_value'):
                    group_input_001_1.outputs[100].hide_value = False
                if hasattr(group_input_001_1.outputs[100], 'name'):
                    group_input_001_1.outputs[100].name = 'Zone 6 Mid Color'
                if hasattr(group_input_001_1.outputs[100], 'show_expanded'):
                    group_input_001_1.outputs[100].show_expanded = False
                if hasattr(group_input_001_1.outputs[101], 'default_value'):
                    group_input_001_1.outputs[101].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[101], 'display_shape'):
                    group_input_001_1.outputs[101].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[101], 'enabled'):
                    group_input_001_1.outputs[101].enabled = True
                if hasattr(group_input_001_1.outputs[101], 'hide'):
                    group_input_001_1.outputs[101].hide = False
                if hasattr(group_input_001_1.outputs[101], 'hide_value'):
                    group_input_001_1.outputs[101].hide_value = False
                if hasattr(group_input_001_1.outputs[101], 'name'):
                    group_input_001_1.outputs[101].name = 'Zone 6 Bot Color'
                if hasattr(group_input_001_1.outputs[101], 'show_expanded'):
                    group_input_001_1.outputs[101].show_expanded = False
                if hasattr(group_input_001_1.outputs[102], 'default_value'):
                    group_input_001_1.outputs[102].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[102], 'display_shape'):
                    group_input_001_1.outputs[102].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[102], 'enabled'):
                    group_input_001_1.outputs[102].enabled = True
                if hasattr(group_input_001_1.outputs[102], 'hide'):
                    group_input_001_1.outputs[102].hide = False
                if hasattr(group_input_001_1.outputs[102], 'hide_value'):
                    group_input_001_1.outputs[102].hide_value = False
                if hasattr(group_input_001_1.outputs[102], 'name'):
                    group_input_001_1.outputs[102].name = 'Zone 6 ScratchColor'
                if hasattr(group_input_001_1.outputs[102], 'show_expanded'):
                    group_input_001_1.outputs[102].show_expanded = False
                if hasattr(group_input_001_1.outputs[103], 'default_value'):
                    group_input_001_1.outputs[103].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[103], 'display_shape'):
                    group_input_001_1.outputs[103].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[103], 'enabled'):
                    group_input_001_1.outputs[103].enabled = True
                if hasattr(group_input_001_1.outputs[103], 'hide'):
                    group_input_001_1.outputs[103].hide = False
                if hasattr(group_input_001_1.outputs[103], 'hide_value'):
                    group_input_001_1.outputs[103].hide_value = False
                if hasattr(group_input_001_1.outputs[103], 'name'):
                    group_input_001_1.outputs[103].name = 'Zone 6 SSS Color'
                if hasattr(group_input_001_1.outputs[103], 'show_expanded'):
                    group_input_001_1.outputs[103].show_expanded = False
                if hasattr(group_input_001_1.outputs[104], 'default_value'):
                    group_input_001_1.outputs[104].default_value = int(self.use_damage)
                if hasattr(group_input_001_1.outputs[104], 'display_shape'):
                    group_input_001_1.outputs[104].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[104], 'enabled'):
                    group_input_001_1.outputs[104].enabled = True
                if hasattr(group_input_001_1.outputs[104], 'hide'):
                    group_input_001_1.outputs[104].hide = False
                if hasattr(group_input_001_1.outputs[104], 'hide_value'):
                    group_input_001_1.outputs[104].hide_value = False
                if hasattr(group_input_001_1.outputs[104], 'name'):
                    group_input_001_1.outputs[104].name = 'Zone 7 Toggle'
                if hasattr(group_input_001_1.outputs[104], 'show_expanded'):
                    group_input_001_1.outputs[104].show_expanded = False
                if hasattr(group_input_001_1.outputs[105], 'default_value'):
                    group_input_001_1.outputs[105].default_value = 0.0
                if hasattr(group_input_001_1.outputs[105], 'display_shape'):
                    group_input_001_1.outputs[105].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[105], 'enabled'):
                    group_input_001_1.outputs[105].enabled = True
                if hasattr(group_input_001_1.outputs[105], 'hide'):
                    group_input_001_1.outputs[105].hide = False
                if hasattr(group_input_001_1.outputs[105], 'hide_value'):
                    group_input_001_1.outputs[105].hide_value = False
                if hasattr(group_input_001_1.outputs[105], 'name'):
                    group_input_001_1.outputs[105].name = 'Zone 7 Gradient Out'
                if hasattr(group_input_001_1.outputs[105], 'show_expanded'):
                    group_input_001_1.outputs[105].show_expanded = False
                if hasattr(group_input_001_1.outputs[106], 'default_value'):
                    group_input_001_1.outputs[106].default_value = 0.0
                if hasattr(group_input_001_1.outputs[106], 'display_shape'):
                    group_input_001_1.outputs[106].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[106], 'enabled'):
                    group_input_001_1.outputs[106].enabled = True
                if hasattr(group_input_001_1.outputs[106], 'hide'):
                    group_input_001_1.outputs[106].hide = False
                if hasattr(group_input_001_1.outputs[106], 'hide_value'):
                    group_input_001_1.outputs[106].hide_value = False
                if hasattr(group_input_001_1.outputs[106], 'name'):
                    group_input_001_1.outputs[106].name = 'Zone 7 Rough Out'
                if hasattr(group_input_001_1.outputs[106], 'show_expanded'):
                    group_input_001_1.outputs[106].show_expanded = False
                if hasattr(group_input_001_1.outputs[107], 'default_value'):
                    group_input_001_1.outputs[107].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[107], 'display_shape'):
                    group_input_001_1.outputs[107].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[107], 'enabled'):
                    group_input_001_1.outputs[107].enabled = True
                if hasattr(group_input_001_1.outputs[107], 'hide'):
                    group_input_001_1.outputs[107].hide = False
                if hasattr(group_input_001_1.outputs[107], 'hide_value'):
                    group_input_001_1.outputs[107].hide_value = False
                if hasattr(group_input_001_1.outputs[107], 'name'):
                    group_input_001_1.outputs[107].name = 'Zone 7 Norm Out'
                if hasattr(group_input_001_1.outputs[107], 'show_expanded'):
                    group_input_001_1.outputs[107].show_expanded = False
                if hasattr(group_input_001_1.outputs[108], 'default_value'):
                    group_input_001_1.outputs[108].default_value = 0.0
                if hasattr(group_input_001_1.outputs[108], 'display_shape'):
                    group_input_001_1.outputs[108].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[108], 'enabled'):
                    group_input_001_1.outputs[108].enabled = True
                if hasattr(group_input_001_1.outputs[108], 'hide'):
                    group_input_001_1.outputs[108].hide = False
                if hasattr(group_input_001_1.outputs[108], 'hide_value'):
                    group_input_001_1.outputs[108].hide_value = False
                if hasattr(group_input_001_1.outputs[108], 'name'):
                    group_input_001_1.outputs[108].name = 'Zone 7 Scratch Amount'
                if hasattr(group_input_001_1.outputs[108], 'show_expanded'):
                    group_input_001_1.outputs[108].show_expanded = False
                if hasattr(group_input_001_1.outputs[109], 'default_value'):
                    group_input_001_1.outputs[109].default_value = 0.0
                if hasattr(group_input_001_1.outputs[109], 'display_shape'):
                    group_input_001_1.outputs[109].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[109], 'enabled'):
                    group_input_001_1.outputs[109].enabled = True
                if hasattr(group_input_001_1.outputs[109], 'hide'):
                    group_input_001_1.outputs[109].hide = False
                if hasattr(group_input_001_1.outputs[109], 'hide_value'):
                    group_input_001_1.outputs[109].hide_value = False
                if hasattr(group_input_001_1.outputs[109], 'name'):
                    group_input_001_1.outputs[109].name = 'Zone 7 Scratch Roughness'
                if hasattr(group_input_001_1.outputs[109], 'show_expanded'):
                    group_input_001_1.outputs[109].show_expanded = False
                if hasattr(group_input_001_1.outputs[110], 'default_value'):
                    group_input_001_1.outputs[110].default_value = 0.0
                if hasattr(group_input_001_1.outputs[110], 'display_shape'):
                    group_input_001_1.outputs[110].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[110], 'enabled'):
                    group_input_001_1.outputs[110].enabled = True
                if hasattr(group_input_001_1.outputs[110], 'hide'):
                    group_input_001_1.outputs[110].hide = False
                if hasattr(group_input_001_1.outputs[110], 'hide_value'):
                    group_input_001_1.outputs[110].hide_value = False
                if hasattr(group_input_001_1.outputs[110], 'name'):
                    group_input_001_1.outputs[110].name = 'Zone 7 Scratch Metallic'
                if hasattr(group_input_001_1.outputs[110], 'show_expanded'):
                    group_input_001_1.outputs[110].show_expanded = False
                if hasattr(group_input_001_1.outputs[111], 'default_value'):
                    group_input_001_1.outputs[111].default_value = 0.0
                if hasattr(group_input_001_1.outputs[111], 'display_shape'):
                    group_input_001_1.outputs[111].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[111], 'enabled'):
                    group_input_001_1.outputs[111].enabled = True
                if hasattr(group_input_001_1.outputs[111], 'hide'):
                    group_input_001_1.outputs[111].hide = False
                if hasattr(group_input_001_1.outputs[111], 'hide_value'):
                    group_input_001_1.outputs[111].hide_value = False
                if hasattr(group_input_001_1.outputs[111], 'name'):
                    group_input_001_1.outputs[111].name = 'Zone 7 Metallic'
                if hasattr(group_input_001_1.outputs[111], 'show_expanded'):
                    group_input_001_1.outputs[111].show_expanded = False
                if hasattr(group_input_001_1.outputs[112], 'default_value'):
                    group_input_001_1.outputs[112].default_value = 0.0
                if hasattr(group_input_001_1.outputs[112], 'display_shape'):
                    group_input_001_1.outputs[112].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[112], 'enabled'):
                    group_input_001_1.outputs[112].enabled = True
                if hasattr(group_input_001_1.outputs[112], 'hide'):
                    group_input_001_1.outputs[112].hide = False
                if hasattr(group_input_001_1.outputs[112], 'hide_value'):
                    group_input_001_1.outputs[112].hide_value = False
                if hasattr(group_input_001_1.outputs[112], 'name'):
                    group_input_001_1.outputs[112].name = 'Zone 7 SSS Amount'
                if hasattr(group_input_001_1.outputs[112], 'show_expanded'):
                    group_input_001_1.outputs[112].show_expanded = False
                if hasattr(group_input_001_1.outputs[113], 'default_value'):
                    group_input_001_1.outputs[113].default_value = 0.0
                if hasattr(group_input_001_1.outputs[113], 'display_shape'):
                    group_input_001_1.outputs[113].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[113], 'enabled'):
                    group_input_001_1.outputs[113].enabled = True
                if hasattr(group_input_001_1.outputs[113], 'hide'):
                    group_input_001_1.outputs[113].hide = False
                if hasattr(group_input_001_1.outputs[113], 'hide_value'):
                    group_input_001_1.outputs[113].hide_value = False
                if hasattr(group_input_001_1.outputs[113], 'name'):
                    group_input_001_1.outputs[113].name = 'Zone 7 Transparency Amount'
                if hasattr(group_input_001_1.outputs[113], 'show_expanded'):
                    group_input_001_1.outputs[113].show_expanded = False
                if hasattr(group_input_001_1.outputs[114], 'default_value'):
                    group_input_001_1.outputs[114].default_value = 0.0
                if hasattr(group_input_001_1.outputs[114], 'display_shape'):
                    group_input_001_1.outputs[114].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[114], 'enabled'):
                    group_input_001_1.outputs[114].enabled = True
                if hasattr(group_input_001_1.outputs[114], 'hide'):
                    group_input_001_1.outputs[114].hide = False
                if hasattr(group_input_001_1.outputs[114], 'hide_value'):
                    group_input_001_1.outputs[114].hide_value = False
                if hasattr(group_input_001_1.outputs[114], 'name'):
                    group_input_001_1.outputs[114].name = 'Zone 7 Emmisive Amount'
                if hasattr(group_input_001_1.outputs[114], 'show_expanded'):
                    group_input_001_1.outputs[114].show_expanded = False
                if hasattr(group_input_001_1.outputs[115], 'default_value'):
                    group_input_001_1.outputs[115].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[115], 'display_shape'):
                    group_input_001_1.outputs[115].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[115], 'enabled'):
                    group_input_001_1.outputs[115].enabled = True
                if hasattr(group_input_001_1.outputs[115], 'hide'):
                    group_input_001_1.outputs[115].hide = False
                if hasattr(group_input_001_1.outputs[115], 'hide_value'):
                    group_input_001_1.outputs[115].hide_value = False
                if hasattr(group_input_001_1.outputs[115], 'name'):
                    group_input_001_1.outputs[115].name = 'Zone 7 Top Color'
                if hasattr(group_input_001_1.outputs[115], 'show_expanded'):
                    group_input_001_1.outputs[115].show_expanded = False
                if hasattr(group_input_001_1.outputs[116], 'default_value'):
                    group_input_001_1.outputs[116].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[116], 'display_shape'):
                    group_input_001_1.outputs[116].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[116], 'enabled'):
                    group_input_001_1.outputs[116].enabled = True
                if hasattr(group_input_001_1.outputs[116], 'hide'):
                    group_input_001_1.outputs[116].hide = False
                if hasattr(group_input_001_1.outputs[116], 'hide_value'):
                    group_input_001_1.outputs[116].hide_value = False
                if hasattr(group_input_001_1.outputs[116], 'name'):
                    group_input_001_1.outputs[116].name = 'Zone 7 Mid Color'
                if hasattr(group_input_001_1.outputs[116], 'show_expanded'):
                    group_input_001_1.outputs[116].show_expanded = False
                if hasattr(group_input_001_1.outputs[117], 'default_value'):
                    group_input_001_1.outputs[117].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[117], 'display_shape'):
                    group_input_001_1.outputs[117].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[117], 'enabled'):
                    group_input_001_1.outputs[117].enabled = True
                if hasattr(group_input_001_1.outputs[117], 'hide'):
                    group_input_001_1.outputs[117].hide = False
                if hasattr(group_input_001_1.outputs[117], 'hide_value'):
                    group_input_001_1.outputs[117].hide_value = False
                if hasattr(group_input_001_1.outputs[117], 'name'):
                    group_input_001_1.outputs[117].name = 'Zone 7 Bot Color'
                if hasattr(group_input_001_1.outputs[117], 'show_expanded'):
                    group_input_001_1.outputs[117].show_expanded = False
                if hasattr(group_input_001_1.outputs[118], 'default_value'):
                    group_input_001_1.outputs[118].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[118], 'display_shape'):
                    group_input_001_1.outputs[118].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[118], 'enabled'):
                    group_input_001_1.outputs[118].enabled = True
                if hasattr(group_input_001_1.outputs[118], 'hide'):
                    group_input_001_1.outputs[118].hide = False
                if hasattr(group_input_001_1.outputs[118], 'hide_value'):
                    group_input_001_1.outputs[118].hide_value = False
                if hasattr(group_input_001_1.outputs[118], 'name'):
                    group_input_001_1.outputs[118].name = 'Zone 7 ScratchColor'
                if hasattr(group_input_001_1.outputs[118], 'show_expanded'):
                    group_input_001_1.outputs[118].show_expanded = False
                if hasattr(group_input_001_1.outputs[119], 'default_value'):
                    group_input_001_1.outputs[119].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[119], 'display_shape'):
                    group_input_001_1.outputs[119].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[119], 'enabled'):
                    group_input_001_1.outputs[119].enabled = True
                if hasattr(group_input_001_1.outputs[119], 'hide'):
                    group_input_001_1.outputs[119].hide = False
                if hasattr(group_input_001_1.outputs[119], 'hide_value'):
                    group_input_001_1.outputs[119].hide_value = False
                if hasattr(group_input_001_1.outputs[119], 'name'):
                    group_input_001_1.outputs[119].name = 'Zone 7 SSS Color'
                if hasattr(group_input_001_1.outputs[119], 'show_expanded'):
                    group_input_001_1.outputs[119].show_expanded = False
                if hasattr(group_input_001_1.outputs[120], 'default_value'):
                    group_input_001_1.outputs[120].default_value = 0.0
                if hasattr(group_input_001_1.outputs[120], 'display_shape'):
                    group_input_001_1.outputs[120].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[120], 'enabled'):
                    group_input_001_1.outputs[120].enabled = True
                if hasattr(group_input_001_1.outputs[120], 'hide'):
                    group_input_001_1.outputs[120].hide = False
                if hasattr(group_input_001_1.outputs[120], 'hide_value'):
                    group_input_001_1.outputs[120].hide_value = False
                if hasattr(group_input_001_1.outputs[120], 'name'):
                    group_input_001_1.outputs[120].name = 'Grime Gradient Out'
                if hasattr(group_input_001_1.outputs[120], 'show_expanded'):
                    group_input_001_1.outputs[120].show_expanded = False
                if hasattr(group_input_001_1.outputs[121], 'default_value'):
                    group_input_001_1.outputs[121].default_value = 0.0
                if hasattr(group_input_001_1.outputs[121], 'display_shape'):
                    group_input_001_1.outputs[121].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[121], 'enabled'):
                    group_input_001_1.outputs[121].enabled = True
                if hasattr(group_input_001_1.outputs[121], 'hide'):
                    group_input_001_1.outputs[121].hide = False
                if hasattr(group_input_001_1.outputs[121], 'hide_value'):
                    group_input_001_1.outputs[121].hide_value = False
                if hasattr(group_input_001_1.outputs[121], 'name'):
                    group_input_001_1.outputs[121].name = 'Grime Rough Out'
                if hasattr(group_input_001_1.outputs[121], 'show_expanded'):
                    group_input_001_1.outputs[121].show_expanded = False
                if hasattr(group_input_001_1.outputs[122], 'default_value'):
                    group_input_001_1.outputs[122].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[122], 'display_shape'):
                    group_input_001_1.outputs[122].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[122], 'enabled'):
                    group_input_001_1.outputs[122].enabled = True
                if hasattr(group_input_001_1.outputs[122], 'hide'):
                    group_input_001_1.outputs[122].hide = False
                if hasattr(group_input_001_1.outputs[122], 'hide_value'):
                    group_input_001_1.outputs[122].hide_value = False
                if hasattr(group_input_001_1.outputs[122], 'name'):
                    group_input_001_1.outputs[122].name = 'Grime Norm Out'
                if hasattr(group_input_001_1.outputs[122], 'show_expanded'):
                    group_input_001_1.outputs[122].show_expanded = False
                if hasattr(group_input_001_1.outputs[123], 'default_value'):
                    group_input_001_1.outputs[123].default_value = 0.0
                if hasattr(group_input_001_1.outputs[123], 'display_shape'):
                    group_input_001_1.outputs[123].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[123], 'enabled'):
                    group_input_001_1.outputs[123].enabled = True
                if hasattr(group_input_001_1.outputs[123], 'hide'):
                    group_input_001_1.outputs[123].hide = False
                if hasattr(group_input_001_1.outputs[123], 'hide_value'):
                    group_input_001_1.outputs[123].hide_value = False
                if hasattr(group_input_001_1.outputs[123], 'name'):
                    group_input_001_1.outputs[123].name = 'Grime Metallic'
                if hasattr(group_input_001_1.outputs[123], 'show_expanded'):
                    group_input_001_1.outputs[123].show_expanded = False
                if hasattr(group_input_001_1.outputs[124], 'default_value'):
                    group_input_001_1.outputs[124].default_value = 0.0
                if hasattr(group_input_001_1.outputs[124], 'display_shape'):
                    group_input_001_1.outputs[124].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[124], 'enabled'):
                    group_input_001_1.outputs[124].enabled = True
                if hasattr(group_input_001_1.outputs[124], 'hide'):
                    group_input_001_1.outputs[124].hide = False
                if hasattr(group_input_001_1.outputs[124], 'hide_value'):
                    group_input_001_1.outputs[124].hide_value = False
                if hasattr(group_input_001_1.outputs[124], 'name'):
                    group_input_001_1.outputs[124].name = 'Grime SSS Amount'
                if hasattr(group_input_001_1.outputs[124], 'show_expanded'):
                    group_input_001_1.outputs[124].show_expanded = False
                if hasattr(group_input_001_1.outputs[125], 'default_value'):
                    group_input_001_1.outputs[125].default_value = 0.0
                if hasattr(group_input_001_1.outputs[125], 'display_shape'):
                    group_input_001_1.outputs[125].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[125], 'enabled'):
                    group_input_001_1.outputs[125].enabled = True
                if hasattr(group_input_001_1.outputs[125], 'hide'):
                    group_input_001_1.outputs[125].hide = False
                if hasattr(group_input_001_1.outputs[125], 'hide_value'):
                    group_input_001_1.outputs[125].hide_value = False
                if hasattr(group_input_001_1.outputs[125], 'name'):
                    group_input_001_1.outputs[125].name = 'Grime Transparency Amount'
                if hasattr(group_input_001_1.outputs[125], 'show_expanded'):
                    group_input_001_1.outputs[125].show_expanded = False
                if hasattr(group_input_001_1.outputs[126], 'default_value'):
                    group_input_001_1.outputs[126].default_value = 0.0
                if hasattr(group_input_001_1.outputs[126], 'display_shape'):
                    group_input_001_1.outputs[126].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[126], 'enabled'):
                    group_input_001_1.outputs[126].enabled = True
                if hasattr(group_input_001_1.outputs[126], 'hide'):
                    group_input_001_1.outputs[126].hide = False
                if hasattr(group_input_001_1.outputs[126], 'hide_value'):
                    group_input_001_1.outputs[126].hide_value = False
                if hasattr(group_input_001_1.outputs[126], 'name'):
                    group_input_001_1.outputs[126].name = 'Grime Emmisive Amount'
                if hasattr(group_input_001_1.outputs[126], 'show_expanded'):
                    group_input_001_1.outputs[126].show_expanded = False
                if hasattr(group_input_001_1.outputs[127], 'default_value'):
                    group_input_001_1.outputs[127].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[127], 'display_shape'):
                    group_input_001_1.outputs[127].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[127], 'enabled'):
                    group_input_001_1.outputs[127].enabled = True
                if hasattr(group_input_001_1.outputs[127], 'hide'):
                    group_input_001_1.outputs[127].hide = False
                if hasattr(group_input_001_1.outputs[127], 'hide_value'):
                    group_input_001_1.outputs[127].hide_value = False
                if hasattr(group_input_001_1.outputs[127], 'name'):
                    group_input_001_1.outputs[127].name = 'Grime Top Color'
                if hasattr(group_input_001_1.outputs[127], 'show_expanded'):
                    group_input_001_1.outputs[127].show_expanded = False
                if hasattr(group_input_001_1.outputs[128], 'default_value'):
                    group_input_001_1.outputs[128].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[128], 'display_shape'):
                    group_input_001_1.outputs[128].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[128], 'enabled'):
                    group_input_001_1.outputs[128].enabled = True
                if hasattr(group_input_001_1.outputs[128], 'hide'):
                    group_input_001_1.outputs[128].hide = False
                if hasattr(group_input_001_1.outputs[128], 'hide_value'):
                    group_input_001_1.outputs[128].hide_value = False
                if hasattr(group_input_001_1.outputs[128], 'name'):
                    group_input_001_1.outputs[128].name = 'Grime Mid Color'
                if hasattr(group_input_001_1.outputs[128], 'show_expanded'):
                    group_input_001_1.outputs[128].show_expanded = False
                if hasattr(group_input_001_1.outputs[129], 'default_value'):
                    group_input_001_1.outputs[129].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[129], 'display_shape'):
                    group_input_001_1.outputs[129].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[129], 'enabled'):
                    group_input_001_1.outputs[129].enabled = True
                if hasattr(group_input_001_1.outputs[129], 'hide'):
                    group_input_001_1.outputs[129].hide = False
                if hasattr(group_input_001_1.outputs[129], 'hide_value'):
                    group_input_001_1.outputs[129].hide_value = False
                if hasattr(group_input_001_1.outputs[129], 'name'):
                    group_input_001_1.outputs[129].name = 'Grime Bot Color'
                if hasattr(group_input_001_1.outputs[129], 'show_expanded'):
                    group_input_001_1.outputs[129].show_expanded = False
                if hasattr(group_input_001_1.outputs[130], 'default_value'):
                    group_input_001_1.outputs[130].default_value = (0.0, 0.0, 0.0, 1.0)
                if hasattr(group_input_001_1.outputs[130], 'display_shape'):
                    group_input_001_1.outputs[130].display_shape = 'CIRCLE'
                if hasattr(group_input_001_1.outputs[130], 'enabled'):
                    group_input_001_1.outputs[130].enabled = True
                if hasattr(group_input_001_1.outputs[130], 'hide'):
                    group_input_001_1.outputs[130].hide = False
                if hasattr(group_input_001_1.outputs[130], 'hide_value'):
                    group_input_001_1.outputs[130].hide_value = False
                if hasattr(group_input_001_1.outputs[130], 'name'):
                    group_input_001_1.outputs[130].name = 'Grime SSS Color'
                if hasattr(group_input_001_1.outputs[130], 'show_expanded'):
                    group_input_001_1.outputs[130].show_expanded = False

                combine_color_1 = node_tree4.nodes.new('ShaderNodeCombineColor')
                if hasattr(combine_color_1, 'mode'):
                    combine_color_1.mode = 'RGB'
                if hasattr(combine_color_1, 'color'):
                    combine_color_1.color = (0.6079999804496765, 0.6079999804496765, 0.6079999804496765)
                if hasattr(combine_color_1, 'hide'):
                    combine_color_1.hide = False
                if hasattr(combine_color_1, 'location'):
                    combine_color_1.location = (4490.357421875, -5.611602783203125)
                if hasattr(combine_color_1, 'mute'):
                    combine_color_1.mute = False
                if hasattr(combine_color_1, 'name'):
                    combine_color_1.name = 'Combine Color'
                if hasattr(combine_color_1, 'use_custom_color'):
                    combine_color_1.use_custom_color = False
                if hasattr(combine_color_1, 'width'):
                    combine_color_1.width = 140.0
                input_ = next((input_ for input_ in combine_color_1.inputs if input_.identifier=='Red'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Red'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in combine_color_1.inputs if input_.identifier=='Green'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = False
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Green'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                input_ = next((input_ for input_ in combine_color_1.inputs if input_.identifier=='Blue'), None)
                if input_:
                    if hasattr(input_, 'default_value'):
                        input_.default_value = 0.0
                    if hasattr(input_, 'display_shape'):
                        input_.display_shape = 'CIRCLE'
                    if hasattr(input_, 'enabled'):
                        input_.enabled = True
                    if hasattr(input_, 'hide'):
                        input_.hide = True
                    if hasattr(input_, 'hide_value'):
                        input_.hide_value = False
                    if hasattr(input_, 'name'):
                        input_.name = 'Blue'
                    if hasattr(input_, 'show_expanded'):
                        input_.show_expanded = False
                output = next((output for output in combine_color_1.outputs if output.identifier=='Color'), None)
                if output:
                    if hasattr(output, 'default_value'):
                        output.default_value = (0.0, 0.0, 0.0, 0.0)
                    if hasattr(output, 'display_shape'):
                        output.display_shape = 'CIRCLE'
                    if hasattr(output, 'enabled'):
                        output.enabled = True
                    if hasattr(output, 'hide'):
                        output.hide = False
                    if hasattr(output, 'hide_value'):
                        output.hide_value = False
                    if hasattr(output, 'name'):
                        output.name = 'Color'
                    if hasattr(output, 'show_expanded'):
                        output.show_expanded = False

                # LINKS
                node_tree4.links.new(group_002_1.outputs[0], group_1.inputs[3])
                node_tree4.links.new(group_004_1.outputs[0], group_1.inputs[4])
                node_tree4.links.new(group_008_1.outputs[0], group_1.inputs[5])
                node_tree4.links.new(group_010_1.outputs[0], group_1.inputs[6])
                node_tree4.links.new(group_011_1.outputs[0], group_1.inputs[7])
                node_tree4.links.new(group_012_1.outputs[0], group_1.inputs[8])
                node_tree4.links.new(group_015_1.outputs[0], group_1.inputs[10])
                node_tree4.links.new(group_016_1.outputs[0], group_1.inputs[9])
                node_tree4.links.new(group_014_1.outputs[0], group_1.inputs[11])
                node_tree4.links.new(group_017_1.outputs[0], group_001_1.inputs[11])
                node_tree4.links.new(group_018_1.outputs[0], group_009_1.inputs[11])
                node_tree4.links.new(separate_rgb_1.outputs[0], math_001_1.inputs[0])
                node_tree4.links.new(group_003_1.outputs[0], normal_map_1.inputs[1])
                node_tree4.links.new(reroute_032_1.outputs[0], principled_bsdf_1.inputs[0])
                node_tree4.links.new(reroute_014_1.outputs[0], colorramp_1.inputs[0])
                node_tree4.links.new(group_020_1.outputs[0], group_009_1.inputs[12])
                node_tree4.links.new(group_020_1.outputs[0], group_001_1.inputs[12])
                node_tree4.links.new(reroute_007_1.outputs[0], bump_1.inputs[0])
                node_tree4.links.new(group_020_1.outputs[0], group_1.inputs[16])
                node_tree4.links.new(bump_1.outputs[0], bump_001_1.inputs[3])
                node_tree4.links.new(mapping_1.outputs[0], image_texture_1.inputs[0])
                node_tree4.links.new(texture_coordinate_1.outputs[2], mapping_1.inputs[0])
                node_tree4.links.new(image_texture_1.outputs[0], separate_rgb_001_1.inputs[0])
                node_tree4.links.new(reroute_016_1.outputs[0], colorramp_001_1.inputs[0])
                node_tree4.links.new(math_004_1.outputs[0], bump_001_1.inputs[2])
                node_tree4.links.new(colorramp_001_1.outputs[0], math_002_1.inputs[0])
                node_tree4.links.new(reroute_055_1.outputs[0], math_002_1.inputs[1])
                node_tree4.links.new(math_002_1.outputs[0], math_003_1.inputs[0])
                node_tree4.links.new(math_003_1.outputs[0], math_004_1.inputs[0])
                node_tree4.links.new(invert_1.outputs[0], mix_004_1.inputs[0])
                node_tree4.links.new(reroute_057_1.outputs[0], bump_1.inputs[2])
                node_tree4.links.new(reroute_034_1.outputs[0], principled_bsdf_1.inputs[3])
                node_tree4.links.new(reroute_033_1.outputs[0], principled_bsdf_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[0], group_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_001_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_001_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_009_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_009_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_003_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_003_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_014_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_014_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_017_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_017_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_020_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_020_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_018_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_018_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_021_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_021_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_019_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_019_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[1], group_013_1.inputs[2])
                node_tree4.links.new(group_022_1.outputs[0], group_013_1.inputs[1])
                node_tree4.links.new(colorramp_1.outputs[0], math_005_1.inputs[0])
                node_tree4.links.new(gamma_1.outputs[0], combine_color_1.inputs[0])
                node_tree4.links.new(gamma_001_1.outputs[0], combine_color_1.inputs[1])
                node_tree4.links.new(reroute_059_1.outputs[0], principled_bsdf_1.inputs[22])
                node_tree4.links.new(normal_map_1.outputs[0], bump_1.inputs[3])
                node_tree4.links.new(math_1.outputs[0], principled_bsdf_1.inputs[7])
                node_tree4.links.new(reroute_002_1.outputs[0], reroute_1.inputs[0])
                node_tree4.links.new(group_1.outputs[0], reroute_001_1.inputs[0])
                node_tree4.links.new(reroute_001_1.outputs[0], reroute_002_1.inputs[0])
                node_tree4.links.new(reroute_1.outputs[0], reroute_003_1.inputs[0])
                node_tree4.links.new(reroute_004_1.outputs[0], mix_1.inputs[6])
                node_tree4.links.new(reroute_003_1.outputs[0], reroute_004_1.inputs[0])
                node_tree4.links.new(reroute_004_1.outputs[0], reroute_005_1.inputs[0])
                node_tree4.links.new(reroute_005_1.outputs[0], mix_005_1.inputs[6])
                node_tree4.links.new(reroute_008_1.outputs[0], reroute_009_1.inputs[0])
                node_tree4.links.new(group_013_1.outputs[0], reroute_008_1.inputs[0])
                node_tree4.links.new(reroute_009_1.outputs[0], mix_005_1.inputs[7])
                node_tree4.links.new(reroute_008_1.outputs[0], reroute_011_1.inputs[0])
                node_tree4.links.new(reroute_011_1.outputs[0], reroute_012_1.inputs[0])
                node_tree4.links.new(reroute_012_1.outputs[0], reroute_013_1.inputs[0])
                node_tree4.links.new(reroute_013_1.outputs[0], principled_bsdf_1.inputs[20])
                node_tree4.links.new(group_020_1.outputs[0], reroute_006_1.inputs[0])
                node_tree4.links.new(reroute_063_1.outputs[0], reroute_007_1.inputs[0])
                node_tree4.links.new(separate_rgb_1.outputs[1], reroute_010_1.inputs[0])
                node_tree4.links.new(reroute_010_1.outputs[0], reroute_014_1.inputs[0])
                node_tree4.links.new(separate_rgb_1.outputs[2], reroute_015_1.inputs[0])
                node_tree4.links.new(reroute_015_1.outputs[0], reroute_016_1.inputs[0])
                node_tree4.links.new(math_001_1.outputs[0], reroute_017_1.inputs[0])
                node_tree4.links.new(reroute_017_1.outputs[0], mix_1.inputs[7])
                node_tree4.links.new(reroute_017_1.outputs[0], reroute_018_1.inputs[0])
                node_tree4.links.new(reroute_019_1.outputs[0], math_1.inputs[1])
                node_tree4.links.new(reroute_018_1.outputs[0], reroute_019_1.inputs[0])
                node_tree4.links.new(reroute_018_1.outputs[0], reroute_020_1.inputs[0])
                node_tree4.links.new(reroute_026_1.outputs[0], gamma_001_1.inputs[0])
                node_tree4.links.new(reroute_003_1.outputs[0], reroute_021_1.inputs[0])
                node_tree4.links.new(reroute_021_1.outputs[0], reroute_022_1.inputs[0])
                node_tree4.links.new(reroute_022_1.outputs[0], reroute_023_1.inputs[0])
                node_tree4.links.new(reroute_021_1.outputs[0], mix_004_1.inputs[6])
                node_tree4.links.new(reroute_023_1.outputs[0], reroute_024_1.inputs[0])
                node_tree4.links.new(reroute_024_1.outputs[0], mix_006_1.inputs[6])
                node_tree4.links.new(reroute_022_1.outputs[0], reroute_025_1.inputs[0])
                node_tree4.links.new(reroute_025_1.outputs[0], principled_bsdf_1.inputs[19])
                node_tree4.links.new(reroute_027_1.outputs[0], reroute_026_1.inputs[0])
                node_tree4.links.new(reroute_020_1.outputs[0], reroute_027_1.inputs[0])
                node_tree4.links.new(mix_004_1.outputs[2], reroute_028_1.inputs[0])
                node_tree4.links.new(reroute_028_1.outputs[0], reroute_029_1.inputs[0])
                node_tree4.links.new(reroute_053_1.outputs[0], reroute_030_1.inputs[0])
                node_tree4.links.new(mix_1.outputs[2], reroute_031_1.inputs[0])
                node_tree4.links.new(reroute_031_1.outputs[0], reroute_032_1.inputs[0])
                node_tree4.links.new(reroute_035_1.outputs[0], reroute_033_1.inputs[0])
                node_tree4.links.new(reroute_036_1.outputs[0], reroute_034_1.inputs[0])
                node_tree4.links.new(reroute_037_1.outputs[0], reroute_035_1.inputs[0])
                node_tree4.links.new(reroute_038_1.outputs[0], reroute_036_1.inputs[0])
                node_tree4.links.new(group_019_1.outputs[0], reroute_037_1.inputs[0])
                node_tree4.links.new(group_021_1.outputs[0], reroute_038_1.inputs[0])
                node_tree4.links.new(group_001_1.outputs[0], reroute_039_1.inputs[0])
                node_tree4.links.new(reroute_039_1.outputs[0], reroute_040_1.inputs[0])
                node_tree4.links.new(reroute_040_1.outputs[0], invert_1.inputs[1])
                node_tree4.links.new(reroute_042_1.outputs[0], principled_bsdf_1.inputs[6])
                node_tree4.links.new(reroute_040_1.outputs[0], reroute_041_1.inputs[0])
                node_tree4.links.new(reroute_041_1.outputs[0], reroute_042_1.inputs[0])
                node_tree4.links.new(reroute_041_1.outputs[0], reroute_043_1.inputs[0])
                node_tree4.links.new(reroute_043_1.outputs[0], reroute_044_1.inputs[0])
                node_tree4.links.new(reroute_044_1.outputs[0], mix_006_1.inputs[0])
                node_tree4.links.new(reroute_043_1.outputs[0], reroute_045_1.inputs[0])
                node_tree4.links.new(reroute_045_1.outputs[0], gamma_1.inputs[0])
                node_tree4.links.new(group_009_1.outputs[0], reroute_046_1.inputs[0])
                node_tree4.links.new(reroute_046_1.outputs[0], reroute_047_1.inputs[0])
                node_tree4.links.new(reroute_047_1.outputs[0], principled_bsdf_1.inputs[9])
                node_tree4.links.new(reroute_046_1.outputs[0], reroute_048_1.inputs[0])
                node_tree4.links.new(reroute_048_1.outputs[0], reroute_049_1.inputs[0])
                node_tree4.links.new(reroute_049_1.outputs[0], reroute_050_1.inputs[0])
                node_tree4.links.new(reroute_050_1.outputs[0], math_006_1.inputs[1])
                node_tree4.links.new(mix_005_1.outputs[2], reroute_051_1.inputs[0])
                node_tree4.links.new(reroute_051_1.outputs[0], reroute_052_1.inputs[0])
                node_tree4.links.new(principled_bsdf_1.outputs[0], reroute_053_1.inputs[0])
                node_tree4.links.new(separate_rgb_001_1.outputs[2], reroute_054_1.inputs[0])
                node_tree4.links.new(reroute_054_1.outputs[0], reroute_055_1.inputs[0])
                node_tree4.links.new(math_005_1.outputs[0], reroute_056_1.inputs[0])
                node_tree4.links.new(reroute_056_1.outputs[0], reroute_057_1.inputs[0])
                node_tree4.links.new(bump_001_1.outputs[0], reroute_058_1.inputs[0])
                node_tree4.links.new(reroute_058_1.outputs[0], reroute_059_1.inputs[0])
                node_tree4.links.new(reroute_058_1.outputs[0], reroute_060_1.inputs[0])
                node_tree4.links.new(reroute_060_1.outputs[0], reroute_061_1.inputs[0])
                node_tree4.links.new(reroute_006_1.outputs[0], reroute_062_1.inputs[0])
                node_tree4.links.new(reroute_062_1.outputs[0], reroute_063_1.inputs[0])
                node_tree4.links.new(group_022_1.outputs[0], group_023_1.inputs[1])
                node_tree4.links.new(group_022_1.outputs[1], group_023_1.inputs[2])
                node_tree4.links.new(math_007_1.outputs[0], principled_bsdf_1.inputs[21])
                node_tree4.links.new(group_023_1.outputs[0], reroute_064_1.inputs[0])
                node_tree4.links.new(reroute_064_1.outputs[0], reroute_065_1.inputs[0])
                node_tree4.links.new(reroute_065_1.outputs[0], math_007_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[19], group_002_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[9], group_002_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[20], group_002_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[21], group_002_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[25], group_004_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[35], group_004_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[36], group_004_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[37], group_004_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[41], group_008_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[51], group_008_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[52], group_008_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[53], group_008_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[57], group_010_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[67], group_010_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[68], group_010_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[69], group_010_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[73], group_011_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[83], group_011_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[84], group_011_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[85], group_011_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[89], group_012_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[99], group_012_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[100], group_012_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[101], group_012_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[105], group_015_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[115], group_015_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[116], group_015_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[117], group_015_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[120], group_016_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[127], group_016_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[128], group_016_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[129], group_016_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[1], group_022_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[2], group_022_1.inputs[1])
                node_tree4.links.new(reroute_061_1.outputs[0], group_output_1.inputs[8])
                node_tree4.links.new(reroute_030_1.outputs[0], group_output_1.inputs[0])
                node_tree4.links.new(reroute_052_1.outputs[0], group_output_1.inputs[4])
                node_tree4.links.new(mix_006_1.outputs[2], group_output_1.inputs[6])
                node_tree4.links.new(reroute_029_1.outputs[0], group_output_1.inputs[5])
                node_tree4.links.new(reroute_031_1.outputs[0], group_output_1.inputs[1])
                node_tree4.links.new(reroute_044_1.outputs[0], group_output_1.inputs[2])
                node_tree4.links.new(reroute_049_1.outputs[0], group_output_1.inputs[3])
                node_tree4.links.new(combine_color_1.outputs[0], group_output_1.inputs[9])
                node_tree4.links.new(math_006_1.outputs[0], group_output_1.inputs[10])
                node_tree4.links.new(reroute_027_1.outputs[0], group_output_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[0], group_014_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[0], group_017_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[0], group_020_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[0], group_019_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[0], group_021_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[0], group_023_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[4], group_014_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[104], group_014_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[104], group_017_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[104], group_020_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[104], group_018_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[104], group_019_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[4], group_019_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[0], group_018_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[4], group_021_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[4], group_023_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[104], group_023_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[104], group_021_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[22], group_014_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[38], group_014_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[54], group_014_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[70], group_014_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[86], group_014_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[102], group_014_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[118], group_014_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[30], group_017_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[14], group_017_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[46], group_017_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[62], group_017_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[78], group_017_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[94], group_017_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[110], group_017_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[12], group_020_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[28], group_020_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[44], group_020_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[60], group_020_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[76], group_020_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[92], group_020_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[108], group_020_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[13], group_018_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[29], group_018_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[45], group_018_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[61], group_018_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[77], group_018_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[93], group_018_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[109], group_018_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[16], group_019_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[32], group_019_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[48], group_019_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[64], group_019_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[80], group_019_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[96], group_019_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[112], group_019_1.inputs[12])
                node_tree4.links.new(group_input_001_1.outputs[124], group_019_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[23], group_021_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[39], group_021_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[55], group_021_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[71], group_021_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[87], group_021_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[103], group_021_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[130], group_021_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[119], group_021_1.inputs[12])
                node_tree4.links.new(group_input_001_1.outputs[17], group_023_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[33], group_023_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[49], group_023_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[65], group_023_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[81], group_023_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[97], group_023_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[125], group_023_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[113], group_023_1.inputs[12])
                node_tree4.links.new(group_input_001_1.outputs[0], group_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[4], group_1.inputs[14])
                node_tree4.links.new(group_input_001_1.outputs[0], group_001_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[4], group_001_1.inputs[13])
                node_tree4.links.new(group_input_001_1.outputs[104], group_1.inputs[15])
                node_tree4.links.new(group_input_001_1.outputs[104], group_001_1.inputs[14])
                node_tree4.links.new(group_input_001_1.outputs[15], group_001_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[31], group_001_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[47], group_001_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[63], group_001_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[79], group_001_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[95], group_001_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[123], group_001_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[111], group_001_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[0], group_009_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[10], group_009_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[26], group_009_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[42], group_009_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[58], group_009_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[74], group_009_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[90], group_009_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[121], group_009_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[106], group_009_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[4], group_009_1.inputs[13])
                node_tree4.links.new(group_input_001_1.outputs[104], group_009_1.inputs[14])
                node_tree4.links.new(group_input_001_1.outputs[0], group_003_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[3], group_003_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[11], group_003_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[27], group_003_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[43], group_003_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[59], group_003_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[75], group_003_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[91], group_003_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[122], group_003_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[107], group_003_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[0], group_013_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[104], group_013_1.inputs[12])
                node_tree4.links.new(group_input_001_1.outputs[4], group_013_1.inputs[11])
                node_tree4.links.new(group_input_001_1.outputs[18], group_013_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[34], group_013_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[50], group_013_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[66], group_013_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[82], group_013_1.inputs[7])
                node_tree4.links.new(group_input_001_1.outputs[98], group_013_1.inputs[8])
                node_tree4.links.new(group_input_001_1.outputs[126], group_013_1.inputs[9])
                node_tree4.links.new(group_input_001_1.outputs[114], group_013_1.inputs[10])
                node_tree4.links.new(group_input_001_1.outputs[0], separate_rgb_1.inputs[0])
                node_tree4.links.new(group_input_001_1.outputs[7], math_001_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[8], math_005_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[4], math_003_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[5], math_004_1.inputs[1])
                node_tree4.links.new(group_input_001_1.outputs[24], group_022_1.inputs[2])
                node_tree4.links.new(group_input_001_1.outputs[40], group_022_1.inputs[3])
                node_tree4.links.new(group_input_001_1.outputs[56], group_022_1.inputs[4])
                node_tree4.links.new(group_input_001_1.outputs[72], group_022_1.inputs[5])
                node_tree4.links.new(group_input_001_1.outputs[88], group_022_1.inputs[6])
                node_tree4.links.new(group_input_001_1.outputs[104], group_003_1.inputs[14])
                node_tree4.links.new(group_input_001_1.outputs[4], group_003_1.inputs[13])
                node_tree4.links.new(group_input_001_1.outputs[12], group_003_1.inputs[12])
        HIMS()
        for i in range(parse_mwsy.tag_parse.rootTagInst.childs[0]['style'].childrenCount):
            temp_palette = parse_mwsy.tag_parse.rootTagInst.childs[0]['style'].childs[i]
            parse_mwsy.default_style = i
            self.root_folder = addon_prefs.root_folder
            self.textureroot = (self.root_folder + '__chore\pc__')
            parse_mwsy.toJson(self.coatingname, self.root_folder)
            coatingJSON = parse_mwsy.json_base
            if parse_mwsy.done == True:
                grimeSwatch = coatingJSON.get('grimeSwatch')
                grimeAmount = coatingJSON.get('grimeAmount')
                scratchAmount = coatingJSON.get('scratchAmount')
                for ob in datasource:
                    if ob.type == "MESH":
                        for mat_slot in ob.material_slots:
                            if mat_slot.material.node_tree:
                                materialname = str(mat_slot.material.name)
                                for path in pathlib.Path(self.materialuserpath).rglob(materialname + '*.material'):
                                    materialpath = str(path).replace(self.root_folder, '')
                                    parse_mat = ReaderFactory.create_reader(materialpath)
                                    parse_mat.load()
                                    parse_mat.toJson()
                                    currentmaterial = parse_mat.json_base
                                    if type(currentmaterial.get('StyleInfo')) == type(None):
                                        continue
                                    else:
                                        materialregion = currentmaterial.get('StyleInfo')[0].get('region')
                                        materialstylename = currentmaterial.get('StyleInfo')[0].get('materialstyle').split('\\')[-1]
                                        materialstyleselection = self.filepath.split('\\')[-1].replace('{ct}.materialstyles','')
                                        normalmap = 'shaders\\default_bitmaps\\bitmaps\\default_normal'
                                        mask0 = 'shaders\\default_bitmaps\\bitmaps\\color_black'
                                        mask1 = 'shaders\\default_bitmaps\\bitmaps\\color_black'
                                        asgtexture = 'shaders\\default_bitmaps\\bitmaps\\color_red'
                                        BaseScaleX = 0.0
                                        BaseScaleY = 0.0
                                        MaterialTransformX = 0.0
                                        MaterialTransformY = 0.0
                                        if self.use_crosscore:
                                            materialstylename = materialstyleselection
                                        if materialstylename == materialstyleselection:
                                            for materialparameters in range(len(currentmaterial.get('MaterialParameters'))):
                                                if currentmaterial.get('MaterialParameters')[materialparameters].get('ParameterName') == 'texel_density':
                                                    BaseScaleX = currentmaterial.get('MaterialParameters')[materialparameters].get('BaseScaleX')
                                                    BaseScaleY = currentmaterial.get('MaterialParameters')[materialparameters].get('BaseScaleY')
                                                    MaterialTransformX = currentmaterial.get('MaterialParameters')[materialparameters].get('MaterialTransformX')
                                                    MaterialTransformY = currentmaterial.get('MaterialParameters')[materialparameters].get('MaterialTransformY')
                                                if currentmaterial.get('MaterialParameters')[materialparameters].get('ParameterName') == 'normal_map':
                                                    normalmap = currentmaterial.get('MaterialParameters')[materialparameters].get('Bitmap')
                                                if currentmaterial.get('MaterialParameters')[materialparameters].get('ParameterName') == 'asg_control':
                                                    asgtexture = currentmaterial.get('MaterialParameters')[materialparameters].get('Bitmap')
                                                if currentmaterial.get('MaterialParameters')[materialparameters].get('ParameterName') == 'mask_0':
                                                    mask0 = currentmaterial.get('MaterialParameters')[materialparameters].get('Bitmap')
                                                    mask1 = currentmaterial.get('MaterialParameters')[materialparameters].get('Bitmap')
                                                if currentmaterial.get('MaterialParameters')[materialparameters].get('ParameterName') == 'mask_1':
                                                    mask1 = currentmaterial.get('MaterialParameters')[materialparameters].get('Bitmap')

                                            materialshader = coatingJSON.get('regionLayers')[materialregion].get('material')
                                            layers = coatingJSON.get('regionLayers')[materialregion].get('layers')

                                            # Get Nodes and Delete Them per material
                                            
                                            node_tree0 = mat_slot.material.node_tree
                                            for node in node_tree0.nodes:
                                                node_tree0.nodes.remove(node)
                                            

                                            # Initialize Texture Importer
                                            settings = ImportSettings()
                                            settings.mipmap = self.mipmap
                                            settings.norm_signed = self.norm_signed

                                            
                                            def readTexture(texturepath):
                                                self.texturepath = (str(self.textureroot + '/' + texturepath + "{pc}.bitmap")).replace('\\','/')
                                                texturename = texturepath.replace('\\','/').split('/')[-1].split('.')[0].split('{')[0] + ".png"
                                                texture = bpy.data.images.get(texturename)
                                                if texture:
                                                    #print('File exists, skipping...')
                                                    img = texture
                                                    return img
                                                else:
                                                    tex = Texture()
                                                    textureData = tex.readTextureImage(self.texturepath,settings,self.use_modules)
                                                    texture = bpy.data.textures.new(texturename,type="IMAGE")
                                                    img = bpy.data.images.new(texturename,textureData[0],textureData[1])
                                                    if textureData[2] is not None:
                                                        img.pixels = textureData[2]
                                                    tex.image = img
                                                    img.pack()
                                                    return img
                                                
                                            material_output_0 = node_tree0.nodes.new('ShaderNodeOutputMaterial')
                                            material_output_0.target = 'ALL'
                                            material_output_0.location = (675, 291)
                                            material_output_0.is_active_output = True

                                            # Apply ASG
                                            asg_texture = node_tree0.nodes.new('ShaderNodeTexImage')
                                            asg_texture.location = (-911, -136)
                                            texturepath = asgtexture
                                            asg_texture.image =  readTexture(texturepath)
                                            asg_texture.image.colorspace_settings.name = 'Non-Color'
                                            asg_texture.label = 'ASG'
                                            asg_texture.interpolation = 'Cubic'

                                            # Mask0 Texture
                                            mask0_texture = node_tree0.nodes.new('ShaderNodeTexImage')
                                            mask0_texture.location = (-911, -422)
                                            texturepath = mask0
                                            mask0_texture.image = readTexture(texturepath)
                                            mask0_texture.image.colorspace_settings.name = 'Non-Color'
                                            mask0_texture.label = 'Mask 0'

                                            # Mask1 Texture
                                            mask1_texture = node_tree0.nodes.new('ShaderNodeTexImage')
                                            mask1_texture.location = (-911, -708)
                                            texturepath = mask1
                                            mask1_texture.image = readTexture(texturepath)
                                            mask1_texture.image.colorspace_settings.name = 'Non-Color'
                                            mask1_texture.label = 'Mask 1'

                                            # Normal Map
                                            normal_texture = node_tree0.nodes.new('ShaderNodeTexImage')
                                            normal_texture.location = (-911, -994)
                                            texturepath = normalmap
                                            normal_texture.image = readTexture(texturepath)
                                            normal_texture.image.colorspace_settings.name = 'Non-Color'
                                            normal_texture.label = 'Normal Map'
                                            
                                            # HIMS innit'
                                            infiniteshader = node_tree0.nodes.new('ShaderNodeGroup')
                                            infiniteshader.node_tree = bpy.data.node_groups.get('HIMS 2.8 by Average Goat Enthusiast')
                                            infiniteshader.location = (177, 267)
                                            infiniteshader.width = 400
                                            
                                            reroute_002_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_002_0.location = (-592, -456)
                                            reroute_004_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_004_0.location = (-563, -743)
                                            reroute_006_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_006_0.location = (-534, -1029)
                                            reroute_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_0.location = (-616, -171)
                                            reroute_003_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_003_0.location = (-592, -72)
                                            reroute_008_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_008_0.location = (-534, -112)
                                            reroute_005_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_005_0.location = (-563, -92)
                                            reroute_001_0 = node_tree0.nodes.new('NodeReroute')
                                            reroute_001_0.location = (-616, -48)
                                            
                                            node_tree0.links.new(reroute_001_0.outputs[0], infiniteshader.inputs[0])
                                            node_tree0.links.new(reroute_003_0.outputs[0], infiniteshader.inputs[1])
                                            node_tree0.links.new(reroute_005_0.outputs[0], infiniteshader.inputs[2])
                                            node_tree0.links.new(reroute_008_0.outputs[0], infiniteshader.inputs[3])
                                            node_tree0.links.new(reroute_0.outputs[0], reroute_001_0.inputs[0])
                                            node_tree0.links.new(reroute_002_0.outputs[0], reroute_003_0.inputs[0])
                                            node_tree0.links.new(reroute_004_0.outputs[0], reroute_005_0.inputs[0])
                                            node_tree0.links.new(reroute_006_0.outputs[0], reroute_008_0.inputs[0])
                                            node_tree0.links.new(asg_texture.outputs[0], reroute_0.inputs[0])
                                            node_tree0.links.new(mask0_texture.outputs[0], reroute_002_0.inputs[0])
                                            node_tree0.links.new(mask1_texture.outputs[0], reroute_004_0.inputs[0])
                                            node_tree0.links.new(normal_texture.outputs[0], reroute_006_0.inputs[0])
                                            
                                            # Inputs!
                                            infiniteshader.inputs[4].default_value = grimeAmount
                                            infiniteshader.inputs[7].default_value = 1
                                            infiniteshader.inputs[8].default_value = 1
                                            
                                            node_tree0.links.new(infiniteshader.outputs[0], material_output_0.inputs[0])
                                            isGrimeDone = False

                                            for swatches in range(len(layers)):
                                                swatchnum = coatingJSON.get('regionLayers')[materialregion].get('layers')[swatches].get('swatch')
                                                if swatchnum == '00000000' or swatchnum == 'DA7B92D3' or swatchnum == 'F53C63A9':
                                                    swatchnum = coatingJSON.get('regionLayers')[materialregion].get('layers')[0].get('swatch') ## if swatch is empty, use Zone 1
                                                for item in range(len(coatingJSON.get('swatches'))):
                                                    EmissiveAmount = coatingJSON.get('swatches')[item].get('emissiveAmount')
                                                    BotColor = coatingJSON.get('swatches')[item].get('colorVariant').get('botColor')
                                                    MidColor = coatingJSON.get('swatches')[item].get('colorVariant').get('midColor')
                                                    TopColor = coatingJSON.get('swatches')[item].get('colorVariant').get('topColor')
                                                    ScratchColor = coatingJSON.get('swatches')[item].get('scratchColor')
                                                    ScratchMetallic = coatingJSON.get('swatches')[item].get('scratchMetallic')
                                                    ScratchRoughness = coatingJSON.get('swatches')[item].get('scratchRoughness')
                                                    Metallic = coatingJSON.get('swatches')[item].get('metallic')     
                                                    Roughness = coatingJSON.get('swatches')[item].get('roughness')
                                                    RoughnessBlack = coatingJSON.get('swatches')[item].get('roughnessBlack')
                                                    RoughnessWhite = coatingJSON.get('swatches')[item].get('roughnessWhite')
                                                    NormalPath = coatingJSON.get('swatches')[item].get('normalPath')
                                                    NormalScale = coatingJSON.get('swatches')[item].get('normalTextureTransform')
                                                    ColorGradientScale = coatingJSON.get('swatches')[item].get('colorAndRoughnessTextureTransform')
                                                    ColorGradientMap = coatingJSON.get('swatches')[item].get('colorGradientMap')
                                                    swatchID = coatingJSON.get('swatches')[item].get('swatchId')
                                                    def createSwatch(isGrime):
                                                        node_tree1 = bpy.data.node_groups.new(swatchID, 'ShaderNodeTree')
                                                            
                                                        # Swatch Inputs
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Base-Scale_X')
                                                        input.name = 'Base-Scale_X'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Base-Scale_Y')
                                                        input.name = 'Base-Scale_Y'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Gradient-Scale_X')
                                                        input.name = 'Gradient-Scale_X'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Gradient-Scale_Y')
                                                        input.name = 'Gradient-Scale_Y'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Normal-Scale_X')
                                                        input.name = 'Normal-Scale_X'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Normal-Scale_Y')
                                                        input.name = 'Normal-Scale_Y'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Material Transform X')
                                                        input.name = 'Material Transform X'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Material Transform Y')
                                                        input.name = 'Material Transform Y'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Roughness')
                                                        input.name = 'Roughness'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Roughness Black')
                                                        input.name = 'Roughness Black'
                                                        
                                                        input = node_tree1.inputs.new('NodeSocketFloat', 'Roughness White')
                                                        input.name = 'Roughness White'
                                                        
                                                        # Swatch Outputs
                                                        output = node_tree1.outputs.new('NodeSocketFloat', 'Gradient Out')
                                                        output.name = 'Gradient Out'
                                                        
                                                        output = node_tree1.outputs.new('NodeSocketFloat', 'Rough Out')
                                                        output.name = 'Rough Out'
                                                        
                                                        output = node_tree1.outputs.new('NodeSocketColor', 'Norm Out')
                                                        output.name = 'Norm Out'

                                                        # Swatch Values
                                                        group_002_0 = node_tree0.nodes.new('ShaderNodeGroup')
                                                        group_002_0.node_tree = bpy.data.node_groups.get(swatchID)
                                                        group_002_0.color = (MidColor[0],MidColor[1],MidColor[2])
                                                        group_002_0.hide = True
                                                        locationX = -150
                                                        locationY = -252 + -352*int(swatches)
                                                        if isGrime == True:
                                                            locationY = -2695
                                                        group_002_0.location = (locationX, locationY)
                                                        group_002_0.name = swatchID
                                                        group_002_0.use_custom_color = True
                                                        group_002_0.width = 250

                                                        
                                                        group_002_0.inputs[0].default_value = BaseScaleX
                                                        group_002_0.inputs[0].name = 'Base-Scale_X'

                                                        
                                                        group_002_0.inputs[1].default_value = BaseScaleY
                                                        group_002_0.inputs[1].name = 'Base-Scale_Y'
                                                        
                                                        group_002_0.inputs[2].default_value = ColorGradientScale[0]
                                                        group_002_0.inputs[2].name = 'Gradient-Scale_X'

                                                        
                                                        group_002_0.inputs[3].default_value = ColorGradientScale[1]
                                                        group_002_0.inputs[3].name = 'Gradient-Scale_Y'

                                                        
                                                        group_002_0.inputs[4].default_value = NormalScale[0]
                                                        group_002_0.inputs[4].name = 'Normal-Scale_X'

                                                        
                                                        group_002_0.inputs[5].default_value = NormalScale[1]
                                                        group_002_0.inputs[5].name = 'Normal-Scale_Y'

                                                        group_002_0.inputs[6].default_value = MaterialTransformX
                                                        group_002_0.inputs[6].name = 'Material Transform X'

                                                        
                                                        group_002_0.inputs[7].default_value = MaterialTransformY
                                                        group_002_0.inputs[7].name = 'Material Transform Y'
                                                        

                                                        group_002_0.inputs[8].default_value = Roughness
                                                        group_002_0.inputs[8].name = 'Roughness'

                                                        
                                                        group_002_0.inputs[9].default_value = RoughnessBlack
                                                        group_002_0.inputs[9].name = 'Roughness Black'
                                                        
                                                        group_002_0.inputs[10].default_value = RoughnessWhite
                                                        group_002_0.inputs[10].name = 'Roughness White'
                                                        
                                                        group_002_0.outputs[0].default_value = 1.0
                                                        group_002_0.outputs[0].name = 'Gradient Out'

                                                        group_002_0.outputs[1].default_value = 0.0
                                                        group_002_0.outputs[1].name = 'Rough Out'
                                                        
                                                        group_002_0.outputs[2].default_value = (0.5, 0.5, 1.0, 1.0)
                                                        group_002_0.outputs[2].name = 'Norm Out'

                                        # The nodes inside the Swatch Group
                                                        
                                                        group_input_1 = node_tree1.nodes.new('NodeGroupInput')
                                                        group_input_1.location = (-1000, -0.0)

                                                        group_output_1 = node_tree1.nodes.new('NodeGroupOutput')
                                                        group_output_1.location = (1000, 0.0)

                                                        swatch_normal = node_tree1.nodes.new('ShaderNodeTexImage')
                                                        swatch_normal.location = (0.0, 0.0)
                                                        texturepath = NormalPath
                                                        swatch_normal.image = readTexture(texturepath)
                                                        swatch_normal.image.colorspace_settings.name = 'Non-Color'
                                                        swatch_normal.label = 'Swatch Normal'

                                                        swatch_gradient = node_tree1.nodes.new('ShaderNodeTexImage')
                                                        swatch_gradient.location = (0.0, 300.0)
                                                        texturepath = ColorGradientMap
                                                        swatch_gradient.image = readTexture(texturepath)
                                                        swatch_gradient.image.colorspace_settings.name = 'Non-Color'
                                                        swatch_gradient.label = 'Swatch Gradient'



                                                        # Better UV Scaling for Gradient
                                                        group_002_1 = node_tree1.nodes.new('ShaderNodeGroup')
                                                        group_002_1.node_tree = bpy.data.node_groups.get('BetterUVScaling')
                                                        group_002_1.location = (-375, -9)
                                                        group_002_1.name = 'Better UV Scaling'
                                                        group_002_1.width = 200

                                                        group_002_1.inputs[0].name = 'Base_Scale_X'
                                                        group_002_1.inputs[1].name = 'Base_Scale_Y'
                                                        group_002_1.inputs[2].name = 'Detail_Scale_X'
                                                        group_002_1.inputs[3].name = 'Detail_Scale_Y'
                                                        group_002_1.inputs[4].name = 'Alternative Transform X'
                                                        group_002_1.inputs[5].name = 'Alternative Transform Y'
                                                        group_002_1.outputs[0].name = 'Finalized Scale'

                                                        node_tree1.links.new(group_input_1.outputs[0], group_002_1.inputs[0])
                                                        node_tree1.links.new(group_input_1.outputs[1], group_002_1.inputs[1])
                                                        node_tree1.links.new(group_input_1.outputs[2], group_002_1.inputs[2])
                                                        node_tree1.links.new(group_input_1.outputs[3], group_002_1.inputs[3])
                                                        node_tree1.links.new(group_input_1.outputs[6], group_002_1.inputs[4])
                                                        node_tree1.links.new(group_input_1.outputs[7], group_002_1.inputs[5])
                                                        node_tree1.links.new(group_002_1.outputs[0], swatch_gradient.inputs[0])

                                                        # Better UV Scaling for Normal
                                                        group_002_2 = node_tree1.nodes.new('ShaderNodeGroup')
                                                        group_002_2.node_tree = bpy.data.node_groups.get('BetterUVScaling')
                                                        group_002_2.location = (-375, -300)
                                                        group_002_2.name = 'Better UV Scaling'
                                                        group_002_2.width = 200

                                                        group_002_2.inputs[0].name = 'Base_Scale_X'
                                                        group_002_2.inputs[1].name = 'Base_Scale_Y'
                                                        group_002_2.inputs[2].name = 'Detail_Scale_X'
                                                        group_002_2.inputs[3].name = 'Detail_Scale_Y'
                                                        group_002_2.inputs[4].name = 'Alternative Transform X'
                                                        group_002_2.inputs[5].name = 'Alternative Transform Y'
                                                        group_002_2.outputs[0].name = 'Finalized Scale'

                                                        node_tree1.links.new(group_input_1.outputs[0], group_002_2.inputs[0])
                                                        node_tree1.links.new(group_input_1.outputs[1], group_002_2.inputs[1])
                                                        node_tree1.links.new(group_input_1.outputs[4], group_002_2.inputs[2])
                                                        node_tree1.links.new(group_input_1.outputs[5], group_002_2.inputs[3])
                                                        node_tree1.links.new(group_input_1.outputs[6], group_002_2.inputs[4])
                                                        node_tree1.links.new(group_input_1.outputs[7], group_002_2.inputs[5])
                                                        node_tree1.links.new(group_002_2.outputs[0], swatch_normal.inputs[0])

                                                        # Separate Gradient and link to Output

                                                        separate_rgb_1 = node_tree1.nodes.new('ShaderNodeSeparateColor')
                                                        separate_rgb_1.mode = 'RGB'
                                                        separate_rgb_1.location = (418, 294)

                                                        node_tree1.links.new(swatch_gradient.outputs[0], separate_rgb_1.inputs[0])
                                                        node_tree1.links.new(separate_rgb_1.outputs[0], group_output_1.inputs[0])
                                                        node_tree1.links.new(swatch_normal.outputs[0], group_output_1.inputs[2])

                                                        # Roughness Math Instance

                                                        group_1 = node_tree1.nodes.new('ShaderNodeGroup')
                                                        group_1.node_tree = bpy.data.node_groups.get('Roughness Math')
                                                        group_1.location = (772, -157)
                                                        group_1.name = 'Group'
                                                        group_1.width = 140.0
                                                        
                                                        group_1.inputs[0].name = 'Base'
                                                        group_1.inputs[1].name = 'Exponent'
                                                        group_1.inputs[2].name = 'Roughness Black'
                                                        group_1.inputs[3].name = 'Roughness White'
                                                        group_1.outputs[0].name = 'Color'

                                                        # Roughness Math Links

                                                        node_tree1.links.new(separate_rgb_1.outputs[2], group_1.inputs[0])
                                                        node_tree1.links.new(group_input_1.outputs[8], group_1.inputs[1])
                                                        node_tree1.links.new(group_input_1.outputs[9], group_1.inputs[2])
                                                        node_tree1.links.new(group_input_1.outputs[10], group_1.inputs[3])
                                                        node_tree1.links.new(group_1.outputs[0], group_output_1.inputs[1])
                                                        
                                                        if not isGrime:
                                                            inputnuminit = 8+16*int(swatches)
                                                            inputnum = 9+16*int(swatches)
                                                            inputnum1 = 10+16*int(swatches)
                                                            inputnum2 = 11+16*int(swatches)
                                                            inputnum3 = 12+16*int(swatches)
                                                            inputnum4 = 13+16*int(swatches)
                                                            inputnum5 = 14+16*int(swatches)
                                                            inputnum6 = 15+16*int(swatches)
                                                            inputnum7 = 16+16*int(swatches)
                                                            inputnum8 = 17+16*int(swatches)
                                                            inputnum9 = 18+16*int(swatches)
                                                            inputnum10 = 19+16*int(swatches)
                                                            inputnum11 = 20+16*int(swatches)
                                                            inputnum12 = 21+16*int(swatches)
                                                            inputnum13 = 22+16*int(swatches)
                                                            inputnum14 = 23+16*int(swatches)
                                                        
                                                            node_tree0.links.new(group_002_0.outputs[0], infiniteshader.inputs[inputnum])
                                                            node_tree0.links.new(group_002_0.outputs[1], infiniteshader.inputs[inputnum1])
                                                            node_tree0.links.new(group_002_0.outputs[2], infiniteshader.inputs[inputnum2])
                                                            infiniteshader.inputs[inputnum3].default_value = scratchAmount
                                                            infiniteshader.inputs[inputnum4].default_value = ScratchRoughness
                                                            infiniteshader.inputs[inputnum5].default_value = ScratchMetallic
                                                            infiniteshader.inputs[inputnum6].default_value = Metallic
                                                            infiniteshader.inputs[inputnum7].default_value = 0
                                                            infiniteshader.inputs[inputnum8].default_value = 0
                                                            infiniteshader.inputs[inputnum9].default_value = EmissiveAmount*10
                                                            infiniteshader.inputs[inputnum10].default_value = (TopColor[0],TopColor[1],TopColor[2],1.0)
                                                            infiniteshader.inputs[inputnum11].default_value = (MidColor[0],MidColor[1],MidColor[2],1.0)
                                                            infiniteshader.inputs[inputnum12].default_value = (BotColor[0],BotColor[1],BotColor[2],1.0)
                                                            infiniteshader.inputs[inputnum13].default_value = (ScratchColor[0],ScratchColor[1],ScratchColor[2],1.0)
                                                            infiniteshader.inputs[inputnum14].default_value = (ScratchColor[0],ScratchColor[1],ScratchColor[2],1.0)
                                                        
                                                            if swatches > 0:
                                                                infiniteshader.inputs[inputnuminit].default_value = 1
                                                            if swatches == 6:
                                                                infiniteshader.inputs[inputnuminit].default_value = 0
                                                        if isGrime:
                                                            node_tree0.links.new(group_002_0.outputs[0], infiniteshader.inputs[120])
                                                            node_tree0.links.new(group_002_0.outputs[1], infiniteshader.inputs[121])
                                                            node_tree0.links.new(group_002_0.outputs[2], infiniteshader.inputs[122])
                                                            infiniteshader.inputs[123].default_value = Metallic
                                                            infiniteshader.inputs[124].default_value = 0
                                                            infiniteshader.inputs[125].default_value = 0
                                                            infiniteshader.inputs[126].default_value = EmissiveAmount
                                                            infiniteshader.inputs[127].default_value = (TopColor[0],TopColor[1],TopColor[2],1.0)
                                                            infiniteshader.inputs[128].default_value = (MidColor[0],MidColor[1],MidColor[2],1.0)
                                                            infiniteshader.inputs[129].default_value = (BotColor[0],BotColor[1],BotColor[2],1.0)
                                                            infiniteshader.inputs[130].default_value = (BotColor[0],BotColor[1],BotColor[2],1.0) 
                                                    if swatchnum == swatchID:
                                                        isGrime = False
                                                        createSwatch(isGrime)
                                                    if swatchID == grimeSwatch:
                                                        if isGrimeDone == False:
                                                            isGrime = True
                                                            createSwatch(isGrime)
                                                            isGrimeDone = True
                                            infiniteshader.inputs[104].default_value = int(self.use_damage)
                
                print('')
                print('''                                      .,:clooxkO00KK0OOxol:^.              
                                  ^:lllccc;,,,^,,,;;cldOKXKOdc^           
                               .;ol;^^^^..             .,cx0XX0x:.        
                             .:oc...,^.                    ^lOXXKkc.      
                            ^ol. .,^                         .l0XXKk,     
                           ;d; .,,.                            ^xKXXKl.   
                          :o^ .;^                               .lKXXKd.  
                         ;d^ .,^                                  cKXKKd. 
                        .o;  ^;                                   .oKXXKl 
                        co. .;.                                    .kXXX0;
                        o:  ^;.                                     cKXXXo
                        d,  ^,                                      ^OXKXk
                        o^  ^^                                      .xXKXO
                        o,  ^,                                      .dXKXO
                        c:  .;.                   .^^.              .xXKXO
                        ^:. .;^         ...  .,:dxkOKOd;.           ^OXKXd
                         ;,  .;.     ...ckOxoxO0KXK00KXXOdc;.       :KXX0:
                         .;^  ^:,....,::o0XXKOKXXXOokXXXKKXKkc^.   .xXKXd.
                          .,^,:l:..  .;:,^;;^.;lxO:.:0X0xOX00KKkl,^oKXXk. 
                             ..                 ...  :KkoOX00KKXXK0KXXk^  
                                                      cl^;cx0XXXXXXXKx.   
                                                       .    ^lkKXXXOc.    
                                                             .oKXOl.      
                                                           ,oOOd;.        
                                                       .^:ool;.           
                                                      .;:;.
                    ''')
                print('                 Thanks for Using Olympus! Support: https://discord.gg/haloarchive')
                return {"FINISHED"}

    def invoke(self,context,event):
        if not self.use_modules:
            context.window_manager.fileselect_add(self)
            return {'RUNNING_MODAL'}
        else:
            self.execute(context)
            return {"FINISHED"}

    
def menu_func(self,context):
    self.layout.operator_context = 'INVOKE_DEFAULT'
    self.layout.operator(ImportCoating.bl_idname,text="Halo Infinite Coating")

def register():
    print("loaded")
    bpy.utils.register_class(ImportCoating)
    bpy.types.TOPBAR_MT_file_import.append(menu_func)
    
def unregister():
    print("unloaded")
    bpy.utils.unregister_class(ImportCoating)
